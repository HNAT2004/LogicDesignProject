
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005134  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005358  08005358  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005358  08005358  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005358  08005358  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005358  08005358  00015358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800535c  0800535c  0001535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005360  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000074  080053d4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080053d4  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016005  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030bd  00000000  00000000  000360a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001288  00000000  00000000  00039160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001130  00000000  00000000  0003a3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019b8e  00000000  00000000  0003b518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016e5c  00000000  00000000  000550a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090047  00000000  00000000  0006bf02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fbf49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005134  00000000  00000000  000fbf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005228 	.word	0x08005228

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005228 	.word	0x08005228

0800014c <LED_RED>:
void Init_Led(void){
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, RESET);
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
}
void LED_RED(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2101      	movs	r1, #1
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <LED_RED+0x14>)
 8000156:	f001 fa1b 	bl	8001590 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <LED_GREEN>:
void LED_GREEN(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2102      	movs	r1, #2
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <LED_GREEN+0x14>)
 800016e:	f001 fa0f 	bl	8001590 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <LED_BLUE>:
void LED_BLUE(void){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, SET);
 8000180:	2201      	movs	r2, #1
 8000182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000186:	4802      	ldr	r0, [pc, #8]	; (8000190 <LED_BLUE+0x14>)
 8000188:	f001 fa02 	bl	8001590 <HAL_GPIO_WritePin>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	40011000 	.word	0x40011000

08000194 <fsm_run>:
#include "LED.h"
#include "i2c-lcd.h"
#include "software_timer.h"
#include "get_time.h"

void fsm_run(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	switch(status){
 8000198:	4b26      	ldr	r3, [pc, #152]	; (8000234 <fsm_run+0xa0>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b02      	cmp	r3, #2
 800019e:	d031      	beq.n	8000204 <fsm_run+0x70>
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	dc45      	bgt.n	8000230 <fsm_run+0x9c>
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d002      	beq.n	80001ae <fsm_run+0x1a>
 80001a8:	2b01      	cmp	r3, #1
 80001aa:	d011      	beq.n	80001d0 <fsm_run+0x3c>
			status = WAITING;
		}
		break;
	}

}
 80001ac:	e040      	b.n	8000230 <fsm_run+0x9c>
		LED_BLUE();
 80001ae:	f7ff ffe5 	bl	800017c <LED_BLUE>
		lcd_goto_XY(0, 0);
 80001b2:	2100      	movs	r1, #0
 80001b4:	2000      	movs	r0, #0
 80001b6:	f000 f932 	bl	800041e <lcd_goto_XY>
		lcd_send_string(time_str);
 80001ba:	481f      	ldr	r0, [pc, #124]	; (8000238 <fsm_run+0xa4>)
 80001bc:	f000 f91a 	bl	80003f4 <lcd_send_string>
		lcd_goto_XY(1, 0);
 80001c0:	2100      	movs	r1, #0
 80001c2:	2001      	movs	r0, #1
 80001c4:	f000 f92b 	bl	800041e <lcd_goto_XY>
		lcd_send_string(date_str);
 80001c8:	481c      	ldr	r0, [pc, #112]	; (800023c <fsm_run+0xa8>)
 80001ca:	f000 f913 	bl	80003f4 <lcd_send_string>
		break;
 80001ce:	e02f      	b.n	8000230 <fsm_run+0x9c>
		LED_GREEN();
 80001d0:	f7ff ffc8 	bl	8000164 <LED_GREEN>
		lcd_goto_XY(1, 5);
 80001d4:	2105      	movs	r1, #5
 80001d6:	2001      	movs	r0, #1
 80001d8:	f000 f921 	bl	800041e <lcd_goto_XY>
		lcd_send_string("Welcome");
 80001dc:	4818      	ldr	r0, [pc, #96]	; (8000240 <fsm_run+0xac>)
 80001de:	f000 f909 	bl	80003f4 <lcd_send_string>
		lcd_goto_XY(2, 0);
 80001e2:	2100      	movs	r1, #0
 80001e4:	2002      	movs	r0, #2
 80001e6:	f000 f91a 	bl	800041e <lcd_goto_XY>
		lcd_send_string(printlcd);
 80001ea:	4816      	ldr	r0, [pc, #88]	; (8000244 <fsm_run+0xb0>)
 80001ec:	f000 f902 	bl	80003f4 <lcd_send_string>
		if(timer0_flag == 1){
 80001f0:	4b15      	ldr	r3, [pc, #84]	; (8000248 <fsm_run+0xb4>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b01      	cmp	r3, #1
 80001f6:	d118      	bne.n	800022a <fsm_run+0x96>
			lcd_init();
 80001f8:	f000 f8ce 	bl	8000398 <lcd_init>
			status = WAITING;
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <fsm_run+0xa0>)
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
		break;
 8000202:	e012      	b.n	800022a <fsm_run+0x96>
		LED_RED();
 8000204:	f7ff ffa2 	bl	800014c <LED_RED>
		lcd_goto_XY(1, 5);
 8000208:	2105      	movs	r1, #5
 800020a:	2001      	movs	r0, #1
 800020c:	f000 f907 	bl	800041e <lcd_goto_XY>
		lcd_send_string("ERROR");
 8000210:	480e      	ldr	r0, [pc, #56]	; (800024c <fsm_run+0xb8>)
 8000212:	f000 f8ef 	bl	80003f4 <lcd_send_string>
		if(timer0_flag == 1){
 8000216:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <fsm_run+0xb4>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	2b01      	cmp	r3, #1
 800021c:	d107      	bne.n	800022e <fsm_run+0x9a>
			lcd_init();
 800021e:	f000 f8bb 	bl	8000398 <lcd_init>
			status = WAITING;
 8000222:	4b04      	ldr	r3, [pc, #16]	; (8000234 <fsm_run+0xa0>)
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
		break;
 8000228:	e001      	b.n	800022e <fsm_run+0x9a>
		break;
 800022a:	bf00      	nop
 800022c:	e000      	b.n	8000230 <fsm_run+0x9c>
		break;
 800022e:	bf00      	nop
}
 8000230:	bf00      	nop
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000090 	.word	0x20000090
 8000238:	200000c8 	.word	0x200000c8
 800023c:	200000b8 	.word	0x200000b8
 8000240:	08005240 	.word	0x08005240
 8000244:	200000d4 	.word	0x200000d4
 8000248:	20000094 	.word	0x20000094
 800024c:	08005248 	.word	0x08005248

08000250 <Update_Date_String>:
// Khai báo các biến chuỗi cho ngày và giờ
char time_str[9];  // Chuỗi cho thời gian (HH:MM:SS)
char date_str[11]; // Chuỗi cho ngày (DD-MM-YYYY)

void Update_Date_String(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af02      	add	r7, sp, #8
    // Lấy ngày hiện tại
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000256:	2200      	movs	r2, #0
 8000258:	490a      	ldr	r1, [pc, #40]	; (8000284 <Update_Date_String+0x34>)
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <Update_Date_String+0x38>)
 800025c:	f002 fec0 	bl	8002fe0 <HAL_RTC_GetDate>

    // Format ngày vào chuỗi date_str
    sprintf(date_str, "%02d-%02d-20%02d", sDate.Date, sDate.Month, sDate.Year);
 8000260:	4b08      	ldr	r3, [pc, #32]	; (8000284 <Update_Date_String+0x34>)
 8000262:	789b      	ldrb	r3, [r3, #2]
 8000264:	461a      	mov	r2, r3
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <Update_Date_String+0x34>)
 8000268:	785b      	ldrb	r3, [r3, #1]
 800026a:	4619      	mov	r1, r3
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <Update_Date_String+0x34>)
 800026e:	78db      	ldrb	r3, [r3, #3]
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	460b      	mov	r3, r1
 8000274:	4905      	ldr	r1, [pc, #20]	; (800028c <Update_Date_String+0x3c>)
 8000276:	4806      	ldr	r0, [pc, #24]	; (8000290 <Update_Date_String+0x40>)
 8000278:	f004 fc70 	bl	8004b5c <siprintf>
}
 800027c:	bf00      	nop
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	200000c4 	.word	0x200000c4
 8000288:	20000130 	.word	0x20000130
 800028c:	08005250 	.word	0x08005250
 8000290:	200000b8 	.word	0x200000b8

08000294 <Update_Time_String>:

void Update_Time_String(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b082      	sub	sp, #8
 8000298:	af02      	add	r7, sp, #8
    // Lấy giờ hiện tại
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800029a:	2200      	movs	r2, #0
 800029c:	490a      	ldr	r1, [pc, #40]	; (80002c8 <Update_Time_String+0x34>)
 800029e:	480b      	ldr	r0, [pc, #44]	; (80002cc <Update_Time_String+0x38>)
 80002a0:	f002 fd10 	bl	8002cc4 <HAL_RTC_GetTime>

    // Format giờ vào chuỗi time_str
    sprintf(time_str, "%02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <Update_Time_String+0x34>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <Update_Time_String+0x34>)
 80002ac:	785b      	ldrb	r3, [r3, #1]
 80002ae:	4619      	mov	r1, r3
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <Update_Time_String+0x34>)
 80002b2:	789b      	ldrb	r3, [r3, #2]
 80002b4:	9300      	str	r3, [sp, #0]
 80002b6:	460b      	mov	r3, r1
 80002b8:	4905      	ldr	r1, [pc, #20]	; (80002d0 <Update_Time_String+0x3c>)
 80002ba:	4806      	ldr	r0, [pc, #24]	; (80002d4 <Update_Time_String+0x40>)
 80002bc:	f004 fc4e 	bl	8004b5c <siprintf>
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	200000b4 	.word	0x200000b4
 80002cc:	20000130 	.word	0x20000130
 80002d0:	08005264 	.word	0x08005264
 80002d4:	200000c8 	.word	0x200000c8

080002d8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af02      	add	r7, sp, #8
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	f023 030f 	bic.w	r3, r3, #15
 80002e8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	011b      	lsls	r3, r3, #4
 80002ee:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80002f0:	7bfb      	ldrb	r3, [r7, #15]
 80002f2:	f043 030c 	orr.w	r3, r3, #12
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80002fa:	7bfb      	ldrb	r3, [r7, #15]
 80002fc:	f043 0308 	orr.w	r3, r3, #8
 8000300:	b2db      	uxtb	r3, r3
 8000302:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000304:	7bbb      	ldrb	r3, [r7, #14]
 8000306:	f043 030c 	orr.w	r3, r3, #12
 800030a:	b2db      	uxtb	r3, r3
 800030c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800030e:	7bbb      	ldrb	r3, [r7, #14]
 8000310:	f043 0308 	orr.w	r3, r3, #8
 8000314:	b2db      	uxtb	r3, r3
 8000316:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000318:	f107 0208 	add.w	r2, r7, #8
 800031c:	2364      	movs	r3, #100	; 0x64
 800031e:	9300      	str	r3, [sp, #0]
 8000320:	2304      	movs	r3, #4
 8000322:	2142      	movs	r1, #66	; 0x42
 8000324:	4803      	ldr	r0, [pc, #12]	; (8000334 <lcd_send_cmd+0x5c>)
 8000326:	f001 facb 	bl	80018c0 <HAL_I2C_Master_Transmit>
}
 800032a:	bf00      	nop
 800032c:	3710      	adds	r7, #16
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200000dc 	.word	0x200000dc

08000338 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000350:	7bfb      	ldrb	r3, [r7, #15]
 8000352:	f043 030d 	orr.w	r3, r3, #13
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	f043 0309 	orr.w	r3, r3, #9
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000364:	7bbb      	ldrb	r3, [r7, #14]
 8000366:	f043 030d 	orr.w	r3, r3, #13
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800036e:	7bbb      	ldrb	r3, [r7, #14]
 8000370:	f043 0309 	orr.w	r3, r3, #9
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000378:	f107 0208 	add.w	r2, r7, #8
 800037c:	2364      	movs	r3, #100	; 0x64
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	2304      	movs	r3, #4
 8000382:	2142      	movs	r1, #66	; 0x42
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <lcd_send_data+0x5c>)
 8000386:	f001 fa9b 	bl	80018c0 <HAL_I2C_Master_Transmit>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	200000dc 	.word	0x200000dc

08000398 <lcd_init>:

void lcd_init (void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 800039c:	2033      	movs	r0, #51	; 0x33
 800039e:	f7ff ff9b 	bl	80002d8 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 80003a2:	2032      	movs	r0, #50	; 0x32
 80003a4:	f7ff ff98 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(50);
 80003a8:	2032      	movs	r0, #50	; 0x32
 80003aa:	f000 fd89 	bl	8000ec0 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 80003ae:	2028      	movs	r0, #40	; 0x28
 80003b0:	f7ff ff92 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(50);
 80003b4:	2032      	movs	r0, #50	; 0x32
 80003b6:	f000 fd83 	bl	8000ec0 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 80003ba:	2001      	movs	r0, #1
 80003bc:	f7ff ff8c 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(50);
 80003c0:	2032      	movs	r0, #50	; 0x32
 80003c2:	f000 fd7d 	bl	8000ec0 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 80003c6:	2006      	movs	r0, #6
 80003c8:	f7ff ff86 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(50);
 80003cc:	2032      	movs	r0, #50	; 0x32
 80003ce:	f000 fd77 	bl	8000ec0 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 80003d2:	200c      	movs	r0, #12
 80003d4:	f7ff ff80 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(50);
 80003d8:	2032      	movs	r0, #50	; 0x32
 80003da:	f000 fd71 	bl	8000ec0 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 80003de:	2002      	movs	r0, #2
 80003e0:	f7ff ff7a 	bl	80002d8 <lcd_send_cmd>
	HAL_Delay(50);
 80003e4:	2032      	movs	r0, #50	; 0x32
 80003e6:	f000 fd6b 	bl	8000ec0 <HAL_Delay>
	lcd_send_cmd (0x80);
 80003ea:	2080      	movs	r0, #128	; 0x80
 80003ec:	f7ff ff74 	bl	80002d8 <lcd_send_cmd>
}
 80003f0:	bf00      	nop
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff96 	bl	8000338 <lcd_send_data>
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b084      	sub	sp, #16
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
 8000426:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d108      	bne.n	8000440 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	b2da      	uxtb	r2, r3
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	b2db      	uxtb	r3, r3
 8000436:	4413      	add	r3, r2
 8000438:	b2db      	uxtb	r3, r3
 800043a:	337f      	adds	r3, #127	; 0x7f
 800043c:	73fb      	strb	r3, [r7, #15]
 800043e:	e008      	b.n	8000452 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	b2db      	uxtb	r3, r3
 8000444:	3340      	adds	r3, #64	; 0x40
 8000446:	b2db      	uxtb	r3, r3
 8000448:	b25b      	sxtb	r3, r3
 800044a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800044e:	b25b      	sxtb	r3, r3
 8000450:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	4618      	mov	r0, r3
 8000456:	f7ff ff3f 	bl	80002d8 <lcd_send_cmd>
}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}
	...

08000464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046a:	f000 fcc7 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800046e:	f000 f833 	bl	80004d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000472:	f000 f97d 	bl	8000770 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000476:	f000 f889 	bl	800058c <MX_I2C1_Init>
  MX_TIM1_Init();
 800047a:	f000 f8ff 	bl	800067c <MX_TIM1_Init>
  MX_RTC_Init();
 800047e:	f000 f8b3 	bl	80005e8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000482:	f000 f94b 	bl	800071c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000486:	480f      	ldr	r0, [pc, #60]	; (80004c4 <main+0x60>)
 8000488:	f003 f938 	bl	80036fc <HAL_TIM_Base_Start_IT>
  lcd_init();
 800048c:	f7ff ff84 	bl	8000398 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = WAITING;
 8000490:	4b0d      	ldr	r3, [pc, #52]	; (80004c8 <main+0x64>)
 8000492:	2200      	movs	r2, #0
 8000494:	601a      	str	r2, [r3, #0]
  Update_Date_String();
 8000496:	f7ff fedb 	bl	8000250 <Update_Date_String>
  Update_Time_String();
 800049a:	f7ff fefb 	bl	8000294 <Update_Time_String>
  HAL_UART_Receive_IT(&huart2,&temp,1);
 800049e:	2201      	movs	r2, #1
 80004a0:	490a      	ldr	r1, [pc, #40]	; (80004cc <main+0x68>)
 80004a2:	480b      	ldr	r0, [pc, #44]	; (80004d0 <main+0x6c>)
 80004a4:	f003 fd1c 	bl	8003ee0 <HAL_UART_Receive_IT>
  char str[5];
  int i = 1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	60fb      	str	r3, [r7, #12]

  while (1)
  {


  if (buffer_flag == 1) {
 80004ac:	4b09      	ldr	r3, [pc, #36]	; (80004d4 <main+0x70>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d104      	bne.n	80004be <main+0x5a>
		  command_parser_fsm();
 80004b4:	f000 fc2e 	bl	8000d14 <command_parser_fsm>
		  buffer_flag = 0;
 80004b8:	4b06      	ldr	r3, [pc, #24]	; (80004d4 <main+0x70>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
	}
  fsm_run();
 80004be:	f7ff fe69 	bl	8000194 <fsm_run>
  if (buffer_flag == 1) {
 80004c2:	e7f3      	b.n	80004ac <main+0x48>
 80004c4:	20000144 	.word	0x20000144
 80004c8:	20000090 	.word	0x20000090
 80004cc:	200000a8 	.word	0x200000a8
 80004d0:	2000018c 	.word	0x2000018c
 80004d4:	200000aa 	.word	0x200000aa

080004d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b094      	sub	sp, #80	; 0x50
 80004dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004e2:	2228      	movs	r2, #40	; 0x28
 80004e4:	2100      	movs	r1, #0
 80004e6:	4618      	mov	r0, r3
 80004e8:	f004 fa7a 	bl	80049e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004ec:	f107 0314 	add.w	r3, r7, #20
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000508:	2306      	movs	r3, #6
 800050a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800050c:	2301      	movs	r3, #1
 800050e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000510:	2301      	movs	r3, #1
 8000512:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000514:	2310      	movs	r3, #16
 8000516:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000518:	2302      	movs	r3, #2
 800051a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800051c:	2300      	movs	r3, #0
 800051e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000520:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000524:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000526:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fd2c 	bl	8001f88 <HAL_RCC_OscConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000536:	f000 f9a9 	bl	800088c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800053a:	230f      	movs	r3, #15
 800053c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800053e:	2302      	movs	r3, #2
 8000540:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000542:	2300      	movs	r3, #0
 8000544:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800054a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800054c:	2300      	movs	r3, #0
 800054e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	2102      	movs	r1, #2
 8000556:	4618      	mov	r0, r3
 8000558:	f001 ff96 	bl	8002488 <HAL_RCC_ClockConfig>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d001      	beq.n	8000566 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000562:	f000 f993 	bl	800088c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000566:	2301      	movs	r3, #1
 8000568:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800056a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800056e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	4618      	mov	r0, r3
 8000574:	f002 f916 	bl	80027a4 <HAL_RCCEx_PeriphCLKConfig>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800057e:	f000 f985 	bl	800088c <Error_Handler>
  }
}
 8000582:	bf00      	nop
 8000584:	3750      	adds	r7, #80	; 0x50
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
	...

0800058c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <MX_I2C1_Init+0x50>)
 8000592:	4a13      	ldr	r2, [pc, #76]	; (80005e0 <MX_I2C1_Init+0x54>)
 8000594:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <MX_I2C1_Init+0x50>)
 8000598:	4a12      	ldr	r2, [pc, #72]	; (80005e4 <MX_I2C1_Init+0x58>)
 800059a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800059c:	4b0f      	ldr	r3, [pc, #60]	; (80005dc <MX_I2C1_Init+0x50>)
 800059e:	2200      	movs	r2, #0
 80005a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005a2:	4b0e      	ldr	r3, [pc, #56]	; (80005dc <MX_I2C1_Init+0x50>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <MX_I2C1_Init+0x50>)
 80005aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b0:	4b0a      	ldr	r3, [pc, #40]	; (80005dc <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005b6:	4b09      	ldr	r3, [pc, #36]	; (80005dc <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_I2C1_Init+0x50>)
 80005ca:	f001 f835 	bl	8001638 <HAL_I2C_Init>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005d4:	f000 f95a 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	200000dc 	.word	0x200000dc
 80005e0:	40005400 	.word	0x40005400
 80005e4:	000186a0 	.word	0x000186a0

080005e8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	460a      	mov	r2, r1
 80005f4:	801a      	strh	r2, [r3, #0]
 80005f6:	460a      	mov	r2, r1
 80005f8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80005fa:	2300      	movs	r3, #0
 80005fc:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_RTC_Init+0x8c>)
 8000600:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <MX_RTC_Init+0x90>)
 8000602:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_RTC_Init+0x8c>)
 8000606:	f04f 32ff 	mov.w	r2, #4294967295
 800060a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_RTC_Init+0x8c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000612:	4818      	ldr	r0, [pc, #96]	; (8000674 <MX_RTC_Init+0x8c>)
 8000614:	f002 fa32 	bl	8002a7c <HAL_RTC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800061e:	f000 f935 	bl	800088c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 8000622:	2317      	movs	r3, #23
 8000624:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8000626:	2330      	movs	r3, #48	; 0x30
 8000628:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800062a:	2300      	movs	r3, #0
 800062c:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	480f      	ldr	r0, [pc, #60]	; (8000674 <MX_RTC_Init+0x8c>)
 8000636:	f002 faad 	bl	8002b94 <HAL_RTC_SetTime>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 8000640:	f000 f924 	bl	800088c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8000644:	2304      	movs	r3, #4
 8000646:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 8000648:	2311      	movs	r3, #17
 800064a:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x7;
 800064c:	2307      	movs	r3, #7
 800064e:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 8000650:	2324      	movs	r3, #36	; 0x24
 8000652:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 8000654:	463b      	mov	r3, r7
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_RTC_Init+0x8c>)
 800065c:	f002 fc0a 	bl	8002e74 <HAL_RTC_SetDate>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000666:	f000 f911 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	20000130 	.word	0x20000130
 8000678:	40002800 	.word	0x40002800

0800067c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000682:	f107 0308 	add.w	r3, r7, #8
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000690:	463b      	mov	r3, r7
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <MX_TIM1_Init+0x98>)
 800069a:	4a1f      	ldr	r2, [pc, #124]	; (8000718 <MX_TIM1_Init+0x9c>)
 800069c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800069e:	4b1d      	ldr	r3, [pc, #116]	; (8000714 <MX_TIM1_Init+0x98>)
 80006a0:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80006a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006a6:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <MX_TIM1_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 80006ac:	4b19      	ldr	r3, [pc, #100]	; (8000714 <MX_TIM1_Init+0x98>)
 80006ae:	2209      	movs	r2, #9
 80006b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006b2:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_TIM1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006b8:	4b16      	ldr	r3, [pc, #88]	; (8000714 <MX_TIM1_Init+0x98>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_TIM1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006c4:	4813      	ldr	r0, [pc, #76]	; (8000714 <MX_TIM1_Init+0x98>)
 80006c6:	f002 ffca 	bl	800365e <HAL_TIM_Base_Init>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80006d0:	f000 f8dc 	bl	800088c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006da:	f107 0308 	add.w	r3, r7, #8
 80006de:	4619      	mov	r1, r3
 80006e0:	480c      	ldr	r0, [pc, #48]	; (8000714 <MX_TIM1_Init+0x98>)
 80006e2:	f003 f94d 	bl	8003980 <HAL_TIM_ConfigClockSource>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80006ec:	f000 f8ce 	bl	800088c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_TIM1_Init+0x98>)
 80006fe:	f003 fb2f 	bl	8003d60 <HAL_TIMEx_MasterConfigSynchronization>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000708:	f000 f8c0 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800070c:	bf00      	nop
 800070e:	3718      	adds	r7, #24
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000144 	.word	0x20000144
 8000718:	40012c00 	.word	0x40012c00

0800071c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART2_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000728:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800072c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART2_UART_Init+0x4c>)
 8000754:	f003 fb74 	bl	8003e40 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f000 f895 	bl	800088c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000018c 	.word	0x2000018c
 800076c:	40004400 	.word	0x40004400

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <MX_GPIO_Init+0xf8>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	4a37      	ldr	r2, [pc, #220]	; (8000868 <MX_GPIO_Init+0xf8>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6193      	str	r3, [r2, #24]
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <MX_GPIO_Init+0xf8>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	f003 0310 	and.w	r3, r3, #16
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079c:	4b32      	ldr	r3, [pc, #200]	; (8000868 <MX_GPIO_Init+0xf8>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a31      	ldr	r2, [pc, #196]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0320 	and.w	r3, r3, #32
 80007b0:	60bb      	str	r3, [r7, #8]
 80007b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a2b      	ldr	r2, [pc, #172]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007ba:	f043 0304 	orr.w	r3, r3, #4
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0304 	and.w	r3, r3, #4
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007cc:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007ce:	699b      	ldr	r3, [r3, #24]
 80007d0:	4a25      	ldr	r2, [pc, #148]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007d2:	f043 0308 	orr.w	r3, r3, #8
 80007d6:	6193      	str	r3, [r2, #24]
 80007d8:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_GPIO_Init+0xf8>)
 80007da:	699b      	ldr	r3, [r3, #24]
 80007dc:	f003 0308 	and.w	r3, r3, #8
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2123      	movs	r1, #35	; 0x23
 80007e8:	4820      	ldr	r0, [pc, #128]	; (800086c <MX_GPIO_Init+0xfc>)
 80007ea:	f000 fed1 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_Pin, GPIO_PIN_RESET);
 80007ee:	2200      	movs	r2, #0
 80007f0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007f4:	481e      	ldr	r0, [pc, #120]	; (8000870 <MX_GPIO_Init+0x100>)
 80007f6:	f000 fecb 	bl	8001590 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000800:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_GPIO_Init+0x104>)
 8000802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000808:	f107 0310 	add.w	r3, r7, #16
 800080c:	4619      	mov	r1, r3
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <MX_GPIO_Init+0x100>)
 8000810:	f000 fd3a 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE1_Pin;
 8000814:	2323      	movs	r3, #35	; 0x23
 8000816:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2302      	movs	r3, #2
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4619      	mov	r1, r3
 800082a:	4810      	ldr	r0, [pc, #64]	; (800086c <MX_GPIO_Init+0xfc>)
 800082c:	f000 fd2c 	bl	8001288 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_Pin;
 8000830:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000834:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000836:	2301      	movs	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2302      	movs	r3, #2
 8000840:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <MX_GPIO_Init+0x100>)
 800084a:	f000 fd1d 	bl	8001288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2028      	movs	r0, #40	; 0x28
 8000854:	f000 fc2f 	bl	80010b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000858:	2028      	movs	r0, #40	; 0x28
 800085a:	f000 fc48 	bl	80010ee <HAL_NVIC_EnableIRQ>

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000
 800086c:	40010800 	.word	0x40010800
 8000870:	40011000 	.word	0x40011000
 8000874:	10110000 	.word	0x10110000

08000878 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	timer_run();
 8000880:	f000 f824 	bl	80008cc <timer_run>
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000890:	b672      	cpsid	i
}
 8000892:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000894:	e7fe      	b.n	8000894 <Error_Handler+0x8>
	...

08000898 <setTimer0>:
int timer1_flag = 0;
int timer1_counter = 0;

int TIMER_CYCLE = 10;

void setTimer0(int duration){
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <setTimer0+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	fb92 f3f3 	sdiv	r3, r2, r3
 80008aa:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <setTimer0+0x2c>)
 80008ac:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <setTimer0+0x30>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000098 	.word	0x20000098
 80008c8:	20000094 	.word	0x20000094

080008cc <timer_run>:
//		return 1;
//	}
//	return 0;
//}

void timer_run(void){
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 80008d0:	4b11      	ldr	r3, [pc, #68]	; (8000918 <timer_run+0x4c>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	dd0b      	ble.n	80008f0 <timer_run+0x24>
		timer0_counter--;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <timer_run+0x4c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	3b01      	subs	r3, #1
 80008de:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <timer_run+0x4c>)
 80008e0:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <timer_run+0x4c>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	dc02      	bgt.n	80008f0 <timer_run+0x24>
			timer0_flag = 1;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <timer_run+0x50>)
 80008ec:	2201      	movs	r2, #1
 80008ee:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 80008f0:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <timer_run+0x54>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dd0b      	ble.n	8000910 <timer_run+0x44>
		timer1_counter--;
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <timer_run+0x54>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	4a08      	ldr	r2, [pc, #32]	; (8000920 <timer_run+0x54>)
 8000900:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 8000902:	4b07      	ldr	r3, [pc, #28]	; (8000920 <timer_run+0x54>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	2b00      	cmp	r3, #0
 8000908:	dc02      	bgt.n	8000910 <timer_run+0x44>
			timer1_flag = 1;
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <timer_run+0x58>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	20000098 	.word	0x20000098
 800091c:	20000094 	.word	0x20000094
 8000920:	200000a0 	.word	0x200000a0
 8000924:	2000009c 	.word	0x2000009c

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b085      	sub	sp, #20
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800092e:	4b15      	ldr	r3, [pc, #84]	; (8000984 <HAL_MspInit+0x5c>)
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	4a14      	ldr	r2, [pc, #80]	; (8000984 <HAL_MspInit+0x5c>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6193      	str	r3, [r2, #24]
 800093a:	4b12      	ldr	r3, [pc, #72]	; (8000984 <HAL_MspInit+0x5c>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x5c>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x5c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000950:	61d3      	str	r3, [r2, #28]
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x5c>)
 8000954:	69db      	ldr	r3, [r3, #28]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <HAL_MspInit+0x60>)
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <HAL_MspInit+0x60>)
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40021000 	.word	0x40021000
 8000988:	40010000 	.word	0x40010000

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_I2C_MspInit+0x90>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d132      	bne.n	8000a12 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ac:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009b2:	f043 0308 	orr.w	r3, r3, #8
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0308 	and.w	r3, r3, #8
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80009c4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ca:	2312      	movs	r3, #18
 80009cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009ce:	2303      	movs	r3, #3
 80009d0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4812      	ldr	r0, [pc, #72]	; (8000a24 <HAL_I2C_MspInit+0x98>)
 80009da:	f000 fc55 	bl	8001288 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80009de:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <HAL_I2C_MspInit+0x9c>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	627b      	str	r3, [r7, #36]	; 0x24
 80009e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
 80009ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ee:	f043 0302 	orr.w	r3, r3, #2
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
 80009f4:	4a0c      	ldr	r2, [pc, #48]	; (8000a28 <HAL_I2C_MspInit+0x9c>)
 80009f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a04:	61d3      	str	r3, [r2, #28]
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <HAL_I2C_MspInit+0x94>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	40021000 	.word	0x40021000
 8000a24:	40010c00 	.word	0x40010c00
 8000a28:	40010000 	.word	0x40010000

08000a2c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_RTC_MspInit+0x4c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d118      	bne.n	8000a70 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000a3e:	f001 fa97 	bl	8001f70 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <HAL_RTC_MspInit+0x50>)
 8000a44:	69db      	ldr	r3, [r3, #28]
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <HAL_RTC_MspInit+0x50>)
 8000a48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000a4c:	61d3      	str	r3, [r2, #28]
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <HAL_RTC_MspInit+0x50>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_RTC_MspInit+0x54>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	2100      	movs	r1, #0
 8000a64:	2003      	movs	r0, #3
 8000a66:	f000 fb26 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a6a:	2003      	movs	r0, #3
 8000a6c:	f000 fb3f 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40002800 	.word	0x40002800
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	4242043c 	.word	0x4242043c

08000a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a0d      	ldr	r2, [pc, #52]	; (8000ac8 <HAL_TIM_Base_MspInit+0x44>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d113      	bne.n	8000abe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a0c      	ldr	r2, [pc, #48]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000a9c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b0a      	ldr	r3, [pc, #40]	; (8000acc <HAL_TIM_Base_MspInit+0x48>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2019      	movs	r0, #25
 8000ab4:	f000 faff 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000ab8:	2019      	movs	r0, #25
 8000aba:	f000 fb18 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000abe:	bf00      	nop
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40012c00 	.word	0x40012c00
 8000acc:	40021000 	.word	0x40021000

08000ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0310 	add.w	r3, r7, #16
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4a19      	ldr	r2, [pc, #100]	; (8000b50 <HAL_UART_MspInit+0x80>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d12b      	bne.n	8000b48 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000af0:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000af6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000afa:	61d3      	str	r3, [r2, #28]
 8000afc:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a11      	ldr	r2, [pc, #68]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_UART_MspInit+0x84>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b20:	230c      	movs	r3, #12
 8000b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	f107 0310 	add.w	r3, r7, #16
 8000b30:	4619      	mov	r1, r3
 8000b32:	4809      	ldr	r0, [pc, #36]	; (8000b58 <HAL_UART_MspInit+0x88>)
 8000b34:	f000 fba8 	bl	8001288 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2026      	movs	r0, #38	; 0x26
 8000b3e:	f000 faba 	bl	80010b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b42:	2026      	movs	r0, #38	; 0x26
 8000b44:	f000 fad3 	bl	80010ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3720      	adds	r7, #32
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40021000 	.word	0x40021000
 8000b58:	40010800 	.word	0x40010800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <NMI_Handler+0x4>

08000b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <HardFault_Handler+0x4>

08000b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <MemManage_Handler+0x4>

08000b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b72:	e7fe      	b.n	8000b72 <BusFault_Handler+0x4>

08000b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b78:	e7fe      	b.n	8000b78 <UsageFault_Handler+0x4>

08000b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b92:	b480      	push	{r7}
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr

08000b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ba2:	f000 f971 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <RTC_IRQHandler+0x10>)
 8000bb2:	f002 fd0b 	bl	80035cc <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000130 	.word	0x20000130

08000bc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	; (8000bd0 <TIM1_UP_IRQHandler+0x10>)
 8000bc6:	f002 fdeb 	bl	80037a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000144 	.word	0x20000144

08000bd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <USART2_IRQHandler+0x10>)
 8000bda:	f003 f9a7 	bl	8003f2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000018c 	.word	0x2000018c

08000be8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bf0:	f000 fd00 	bl	80015f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c00:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <_sbrk+0x5c>)
 8000c02:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <_sbrk+0x60>)
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c0c:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <_sbrk+0x64>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <_sbrk+0x64>)
 8000c16:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <_sbrk+0x68>)
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1a:	4b10      	ldr	r3, [pc, #64]	; (8000c5c <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d207      	bcs.n	8000c38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c28:	f003 fe92 	bl	8004950 <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	220c      	movs	r2, #12
 8000c30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e009      	b.n	8000c4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c38:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <_sbrk+0x64>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3e:	4b07      	ldr	r3, [pc, #28]	; (8000c5c <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <_sbrk+0x64>)
 8000c48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20005000 	.word	0x20005000
 8000c58:	00000400 	.word	0x00000400
 8000c5c:	200000a4 	.word	0x200000a4
 8000c60:	200001f8 	.word	0x200001f8

08000c64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <HAL_UART_RxCpltCallback>:
uint8_t buffer[MAX_BUFFER_SIZE];
uint8_t index_buffer = 0;
uint8_t buffer_flag = 0;

extern UART_HandleTypeDef huart2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if(huart -> Instance == USART2){
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_UART_RxCpltCallback+0x50>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d119      	bne.n	8000cb6 <HAL_UART_RxCpltCallback+0x46>
		buffer[index_buffer++] = temp;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_UART_RxCpltCallback+0x54>)
 8000c84:	781b      	ldrb	r3, [r3, #0]
 8000c86:	1c5a      	adds	r2, r3, #1
 8000c88:	b2d1      	uxtb	r1, r2
 8000c8a:	4a0e      	ldr	r2, [pc, #56]	; (8000cc4 <HAL_UART_RxCpltCallback+0x54>)
 8000c8c:	7011      	strb	r1, [r2, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	4b0d      	ldr	r3, [pc, #52]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000c92:	7819      	ldrb	r1, [r3, #0]
 8000c94:	4b0d      	ldr	r3, [pc, #52]	; (8000ccc <HAL_UART_RxCpltCallback+0x5c>)
 8000c96:	5499      	strb	r1, [r3, r2]
		if(index_buffer == 30) index_buffer = 0;
 8000c98:	4b0a      	ldr	r3, [pc, #40]	; (8000cc4 <HAL_UART_RxCpltCallback+0x54>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b1e      	cmp	r3, #30
 8000c9e:	d102      	bne.n	8000ca6 <HAL_UART_RxCpltCallback+0x36>
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_UART_RxCpltCallback+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	701a      	strb	r2, [r3, #0]
		buffer_flag = 1;
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	; (8000cd0 <HAL_UART_RxCpltCallback+0x60>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_IT(&huart2,&temp,1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	4906      	ldr	r1, [pc, #24]	; (8000cc8 <HAL_UART_RxCpltCallback+0x58>)
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <HAL_UART_RxCpltCallback+0x64>)
 8000cb2:	f003 f915 	bl	8003ee0 <HAL_UART_Receive_IT>
	}
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	200000a9 	.word	0x200000a9
 8000cc8:	200000a8 	.word	0x200000a8
 8000ccc:	200001d4 	.word	0x200001d4
 8000cd0:	200000aa 	.word	0x200000aa
 8000cd4:	2000018c 	.word	0x2000018c

08000cd8 <clear_buffer>:
void clear_buffer() {
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
	for (int i = 0; i < 10; i++) {
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	e007      	b.n	8000cf4 <clear_buffer+0x1c>
		buffer[i] = 0;
 8000ce4:	4a09      	ldr	r2, [pc, #36]	; (8000d0c <clear_buffer+0x34>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 10; i++) {
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b09      	cmp	r3, #9
 8000cf8:	ddf4      	ble.n	8000ce4 <clear_buffer+0xc>
	}
	index_buffer = 0;
 8000cfa:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <clear_buffer+0x38>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	701a      	strb	r2, [r3, #0]
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	200001d4 	.word	0x200001d4
 8000d10:	200000a9 	.word	0x200000a9

08000d14 <command_parser_fsm>:
void command_parser_fsm(){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
	if(strncmp((char*)buffer, "1", 1) == 0) {
 8000d1a:	4b20      	ldr	r3, [pc, #128]	; (8000d9c <command_parser_fsm+0x88>)
 8000d1c:	781a      	ldrb	r2, [r3, #0]
 8000d1e:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <command_parser_fsm+0x8c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	1ad3      	subs	r3, r2, r3
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d10f      	bne.n	8000d48 <command_parser_fsm+0x34>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d2c:	481d      	ldr	r0, [pc, #116]	; (8000da4 <command_parser_fsm+0x90>)
 8000d2e:	f000 fc47 	bl	80015c0 <HAL_GPIO_TogglePin>
		setTimer0(2000);
 8000d32:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d36:	f7ff fdaf 	bl	8000898 <setTimer0>
		lcd_init();
 8000d3a:	f7ff fb2d 	bl	8000398 <lcd_init>
		status = DECLINE;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <command_parser_fsm+0x94>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	601a      	str	r2, [r3, #0]
		clear_buffer();
 8000d44:	f7ff ffc8 	bl	8000cd8 <clear_buffer>
	}

		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4c:	4815      	ldr	r0, [pc, #84]	; (8000da4 <command_parser_fsm+0x90>)
 8000d4e:	f000 fc37 	bl	80015c0 <HAL_GPIO_TogglePin>
		for (size_t i = 0; i < 4 - 1; i++) {
 8000d52:	2300      	movs	r3, #0
 8000d54:	607b      	str	r3, [r7, #4]
 8000d56:	e00b      	b.n	8000d70 <command_parser_fsm+0x5c>
			printlcd[i] = (char)buffer[i];
 8000d58:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <command_parser_fsm+0x88>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4413      	add	r3, r2
 8000d5e:	7819      	ldrb	r1, [r3, #0]
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <command_parser_fsm+0x98>)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	460a      	mov	r2, r1
 8000d68:	701a      	strb	r2, [r3, #0]
		for (size_t i = 0; i < 4 - 1; i++) {
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2b02      	cmp	r3, #2
 8000d74:	d9f0      	bls.n	8000d58 <command_parser_fsm+0x44>
		  }
		printlcd[3] = '\0'; // Ký tự kết thúc chuỗi
 8000d76:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <command_parser_fsm+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	70da      	strb	r2, [r3, #3]
		setTimer0(2000);
 8000d7c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d80:	f7ff fd8a 	bl	8000898 <setTimer0>
		lcd_init();
 8000d84:	f7ff fb08 	bl	8000398 <lcd_init>
		status = ACCEPT;
 8000d88:	4b07      	ldr	r3, [pc, #28]	; (8000da8 <command_parser_fsm+0x94>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	601a      	str	r2, [r3, #0]
		clear_buffer();
 8000d8e:	f7ff ffa3 	bl	8000cd8 <clear_buffer>

}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200001d4 	.word	0x200001d4
 8000da0:	08005274 	.word	0x08005274
 8000da4:	40011000 	.word	0x40011000
 8000da8:	20000090 	.word	0x20000090
 8000dac:	200000d4 	.word	0x200000d4

08000db0 <Reset_Handler>:
 8000db0:	f7ff ff58 	bl	8000c64 <SystemInit>
 8000db4:	480b      	ldr	r0, [pc, #44]	; (8000de4 <LoopFillZerobss+0xe>)
 8000db6:	490c      	ldr	r1, [pc, #48]	; (8000de8 <LoopFillZerobss+0x12>)
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <LoopFillZerobss+0x16>)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:
 8000dbe:	58d4      	ldr	r4, [r2, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:
 8000dc4:	18c4      	adds	r4, r0, r3
 8000dc6:	428c      	cmp	r4, r1
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
 8000dca:	4a09      	ldr	r2, [pc, #36]	; (8000df0 <LoopFillZerobss+0x1a>)
 8000dcc:	4c09      	ldr	r4, [pc, #36]	; (8000df4 <LoopFillZerobss+0x1e>)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:
 8000dd6:	42a2      	cmp	r2, r4
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>
 8000dda:	f003 fdbf 	bl	800495c <__libc_init_array>
 8000dde:	f7ff fb41 	bl	8000464 <main>
 8000de2:	4770      	bx	lr
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000074 	.word	0x20000074
 8000dec:	08005360 	.word	0x08005360
 8000df0:	20000074 	.word	0x20000074
 8000df4:	200001f4 	.word	0x200001f4

08000df8 <ADC1_2_IRQHandler>:
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 f947 	bl	80010a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fd86 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 f95f 	bl	800110a <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295
 8000e64:	f000 f927 	bl	80010b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	2000000c 	.word	0x2000000c
 8000e84:	20000008 	.word	0x20000008

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	2000000c 	.word	0x2000000c
 8000ea8:	200001e0 	.word	0x200001e0

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	200001e0 	.word	0x200001e0

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff fff0 	bl	8000eac <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffe0 	bl	8000eac <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000000c 	.word	0x2000000c

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4906      	ldr	r1, [pc, #24]	; (8000fa0 <__NVIC_EnableIRQ+0x34>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bc80      	pop	{r7}
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100

08000fa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	6039      	str	r1, [r7, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	db0a      	blt.n	8000fce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	490c      	ldr	r1, [pc, #48]	; (8000ff0 <__NVIC_SetPriority+0x4c>)
 8000fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc2:	0112      	lsls	r2, r2, #4
 8000fc4:	b2d2      	uxtb	r2, r2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fcc:	e00a      	b.n	8000fe4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	4908      	ldr	r1, [pc, #32]	; (8000ff4 <__NVIC_SetPriority+0x50>)
 8000fd4:	79fb      	ldrb	r3, [r7, #7]
 8000fd6:	f003 030f 	and.w	r3, r3, #15
 8000fda:	3b04      	subs	r3, #4
 8000fdc:	0112      	lsls	r2, r2, #4
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	440b      	add	r3, r1
 8000fe2:	761a      	strb	r2, [r3, #24]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bc80      	pop	{r7}
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000e100 	.word	0xe000e100
 8000ff4:	e000ed00 	.word	0xe000ed00

08000ff8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b089      	sub	sp, #36	; 0x24
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f003 0307 	and.w	r3, r3, #7
 800100a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f1c3 0307 	rsb	r3, r3, #7
 8001012:	2b04      	cmp	r3, #4
 8001014:	bf28      	it	cs
 8001016:	2304      	movcs	r3, #4
 8001018:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3304      	adds	r3, #4
 800101e:	2b06      	cmp	r3, #6
 8001020:	d902      	bls.n	8001028 <NVIC_EncodePriority+0x30>
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3b03      	subs	r3, #3
 8001026:	e000      	b.n	800102a <NVIC_EncodePriority+0x32>
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	f04f 32ff 	mov.w	r2, #4294967295
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43da      	mvns	r2, r3
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	401a      	ands	r2, r3
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001040:	f04f 31ff 	mov.w	r1, #4294967295
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	fa01 f303 	lsl.w	r3, r1, r3
 800104a:	43d9      	mvns	r1, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	4313      	orrs	r3, r2
         );
}
 8001052:	4618      	mov	r0, r3
 8001054:	3724      	adds	r7, #36	; 0x24
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3b01      	subs	r3, #1
 8001068:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800106c:	d301      	bcc.n	8001072 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800106e:	2301      	movs	r3, #1
 8001070:	e00f      	b.n	8001092 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001072:	4a0a      	ldr	r2, [pc, #40]	; (800109c <SysTick_Config+0x40>)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3b01      	subs	r3, #1
 8001078:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107a:	210f      	movs	r1, #15
 800107c:	f04f 30ff 	mov.w	r0, #4294967295
 8001080:	f7ff ff90 	bl	8000fa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001084:	4b05      	ldr	r3, [pc, #20]	; (800109c <SysTick_Config+0x40>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108a:	4b04      	ldr	r3, [pc, #16]	; (800109c <SysTick_Config+0x40>)
 800108c:	2207      	movs	r2, #7
 800108e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001090:	2300      	movs	r3, #0
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	e000e010 	.word	0xe000e010

080010a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff ff2d 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b086      	sub	sp, #24
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	4603      	mov	r3, r0
 80010be:	60b9      	str	r1, [r7, #8]
 80010c0:	607a      	str	r2, [r7, #4]
 80010c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010c8:	f7ff ff42 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	68b9      	ldr	r1, [r7, #8]
 80010d2:	6978      	ldr	r0, [r7, #20]
 80010d4:	f7ff ff90 	bl	8000ff8 <NVIC_EncodePriority>
 80010d8:	4602      	mov	r2, r0
 80010da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff5f 	bl	8000fa4 <__NVIC_SetPriority>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff35 	bl	8000f6c <__NVIC_EnableIRQ>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffa2 	bl	800105c <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001122:	b480      	push	{r7}
 8001124:	b085      	sub	sp, #20
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b02      	cmp	r3, #2
 8001138:	d008      	beq.n	800114c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2204      	movs	r2, #4
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e020      	b.n	800118e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f022 020e 	bic.w	r2, r2, #14
 800115a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001174:	2101      	movs	r1, #1
 8001176:	fa01 f202 	lsl.w	r2, r1, r2
 800117a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2201      	movs	r2, #1
 8001180:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d005      	beq.n	80011bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2204      	movs	r2, #4
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e051      	b.n	8001260 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020e 	bic.w	r2, r2, #14
 80011ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a22      	ldr	r2, [pc, #136]	; (800126c <HAL_DMA_Abort_IT+0xd4>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d029      	beq.n	800123a <HAL_DMA_Abort_IT+0xa2>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a21      	ldr	r2, [pc, #132]	; (8001270 <HAL_DMA_Abort_IT+0xd8>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d022      	beq.n	8001236 <HAL_DMA_Abort_IT+0x9e>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1f      	ldr	r2, [pc, #124]	; (8001274 <HAL_DMA_Abort_IT+0xdc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01a      	beq.n	8001230 <HAL_DMA_Abort_IT+0x98>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_DMA_Abort_IT+0xe0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d012      	beq.n	800122a <HAL_DMA_Abort_IT+0x92>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_DMA_Abort_IT+0xe4>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d00a      	beq.n	8001224 <HAL_DMA_Abort_IT+0x8c>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a1b      	ldr	r2, [pc, #108]	; (8001280 <HAL_DMA_Abort_IT+0xe8>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d102      	bne.n	800121e <HAL_DMA_Abort_IT+0x86>
 8001218:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800121c:	e00e      	b.n	800123c <HAL_DMA_Abort_IT+0xa4>
 800121e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001222:	e00b      	b.n	800123c <HAL_DMA_Abort_IT+0xa4>
 8001224:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001228:	e008      	b.n	800123c <HAL_DMA_Abort_IT+0xa4>
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	e005      	b.n	800123c <HAL_DMA_Abort_IT+0xa4>
 8001230:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001234:	e002      	b.n	800123c <HAL_DMA_Abort_IT+0xa4>
 8001236:	2310      	movs	r3, #16
 8001238:	e000      	b.n	800123c <HAL_DMA_Abort_IT+0xa4>
 800123a:	2301      	movs	r3, #1
 800123c:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_DMA_Abort_IT+0xec>)
 800123e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	4798      	blx	r3
    } 
  }
  return status;
 8001260:	7bfb      	ldrb	r3, [r7, #15]
}
 8001262:	4618      	mov	r0, r3
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020008 	.word	0x40020008
 8001270:	4002001c 	.word	0x4002001c
 8001274:	40020030 	.word	0x40020030
 8001278:	40020044 	.word	0x40020044
 800127c:	40020058 	.word	0x40020058
 8001280:	4002006c 	.word	0x4002006c
 8001284:	40020000 	.word	0x40020000

08001288 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001288:	b480      	push	{r7}
 800128a:	b08b      	sub	sp, #44	; 0x2c
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e169      	b.n	8001570 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800129c:	2201      	movs	r2, #1
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	f040 8158 	bne.w	800156a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4a9a      	ldr	r2, [pc, #616]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d05e      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012c4:	4a98      	ldr	r2, [pc, #608]	; (8001528 <HAL_GPIO_Init+0x2a0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d875      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ca:	4a98      	ldr	r2, [pc, #608]	; (800152c <HAL_GPIO_Init+0x2a4>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d058      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012d0:	4a96      	ldr	r2, [pc, #600]	; (800152c <HAL_GPIO_Init+0x2a4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d86f      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012d6:	4a96      	ldr	r2, [pc, #600]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d052      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012dc:	4a94      	ldr	r2, [pc, #592]	; (8001530 <HAL_GPIO_Init+0x2a8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d869      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012e2:	4a94      	ldr	r2, [pc, #592]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d04c      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012e8:	4a92      	ldr	r2, [pc, #584]	; (8001534 <HAL_GPIO_Init+0x2ac>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d863      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012ee:	4a92      	ldr	r2, [pc, #584]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d046      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
 80012f4:	4a90      	ldr	r2, [pc, #576]	; (8001538 <HAL_GPIO_Init+0x2b0>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d85d      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 80012fa:	2b12      	cmp	r3, #18
 80012fc:	d82a      	bhi.n	8001354 <HAL_GPIO_Init+0xcc>
 80012fe:	2b12      	cmp	r3, #18
 8001300:	d859      	bhi.n	80013b6 <HAL_GPIO_Init+0x12e>
 8001302:	a201      	add	r2, pc, #4	; (adr r2, 8001308 <HAL_GPIO_Init+0x80>)
 8001304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001308:	08001383 	.word	0x08001383
 800130c:	0800135d 	.word	0x0800135d
 8001310:	0800136f 	.word	0x0800136f
 8001314:	080013b1 	.word	0x080013b1
 8001318:	080013b7 	.word	0x080013b7
 800131c:	080013b7 	.word	0x080013b7
 8001320:	080013b7 	.word	0x080013b7
 8001324:	080013b7 	.word	0x080013b7
 8001328:	080013b7 	.word	0x080013b7
 800132c:	080013b7 	.word	0x080013b7
 8001330:	080013b7 	.word	0x080013b7
 8001334:	080013b7 	.word	0x080013b7
 8001338:	080013b7 	.word	0x080013b7
 800133c:	080013b7 	.word	0x080013b7
 8001340:	080013b7 	.word	0x080013b7
 8001344:	080013b7 	.word	0x080013b7
 8001348:	080013b7 	.word	0x080013b7
 800134c:	08001365 	.word	0x08001365
 8001350:	08001379 	.word	0x08001379
 8001354:	4a79      	ldr	r2, [pc, #484]	; (800153c <HAL_GPIO_Init+0x2b4>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800135a:	e02c      	b.n	80013b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	623b      	str	r3, [r7, #32]
          break;
 8001362:	e029      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	3304      	adds	r3, #4
 800136a:	623b      	str	r3, [r7, #32]
          break;
 800136c:	e024      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	3308      	adds	r3, #8
 8001374:	623b      	str	r3, [r7, #32]
          break;
 8001376:	e01f      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	330c      	adds	r3, #12
 800137e:	623b      	str	r3, [r7, #32]
          break;
 8001380:	e01a      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d102      	bne.n	8001390 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800138a:	2304      	movs	r3, #4
 800138c:	623b      	str	r3, [r7, #32]
          break;
 800138e:	e013      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d105      	bne.n	80013a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001398:	2308      	movs	r3, #8
 800139a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69fa      	ldr	r2, [r7, #28]
 80013a0:	611a      	str	r2, [r3, #16]
          break;
 80013a2:	e009      	b.n	80013b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013a4:	2308      	movs	r3, #8
 80013a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69fa      	ldr	r2, [r7, #28]
 80013ac:	615a      	str	r2, [r3, #20]
          break;
 80013ae:	e003      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e000      	b.n	80013b8 <HAL_GPIO_Init+0x130>
          break;
 80013b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	2bff      	cmp	r3, #255	; 0xff
 80013bc:	d801      	bhi.n	80013c2 <HAL_GPIO_Init+0x13a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	e001      	b.n	80013c6 <HAL_GPIO_Init+0x13e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2bff      	cmp	r3, #255	; 0xff
 80013cc:	d802      	bhi.n	80013d4 <HAL_GPIO_Init+0x14c>
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	e002      	b.n	80013da <HAL_GPIO_Init+0x152>
 80013d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d6:	3b08      	subs	r3, #8
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	210f      	movs	r1, #15
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	401a      	ands	r2, r3
 80013ec:	6a39      	ldr	r1, [r7, #32]
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	fa01 f303 	lsl.w	r3, r1, r3
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 80b1 	beq.w	800156a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001408:	4b4d      	ldr	r3, [pc, #308]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6193      	str	r3, [r2, #24]
 8001414:	4b4a      	ldr	r3, [pc, #296]	; (8001540 <HAL_GPIO_Init+0x2b8>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001420:	4a48      	ldr	r2, [pc, #288]	; (8001544 <HAL_GPIO_Init+0x2bc>)
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	089b      	lsrs	r3, r3, #2
 8001426:	3302      	adds	r3, #2
 8001428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800142c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	220f      	movs	r2, #15
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	43db      	mvns	r3, r3
 800143e:	68fa      	ldr	r2, [r7, #12]
 8001440:	4013      	ands	r3, r2
 8001442:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a40      	ldr	r2, [pc, #256]	; (8001548 <HAL_GPIO_Init+0x2c0>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d013      	beq.n	8001474 <HAL_GPIO_Init+0x1ec>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a3f      	ldr	r2, [pc, #252]	; (800154c <HAL_GPIO_Init+0x2c4>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d00d      	beq.n	8001470 <HAL_GPIO_Init+0x1e8>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a3e      	ldr	r2, [pc, #248]	; (8001550 <HAL_GPIO_Init+0x2c8>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x1e4>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a3d      	ldr	r2, [pc, #244]	; (8001554 <HAL_GPIO_Init+0x2cc>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_GPIO_Init+0x1e0>
 8001464:	2303      	movs	r3, #3
 8001466:	e006      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001468:	2304      	movs	r3, #4
 800146a:	e004      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 800146c:	2302      	movs	r3, #2
 800146e:	e002      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_GPIO_Init+0x1ee>
 8001474:	2300      	movs	r3, #0
 8001476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001478:	f002 0203 	and.w	r2, r2, #3
 800147c:	0092      	lsls	r2, r2, #2
 800147e:	4093      	lsls	r3, r2
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001486:	492f      	ldr	r1, [pc, #188]	; (8001544 <HAL_GPIO_Init+0x2bc>)
 8001488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3302      	adds	r3, #2
 800148e:	68fa      	ldr	r2, [r7, #12]
 8001490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d006      	beq.n	80014ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80014a0:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	492c      	ldr	r1, [pc, #176]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	608b      	str	r3, [r1, #8]
 80014ac:	e006      	b.n	80014bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	4928      	ldr	r1, [pc, #160]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014b8:	4013      	ands	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d006      	beq.n	80014d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014c8:	4b23      	ldr	r3, [pc, #140]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	4922      	ldr	r1, [pc, #136]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	60cb      	str	r3, [r1, #12]
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014d6:	4b20      	ldr	r3, [pc, #128]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014d8:	68da      	ldr	r2, [r3, #12]
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	43db      	mvns	r3, r3
 80014de:	491e      	ldr	r1, [pc, #120]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014e0:	4013      	ands	r3, r2
 80014e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d006      	beq.n	80014fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80014f0:	4b19      	ldr	r3, [pc, #100]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4918      	ldr	r1, [pc, #96]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80014fe:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	43db      	mvns	r3, r3
 8001506:	4914      	ldr	r1, [pc, #80]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 8001508:	4013      	ands	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d021      	beq.n	800155c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	490e      	ldr	r1, [pc, #56]	; (8001558 <HAL_GPIO_Init+0x2d0>)
 800151e:	69bb      	ldr	r3, [r7, #24]
 8001520:	4313      	orrs	r3, r2
 8001522:	600b      	str	r3, [r1, #0]
 8001524:	e021      	b.n	800156a <HAL_GPIO_Init+0x2e2>
 8001526:	bf00      	nop
 8001528:	10320000 	.word	0x10320000
 800152c:	10310000 	.word	0x10310000
 8001530:	10220000 	.word	0x10220000
 8001534:	10210000 	.word	0x10210000
 8001538:	10120000 	.word	0x10120000
 800153c:	10110000 	.word	0x10110000
 8001540:	40021000 	.word	0x40021000
 8001544:	40010000 	.word	0x40010000
 8001548:	40010800 	.word	0x40010800
 800154c:	40010c00 	.word	0x40010c00
 8001550:	40011000 	.word	0x40011000
 8001554:	40011400 	.word	0x40011400
 8001558:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_GPIO_Init+0x304>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	43db      	mvns	r3, r3
 8001564:	4909      	ldr	r1, [pc, #36]	; (800158c <HAL_GPIO_Init+0x304>)
 8001566:	4013      	ands	r3, r2
 8001568:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	3301      	adds	r3, #1
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001576:	fa22 f303 	lsr.w	r3, r2, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	f47f ae8e 	bne.w	800129c <HAL_GPIO_Init+0x14>
  }
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	372c      	adds	r7, #44	; 0x2c
 8001586:	46bd      	mov	sp, r7
 8001588:	bc80      	pop	{r7}
 800158a:	4770      	bx	lr
 800158c:	40010400 	.word	0x40010400

08001590 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	807b      	strh	r3, [r7, #2]
 800159c:	4613      	mov	r3, r2
 800159e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d003      	beq.n	80015ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015a6:	887a      	ldrh	r2, [r7, #2]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015ac:	e003      	b.n	80015b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015ae:	887b      	ldrh	r3, [r7, #2]
 80015b0:	041a      	lsls	r2, r3, #16
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr

080015c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	460b      	mov	r3, r1
 80015ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015d2:	887a      	ldrh	r2, [r7, #2]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4013      	ands	r3, r2
 80015d8:	041a      	lsls	r2, r3, #16
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	43d9      	mvns	r1, r3
 80015de:	887b      	ldrh	r3, [r7, #2]
 80015e0:	400b      	ands	r3, r1
 80015e2:	431a      	orrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	611a      	str	r2, [r3, #16]
}
 80015e8:	bf00      	nop
 80015ea:	3714      	adds	r7, #20
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
	...

080015f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015fe:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001600:	695a      	ldr	r2, [r3, #20]
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	4013      	ands	r3, r2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d006      	beq.n	8001618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800160a:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800160c:	88fb      	ldrh	r3, [r7, #6]
 800160e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	4618      	mov	r0, r3
 8001614:	f000 f806 	bl	8001624 <HAL_GPIO_EXTI_Callback>
  }
}
 8001618:	bf00      	nop
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40010400 	.word	0x40010400

08001624 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d101      	bne.n	800164a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e12b      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001650:	b2db      	uxtb	r3, r3
 8001652:	2b00      	cmp	r3, #0
 8001654:	d106      	bne.n	8001664 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff f994 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2224      	movs	r2, #36	; 0x24
 8001668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0201 	bic.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800168a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800169a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800169c:	f001 f83c 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80016a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	4a81      	ldr	r2, [pc, #516]	; (80018ac <HAL_I2C_Init+0x274>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d807      	bhi.n	80016bc <HAL_I2C_Init+0x84>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4a80      	ldr	r2, [pc, #512]	; (80018b0 <HAL_I2C_Init+0x278>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	bf94      	ite	ls
 80016b4:	2301      	movls	r3, #1
 80016b6:	2300      	movhi	r3, #0
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	e006      	b.n	80016ca <HAL_I2C_Init+0x92>
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4a7d      	ldr	r2, [pc, #500]	; (80018b4 <HAL_I2C_Init+0x27c>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	bf94      	ite	ls
 80016c4:	2301      	movls	r3, #1
 80016c6:	2300      	movhi	r3, #0
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0e7      	b.n	80018a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4a78      	ldr	r2, [pc, #480]	; (80018b8 <HAL_I2C_Init+0x280>)
 80016d6:	fba2 2303 	umull	r2, r3, r2, r3
 80016da:	0c9b      	lsrs	r3, r3, #18
 80016dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	68ba      	ldr	r2, [r7, #8]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a6a      	ldr	r2, [pc, #424]	; (80018ac <HAL_I2C_Init+0x274>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d802      	bhi.n	800170c <HAL_I2C_Init+0xd4>
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	e009      	b.n	8001720 <HAL_I2C_Init+0xe8>
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	4a69      	ldr	r2, [pc, #420]	; (80018bc <HAL_I2C_Init+0x284>)
 8001718:	fba2 2303 	umull	r2, r3, r2, r3
 800171c:	099b      	lsrs	r3, r3, #6
 800171e:	3301      	adds	r3, #1
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	430b      	orrs	r3, r1
 8001726:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001732:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	495c      	ldr	r1, [pc, #368]	; (80018ac <HAL_I2C_Init+0x274>)
 800173c:	428b      	cmp	r3, r1
 800173e:	d819      	bhi.n	8001774 <HAL_I2C_Init+0x13c>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1e59      	subs	r1, r3, #1
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	005b      	lsls	r3, r3, #1
 800174a:	fbb1 f3f3 	udiv	r3, r1, r3
 800174e:	1c59      	adds	r1, r3, #1
 8001750:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001754:	400b      	ands	r3, r1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00a      	beq.n	8001770 <HAL_I2C_Init+0x138>
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	1e59      	subs	r1, r3, #1
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	fbb1 f3f3 	udiv	r3, r1, r3
 8001768:	3301      	adds	r3, #1
 800176a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176e:	e051      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001770:	2304      	movs	r3, #4
 8001772:	e04f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d111      	bne.n	80017a0 <HAL_I2C_Init+0x168>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	1e58      	subs	r0, r3, #1
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6859      	ldr	r1, [r3, #4]
 8001784:	460b      	mov	r3, r1
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	e012      	b.n	80017c6 <HAL_I2C_Init+0x18e>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Init+0x196>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e022      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10e      	bne.n	80017f4 <HAL_I2C_Init+0x1bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	1e58      	subs	r0, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6859      	ldr	r1, [r3, #4]
 80017de:	460b      	mov	r3, r1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	440b      	add	r3, r1
 80017e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e8:	3301      	adds	r3, #1
 80017ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017f2:	e00f      	b.n	8001814 <HAL_I2C_Init+0x1dc>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	1e58      	subs	r0, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6859      	ldr	r1, [r3, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	0099      	lsls	r1, r3, #2
 8001804:	440b      	add	r3, r1
 8001806:	fbb0 f3f3 	udiv	r3, r0, r3
 800180a:	3301      	adds	r3, #1
 800180c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001814:	6879      	ldr	r1, [r7, #4]
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	4313      	orrs	r3, r2
 800181a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6911      	ldr	r1, [r2, #16]
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	68d2      	ldr	r2, [r2, #12]
 800184e:	4311      	orrs	r1, r2
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	6812      	ldr	r2, [r2, #0]
 8001854:	430b      	orrs	r3, r1
 8001856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f042 0201 	orr.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2220      	movs	r2, #32
 800188e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	000186a0 	.word	0x000186a0
 80018b0:	001e847f 	.word	0x001e847f
 80018b4:	003d08ff 	.word	0x003d08ff
 80018b8:	431bde83 	.word	0x431bde83
 80018bc:	10624dd3 	.word	0x10624dd3

080018c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b088      	sub	sp, #32
 80018c4:	af02      	add	r7, sp, #8
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	461a      	mov	r2, r3
 80018cc:	460b      	mov	r3, r1
 80018ce:	817b      	strh	r3, [r7, #10]
 80018d0:	4613      	mov	r3, r2
 80018d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff faea 	bl	8000eac <HAL_GetTick>
 80018d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b20      	cmp	r3, #32
 80018e4:	f040 80e0 	bne.w	8001aa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2319      	movs	r3, #25
 80018ee:	2201      	movs	r2, #1
 80018f0:	4970      	ldr	r1, [pc, #448]	; (8001ab4 <HAL_I2C_Master_Transmit+0x1f4>)
 80018f2:	68f8      	ldr	r0, [r7, #12]
 80018f4:	f000 f964 	bl	8001bc0 <I2C_WaitOnFlagUntilTimeout>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018fe:	2302      	movs	r3, #2
 8001900:	e0d3      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001908:	2b01      	cmp	r3, #1
 800190a:	d101      	bne.n	8001910 <HAL_I2C_Master_Transmit+0x50>
 800190c:	2302      	movs	r3, #2
 800190e:	e0cc      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	2b01      	cmp	r3, #1
 8001924:	d007      	beq.n	8001936 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f042 0201 	orr.w	r2, r2, #1
 8001934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001944:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2221      	movs	r2, #33	; 0x21
 800194a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2210      	movs	r2, #16
 8001952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	2200      	movs	r2, #0
 800195a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	893a      	ldrh	r2, [r7, #8]
 8001966:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800196c:	b29a      	uxth	r2, r3
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001978:	8979      	ldrh	r1, [r7, #10]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	6a3a      	ldr	r2, [r7, #32]
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f000 f89c 	bl	8001abc <I2C_MasterRequestWrite>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e08d      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80019a4:	e066      	b.n	8001a74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019a6:	697a      	ldr	r2, [r7, #20]
 80019a8:	6a39      	ldr	r1, [r7, #32]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f000 fa22 	bl	8001df4 <I2C_WaitOnTXEFlagUntilTimeout>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00d      	beq.n	80019d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d107      	bne.n	80019ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e06b      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	781a      	ldrb	r2, [r3, #0]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	3b01      	subs	r3, #1
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fa:	3b01      	subs	r3, #1
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	695b      	ldr	r3, [r3, #20]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b04      	cmp	r3, #4
 8001a0e:	d11b      	bne.n	8001a48 <HAL_I2C_Master_Transmit+0x188>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d017      	beq.n	8001a48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1c:	781a      	ldrb	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	6a39      	ldr	r1, [r7, #32]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fa19 	bl	8001e84 <I2C_WaitOnBTFFlagUntilTimeout>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00d      	beq.n	8001a74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d107      	bne.n	8001a70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e01a      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d194      	bne.n	80019a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2220      	movs	r2, #32
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2200      	movs	r2, #0
 8001a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001aa8:	2302      	movs	r3, #2
  }
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	00100002 	.word	0x00100002
 8001ab8:	ffff0000 	.word	0xffff0000

08001abc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af02      	add	r7, sp, #8
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d006      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d003      	beq.n	8001ae6 <I2C_MasterRequestWrite+0x2a>
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ae4:	d108      	bne.n	8001af8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	e00b      	b.n	8001b10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b12      	cmp	r3, #18
 8001afe:	d107      	bne.n	8001b10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f84f 	bl	8001bc0 <I2C_WaitOnFlagUntilTimeout>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00d      	beq.n	8001b44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b36:	d103      	bne.n	8001b40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e035      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	691b      	ldr	r3, [r3, #16]
 8001b48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001b4c:	d108      	bne.n	8001b60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001b4e:	897b      	ldrh	r3, [r7, #10]
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	461a      	mov	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b5c:	611a      	str	r2, [r3, #16]
 8001b5e:	e01b      	b.n	8001b98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b60:	897b      	ldrh	r3, [r7, #10]
 8001b62:	11db      	asrs	r3, r3, #7
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	f003 0306 	and.w	r3, r3, #6
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	f063 030f 	orn	r3, r3, #15
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <I2C_MasterRequestWrite+0xfc>)
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 f898 	bl	8001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e010      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b8e:	897b      	ldrh	r3, [r7, #10]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	4907      	ldr	r1, [pc, #28]	; (8001bbc <I2C_MasterRequestWrite+0x100>)
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 f888 	bl	8001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	00010008 	.word	0x00010008
 8001bbc:	00010002 	.word	0x00010002

08001bc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	60f8      	str	r0, [r7, #12]
 8001bc8:	60b9      	str	r1, [r7, #8]
 8001bca:	603b      	str	r3, [r7, #0]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bd0:	e048      	b.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d044      	beq.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bda:	f7ff f967 	bl	8000eac <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d302      	bcc.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d139      	bne.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	0c1b      	lsrs	r3, r3, #16
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d10d      	bne.n	8001c16 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	43da      	mvns	r2, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	4013      	ands	r3, r2
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf0c      	ite	eq
 8001c0c:	2301      	moveq	r3, #1
 8001c0e:	2300      	movne	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	e00c      	b.n	8001c30 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	4013      	ands	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf0c      	ite	eq
 8001c28:	2301      	moveq	r3, #1
 8001c2a:	2300      	movne	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d116      	bne.n	8001c64 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f043 0220 	orr.w	r2, r3, #32
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e023      	b.n	8001cac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	0c1b      	lsrs	r3, r3, #16
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d10d      	bne.n	8001c8a <I2C_WaitOnFlagUntilTimeout+0xca>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	695b      	ldr	r3, [r3, #20]
 8001c74:	43da      	mvns	r2, r3
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	e00c      	b.n	8001ca4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	43da      	mvns	r2, r3
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d093      	beq.n	8001bd2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
 8001cc0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cc2:	e071      	b.n	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	d123      	bne.n	8001d1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ce2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	f043 0204 	orr.w	r2, r3, #4
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e067      	b.n	8001dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d22:	d041      	beq.n	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d24:	f7ff f8c2 	bl	8000eac <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d302      	bcc.n	8001d3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d136      	bne.n	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	0c1b      	lsrs	r3, r3, #16
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d10c      	bne.n	8001d5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	bf14      	ite	ne
 8001d56:	2301      	movne	r3, #1
 8001d58:	2300      	moveq	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	e00b      	b.n	8001d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	43da      	mvns	r2, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d016      	beq.n	8001da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2220      	movs	r2, #32
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d94:	f043 0220 	orr.w	r2, r3, #32
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e021      	b.n	8001dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0c1b      	lsrs	r3, r3, #16
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d10c      	bne.n	8001dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	e00b      	b.n	8001de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	bf14      	ite	ne
 8001dde:	2301      	movne	r3, #1
 8001de0:	2300      	moveq	r3, #0
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f47f af6d 	bne.w	8001cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e00:	e034      	b.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f000 f886 	bl	8001f14 <I2C_IsAcknowledgeFailed>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e034      	b.n	8001e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e18:	d028      	beq.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e1a:	f7ff f847 	bl	8000eac <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d302      	bcc.n	8001e30 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d11d      	bne.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b80      	cmp	r3, #128	; 0x80
 8001e3c:	d016      	beq.n	8001e6c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e007      	b.n	8001e7c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b80      	cmp	r3, #128	; 0x80
 8001e78:	d1c3      	bne.n	8001e02 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3710      	adds	r7, #16
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e90:	e034      	b.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f83e 	bl	8001f14 <I2C_IsAcknowledgeFailed>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e034      	b.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea8:	d028      	beq.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eaa:	f7fe ffff 	bl	8000eac <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11d      	bne.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d016      	beq.n	8001efc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	f043 0220 	orr.w	r2, r3, #32
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e007      	b.n	8001f0c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695b      	ldr	r3, [r3, #20]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	d1c3      	bne.n	8001e92 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2a:	d11b      	bne.n	8001f64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	f043 0204 	orr.w	r2, r3, #4
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001f76:	2201      	movs	r2, #1
 8001f78:	601a      	str	r2, [r3, #0]
}
 8001f7a:	bf00      	nop
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bc80      	pop	{r7}
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	420e0020 	.word	0x420e0020

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e26c      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 8087 	beq.w	80020b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fa8:	4b92      	ldr	r3, [pc, #584]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f003 030c 	and.w	r3, r3, #12
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d00c      	beq.n	8001fce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fb4:	4b8f      	ldr	r3, [pc, #572]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f003 030c 	and.w	r3, r3, #12
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d112      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5e>
 8001fc0:	4b8c      	ldr	r3, [pc, #560]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fce:	4b89      	ldr	r3, [pc, #548]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d06c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x12c>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d168      	bne.n	80020b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e246      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fee:	d106      	bne.n	8001ffe <HAL_RCC_OscConfig+0x76>
 8001ff0:	4b80      	ldr	r3, [pc, #512]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a7f      	ldr	r2, [pc, #508]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	e02e      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x98>
 8002006:	4b7b      	ldr	r3, [pc, #492]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a7a      	ldr	r2, [pc, #488]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b78      	ldr	r3, [pc, #480]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a77      	ldr	r2, [pc, #476]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e01d      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002028:	d10c      	bne.n	8002044 <HAL_RCC_OscConfig+0xbc>
 800202a:	4b72      	ldr	r3, [pc, #456]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a71      	ldr	r2, [pc, #452]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	6013      	str	r3, [r2, #0]
 8002036:	4b6f      	ldr	r3, [pc, #444]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a6e      	ldr	r2, [pc, #440]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6013      	str	r3, [r2, #0]
 8002042:	e00b      	b.n	800205c <HAL_RCC_OscConfig+0xd4>
 8002044:	4b6b      	ldr	r3, [pc, #428]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a6a      	ldr	r2, [pc, #424]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	4b68      	ldr	r3, [pc, #416]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a67      	ldr	r2, [pc, #412]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d013      	beq.n	800208c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe ff22 	bl	8000eac <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800206c:	f7fe ff1e 	bl	8000eac <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b64      	cmp	r3, #100	; 0x64
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e1fa      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b5d      	ldr	r3, [pc, #372]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d0f0      	beq.n	800206c <HAL_RCC_OscConfig+0xe4>
 800208a:	e014      	b.n	80020b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe ff0e 	bl	8000eac <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe ff0a 	bl	8000eac <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e1e6      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b53      	ldr	r3, [pc, #332]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x10c>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c2:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 030c 	and.w	r3, r3, #12
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d11c      	bne.n	8002114 <HAL_RCC_OscConfig+0x18c>
 80020da:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d116      	bne.n	8002114 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e6:	4b43      	ldr	r3, [pc, #268]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_RCC_OscConfig+0x176>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d001      	beq.n	80020fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e1ba      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fe:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4939      	ldr	r1, [pc, #228]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002112:	e03a      	b.n	800218a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691b      	ldr	r3, [r3, #16]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d020      	beq.n	800215e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211c:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 800211e:	2201      	movs	r2, #1
 8002120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002122:	f7fe fec3 	bl	8000eac <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800212a:	f7fe febf 	bl	8000eac <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b02      	cmp	r3, #2
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e19b      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800213c:	4b2d      	ldr	r3, [pc, #180]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002148:	4b2a      	ldr	r3, [pc, #168]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	695b      	ldr	r3, [r3, #20]
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4927      	ldr	r1, [pc, #156]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002158:	4313      	orrs	r3, r2
 800215a:	600b      	str	r3, [r1, #0]
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_OscConfig+0x270>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002164:	f7fe fea2 	bl	8000eac <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216c:	f7fe fe9e 	bl	8000eac <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e17a      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0308 	and.w	r3, r3, #8
 8002192:	2b00      	cmp	r3, #0
 8002194:	d03a      	beq.n	800220c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d019      	beq.n	80021d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <HAL_RCC_OscConfig+0x274>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a4:	f7fe fe82 	bl	8000eac <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ac:	f7fe fe7e 	bl	8000eac <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e15a      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f0      	beq.n	80021ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f000 facc 	bl	8002768 <RCC_Delay>
 80021d0:	e01c      	b.n	800220c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_RCC_OscConfig+0x274>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021d8:	f7fe fe68 	bl	8000eac <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021de:	e00f      	b.n	8002200 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e0:	f7fe fe64 	bl	8000eac <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d908      	bls.n	8002200 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e140      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	42420000 	.word	0x42420000
 80021fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002200:	4b9e      	ldr	r3, [pc, #632]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1e9      	bne.n	80021e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 80a6 	beq.w	8002366 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800221e:	4b97      	ldr	r3, [pc, #604]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10d      	bne.n	8002246 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222a:	4b94      	ldr	r3, [pc, #592]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a93      	ldr	r2, [pc, #588]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b91      	ldr	r3, [pc, #580]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002242:	2301      	movs	r3, #1
 8002244:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002246:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_RCC_OscConfig+0x4f8>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224e:	2b00      	cmp	r3, #0
 8002250:	d118      	bne.n	8002284 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002252:	4b8b      	ldr	r3, [pc, #556]	; (8002480 <HAL_RCC_OscConfig+0x4f8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a8a      	ldr	r2, [pc, #552]	; (8002480 <HAL_RCC_OscConfig+0x4f8>)
 8002258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800225e:	f7fe fe25 	bl	8000eac <HAL_GetTick>
 8002262:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002264:	e008      	b.n	8002278 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002266:	f7fe fe21 	bl	8000eac <HAL_GetTick>
 800226a:	4602      	mov	r2, r0
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	2b64      	cmp	r3, #100	; 0x64
 8002272:	d901      	bls.n	8002278 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0fd      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002278:	4b81      	ldr	r3, [pc, #516]	; (8002480 <HAL_RCC_OscConfig+0x4f8>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0f0      	beq.n	8002266 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d106      	bne.n	800229a <HAL_RCC_OscConfig+0x312>
 800228c:	4b7b      	ldr	r3, [pc, #492]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	4a7a      	ldr	r2, [pc, #488]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6213      	str	r3, [r2, #32]
 8002298:	e02d      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10c      	bne.n	80022bc <HAL_RCC_OscConfig+0x334>
 80022a2:	4b76      	ldr	r3, [pc, #472]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	4a75      	ldr	r2, [pc, #468]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022a8:	f023 0301 	bic.w	r3, r3, #1
 80022ac:	6213      	str	r3, [r2, #32]
 80022ae:	4b73      	ldr	r3, [pc, #460]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	4a72      	ldr	r2, [pc, #456]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022b4:	f023 0304 	bic.w	r3, r3, #4
 80022b8:	6213      	str	r3, [r2, #32]
 80022ba:	e01c      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	2b05      	cmp	r3, #5
 80022c2:	d10c      	bne.n	80022de <HAL_RCC_OscConfig+0x356>
 80022c4:	4b6d      	ldr	r3, [pc, #436]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	4a6c      	ldr	r2, [pc, #432]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022ca:	f043 0304 	orr.w	r3, r3, #4
 80022ce:	6213      	str	r3, [r2, #32]
 80022d0:	4b6a      	ldr	r3, [pc, #424]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a69      	ldr	r2, [pc, #420]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e00b      	b.n	80022f6 <HAL_RCC_OscConfig+0x36e>
 80022de:	4b67      	ldr	r3, [pc, #412]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	4a66      	ldr	r2, [pc, #408]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6213      	str	r3, [r2, #32]
 80022ea:	4b64      	ldr	r3, [pc, #400]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	4a63      	ldr	r2, [pc, #396]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d015      	beq.n	800232a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022fe:	f7fe fdd5 	bl	8000eac <HAL_GetTick>
 8002302:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002304:	e00a      	b.n	800231c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002306:	f7fe fdd1 	bl	8000eac <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e0ab      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800231c:	4b57      	ldr	r3, [pc, #348]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0ee      	beq.n	8002306 <HAL_RCC_OscConfig+0x37e>
 8002328:	e014      	b.n	8002354 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800232a:	f7fe fdbf 	bl	8000eac <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002330:	e00a      	b.n	8002348 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002332:	f7fe fdbb 	bl	8000eac <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002340:	4293      	cmp	r3, r2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e095      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002348:	4b4c      	ldr	r3, [pc, #304]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ee      	bne.n	8002332 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d105      	bne.n	8002366 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	4b48      	ldr	r3, [pc, #288]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	4a47      	ldr	r2, [pc, #284]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002360:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002364:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8081 	beq.w	8002472 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	4b42      	ldr	r3, [pc, #264]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 030c 	and.w	r3, r3, #12
 8002378:	2b08      	cmp	r3, #8
 800237a:	d061      	beq.n	8002440 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b02      	cmp	r3, #2
 8002382:	d146      	bne.n	8002412 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b3f      	ldr	r3, [pc, #252]	; (8002484 <HAL_RCC_OscConfig+0x4fc>)
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238a:	f7fe fd8f 	bl	8000eac <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7fe fd8b 	bl	8000eac <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e067      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a4:	4b35      	ldr	r3, [pc, #212]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1f0      	bne.n	8002392 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d108      	bne.n	80023cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023ba:	4b30      	ldr	r3, [pc, #192]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	492d      	ldr	r1, [pc, #180]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023cc:	4b2b      	ldr	r3, [pc, #172]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a19      	ldr	r1, [r3, #32]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023dc:	430b      	orrs	r3, r1
 80023de:	4927      	ldr	r1, [pc, #156]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e4:	4b27      	ldr	r3, [pc, #156]	; (8002484 <HAL_RCC_OscConfig+0x4fc>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7fe fd5f 	bl	8000eac <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023f2:	f7fe fd5b 	bl	8000eac <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e037      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002404:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x46a>
 8002410:	e02f      	b.n	8002472 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_RCC_OscConfig+0x4fc>)
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002418:	f7fe fd48 	bl	8000eac <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002420:	f7fe fd44 	bl	8000eac <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e020      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x498>
 800243e:	e018      	b.n	8002472 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69db      	ldr	r3, [r3, #28]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e013      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800244c:	4b0b      	ldr	r3, [pc, #44]	; (800247c <HAL_RCC_OscConfig+0x4f4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	429a      	cmp	r2, r3
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d001      	beq.n	8002472 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	40007000 	.word	0x40007000
 8002484:	42420060 	.word	0x42420060

08002488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b084      	sub	sp, #16
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e0d0      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d910      	bls.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	4b67      	ldr	r3, [pc, #412]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	4965      	ldr	r1, [pc, #404]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ba:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d001      	beq.n	80024cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e0b8      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d020      	beq.n	800251a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024e4:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	4a58      	ldr	r2, [pc, #352]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024fc:	4b53      	ldr	r3, [pc, #332]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	4a52      	ldr	r2, [pc, #328]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002502:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002506:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002508:	4b50      	ldr	r3, [pc, #320]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	494d      	ldr	r1, [pc, #308]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0301 	and.w	r3, r3, #1
 8002522:	2b00      	cmp	r3, #0
 8002524:	d040      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d107      	bne.n	800253e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800252e:	4b47      	ldr	r3, [pc, #284]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d115      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e07f      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002546:	4b41      	ldr	r3, [pc, #260]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e073      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002556:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0302 	and.w	r3, r3, #2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e06b      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f023 0203 	bic.w	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	4936      	ldr	r1, [pc, #216]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002578:	f7fe fc98 	bl	8000eac <HAL_GetTick>
 800257c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257e:	e00a      	b.n	8002596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002580:	f7fe fc94 	bl	8000eac <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	; 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e053      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002596:	4b2d      	ldr	r3, [pc, #180]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f003 020c 	and.w	r2, r3, #12
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d1eb      	bne.n	8002580 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025a8:	4b27      	ldr	r3, [pc, #156]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	683a      	ldr	r2, [r7, #0]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d210      	bcs.n	80025d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 0207 	bic.w	r2, r3, #7
 80025be:	4922      	ldr	r1, [pc, #136]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025c6:	4b20      	ldr	r3, [pc, #128]	; (8002648 <HAL_RCC_ClockConfig+0x1c0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e032      	b.n	800263e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d008      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025e4:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	4916      	ldr	r1, [pc, #88]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002602:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	490e      	ldr	r1, [pc, #56]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	4313      	orrs	r3, r2
 8002614:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002616:	f000 f821 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800261a:	4602      	mov	r2, r0
 800261c:	4b0b      	ldr	r3, [pc, #44]	; (800264c <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	490a      	ldr	r1, [pc, #40]	; (8002650 <HAL_RCC_ClockConfig+0x1c8>)
 8002628:	5ccb      	ldrb	r3, [r1, r3]
 800262a:	fa22 f303 	lsr.w	r3, r2, r3
 800262e:	4a09      	ldr	r2, [pc, #36]	; (8002654 <HAL_RCC_ClockConfig+0x1cc>)
 8002630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x1d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe fbf6 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000
 800264c:	40021000 	.word	0x40021000
 8002650:	08005284 	.word	0x08005284
 8002654:	20000004 	.word	0x20000004
 8002658:	20000008 	.word	0x20000008

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b480      	push	{r7}
 800265e:	b087      	sub	sp, #28
 8002660:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
 800266a:	2300      	movs	r3, #0
 800266c:	617b      	str	r3, [r7, #20]
 800266e:	2300      	movs	r3, #0
 8002670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f003 030c 	and.w	r3, r3, #12
 8002682:	2b04      	cmp	r3, #4
 8002684:	d002      	beq.n	800268c <HAL_RCC_GetSysClockFreq+0x30>
 8002686:	2b08      	cmp	r3, #8
 8002688:	d003      	beq.n	8002692 <HAL_RCC_GetSysClockFreq+0x36>
 800268a:	e027      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800268e:	613b      	str	r3, [r7, #16]
      break;
 8002690:	e027      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	0c9b      	lsrs	r3, r3, #18
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	4a17      	ldr	r2, [pc, #92]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800269c:	5cd3      	ldrb	r3, [r2, r3]
 800269e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d010      	beq.n	80026cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026aa:	4b11      	ldr	r3, [pc, #68]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	0c5b      	lsrs	r3, r3, #17
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	4a11      	ldr	r2, [pc, #68]	; (80026fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026be:	fb02 f203 	mul.w	r2, r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	e004      	b.n	80026d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026d0:	fb02 f303 	mul.w	r3, r2, r3
 80026d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	613b      	str	r3, [r7, #16]
      break;
 80026da:	e002      	b.n	80026e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80026de:	613b      	str	r3, [r7, #16]
      break;
 80026e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026e2:	693b      	ldr	r3, [r7, #16]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	371c      	adds	r7, #28
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	007a1200 	.word	0x007a1200
 80026f8:	0800529c 	.word	0x0800529c
 80026fc:	080052ac 	.word	0x080052ac
 8002700:	003d0900 	.word	0x003d0900

08002704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <HAL_RCC_GetHCLKFreq+0x10>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800271c:	f7ff fff2 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4903      	ldr	r1, [pc, #12]	; (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002734:	4618      	mov	r0, r3
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08005294 	.word	0x08005294

08002740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002744:	f7ff ffde 	bl	8002704 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	0adb      	lsrs	r3, r3, #11
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000
 8002764:	08005294 	.word	0x08005294

08002768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002770:	4b0a      	ldr	r3, [pc, #40]	; (800279c <RCC_Delay+0x34>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a0a      	ldr	r2, [pc, #40]	; (80027a0 <RCC_Delay+0x38>)
 8002776:	fba2 2303 	umull	r2, r3, r2, r3
 800277a:	0a5b      	lsrs	r3, r3, #9
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002784:	bf00      	nop
  }
  while (Delay --);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	1e5a      	subs	r2, r3, #1
 800278a:	60fa      	str	r2, [r7, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1f9      	bne.n	8002784 <RCC_Delay+0x1c>
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	20000004 	.word	0x20000004
 80027a0:	10624dd3 	.word	0x10624dd3

080027a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80027ac:	2300      	movs	r3, #0
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	2300      	movs	r3, #0
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d07d      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80027c0:	2300      	movs	r3, #0
 80027c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027c4:	4b4f      	ldr	r3, [pc, #316]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	69db      	ldr	r3, [r3, #28]
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10d      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027d0:	4b4c      	ldr	r3, [pc, #304]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	4a4b      	ldr	r2, [pc, #300]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027da:	61d3      	str	r3, [r2, #28]
 80027dc:	4b49      	ldr	r3, [pc, #292]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027de:	69db      	ldr	r3, [r3, #28]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e8:	2301      	movs	r3, #1
 80027ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ec:	4b46      	ldr	r3, [pc, #280]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d118      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f8:	4b43      	ldr	r3, [pc, #268]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002804:	f7fe fb52 	bl	8000eac <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280a:	e008      	b.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280c:	f7fe fb4e 	bl	8000eac <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b64      	cmp	r3, #100	; 0x64
 8002818:	d901      	bls.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e06d      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281e:	4b3a      	ldr	r3, [pc, #232]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002826:	2b00      	cmp	r3, #0
 8002828:	d0f0      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002832:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d02e      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d027      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002848:	4b2e      	ldr	r3, [pc, #184]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002852:	4b2e      	ldr	r3, [pc, #184]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002858:	4b2c      	ldr	r3, [pc, #176]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800285e:	4a29      	ldr	r2, [pc, #164]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d014      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7fe fb1d 	bl	8000eac <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00a      	b.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fb19 	bl	8000eac <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	f241 3288 	movw	r2, #5000	; 0x1388
 8002884:	4293      	cmp	r3, r2
 8002886:	d901      	bls.n	800288c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e036      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288c:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0ee      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002898:	4b1a      	ldr	r3, [pc, #104]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	4917      	ldr	r1, [pc, #92]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028aa:	7dfb      	ldrb	r3, [r7, #23]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b0:	4b14      	ldr	r3, [pc, #80]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	4a13      	ldr	r2, [pc, #76]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80028c8:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	490b      	ldr	r1, [pc, #44]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028d6:	4313      	orrs	r3, r2
 80028d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0310 	and.w	r3, r3, #16
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d008      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4904      	ldr	r1, [pc, #16]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3718      	adds	r7, #24
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420440 	.word	0x42420440

08002910 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b088      	sub	sp, #32
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	2300      	movs	r3, #0
 800291e:	61fb      	str	r3, [r7, #28]
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	2300      	movs	r3, #0
 800292a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b10      	cmp	r3, #16
 8002936:	f200 808a 	bhi.w	8002a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2b01      	cmp	r3, #1
 800293e:	d045      	beq.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d075      	beq.n	8002a32 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002946:	e082      	b.n	8002a4e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002948:	4b46      	ldr	r3, [pc, #280]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800294e:	4b45      	ldr	r3, [pc, #276]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d07b      	beq.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	0c9b      	lsrs	r3, r3, #18
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	4a41      	ldr	r2, [pc, #260]	; (8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002964:	5cd3      	ldrb	r3, [r2, r3]
 8002966:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d015      	beq.n	800299e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	0c5b      	lsrs	r3, r3, #17
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	4a3b      	ldr	r2, [pc, #236]	; (8002a6c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800297e:	5cd3      	ldrb	r3, [r2, r3]
 8002980:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00d      	beq.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800298c:	4a38      	ldr	r2, [pc, #224]	; (8002a70 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	fbb2 f2f3 	udiv	r2, r2, r3
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	fb02 f303 	mul.w	r3, r2, r3
 800299a:	61fb      	str	r3, [r7, #28]
 800299c:	e004      	b.n	80029a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4a34      	ldr	r2, [pc, #208]	; (8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80029a2:	fb02 f303 	mul.w	r3, r2, r3
 80029a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80029a8:	4b2e      	ldr	r3, [pc, #184]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029b4:	d102      	bne.n	80029bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	61bb      	str	r3, [r7, #24]
      break;
 80029ba:	e04a      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4a2d      	ldr	r2, [pc, #180]	; (8002a78 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	61bb      	str	r3, [r7, #24]
      break;
 80029ca:	e042      	b.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80029cc:	4b25      	ldr	r3, [pc, #148]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029dc:	d108      	bne.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d003      	beq.n	80029f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80029e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ec:	61bb      	str	r3, [r7, #24]
 80029ee:	e01f      	b.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029fa:	d109      	bne.n	8002a10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d003      	beq.n	8002a10 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002a08:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e00f      	b.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a1a:	d11c      	bne.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d016      	beq.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002a28:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002a2c:	61bb      	str	r3, [r7, #24]
      break;
 8002a2e:	e012      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002a30:	e011      	b.n	8002a56 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a32:	f7ff fe85 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 8002a36:	4602      	mov	r2, r0
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	0b9b      	lsrs	r3, r3, #14
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	3301      	adds	r3, #1
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4a:	61bb      	str	r3, [r7, #24]
      break;
 8002a4c:	e004      	b.n	8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a4e:	bf00      	nop
 8002a50:	e002      	b.n	8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a52:	bf00      	nop
 8002a54:	e000      	b.n	8002a58 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002a56:	bf00      	nop
    }
  }
  return (frequency);
 8002a58:	69bb      	ldr	r3, [r7, #24]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3720      	adds	r7, #32
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	080052b0 	.word	0x080052b0
 8002a6c:	080052c0 	.word	0x080052c0
 8002a70:	007a1200 	.word	0x007a1200
 8002a74:	003d0900 	.word	0x003d0900
 8002a78:	aaaaaaab 	.word	0xaaaaaaab

08002a7c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e07a      	b.n	8002b88 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	7c5b      	ldrb	r3, [r3, #17]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fd ffc2 	bl	8000a2c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 faea 	bl	8003088 <HAL_RTC_WaitForSynchro>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d004      	beq.n	8002ac4 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e061      	b.n	8002b88 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 fba3 	bl	8003210 <RTC_EnterInitMode>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d004      	beq.n	8002ada <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2204      	movs	r2, #4
 8002ad4:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e056      	b.n	8002b88 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	685a      	ldr	r2, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f022 0207 	bic.w	r2, r2, #7
 8002ae8:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002af2:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RTC_Init+0x114>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_RTC_Init+0x114>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002afe:	4b24      	ldr	r3, [pc, #144]	; (8002b90 <HAL_RTC_Init+0x114>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	4921      	ldr	r1, [pc, #132]	; (8002b90 <HAL_RTC_Init+0x114>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b18:	d003      	beq.n	8002b22 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e00e      	b.n	8002b40 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002b22:	2001      	movs	r0, #1
 8002b24:	f7ff fef4 	bl	8002910 <HAL_RCCEx_GetPeriphCLKFreq>
 8002b28:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d104      	bne.n	8002b3a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2204      	movs	r2, #4
 8002b34:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e026      	b.n	8002b88 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	0c1a      	lsrs	r2, r3, #16
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 020f 	and.w	r2, r2, #15
 8002b4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	b292      	uxth	r2, r2
 8002b56:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f000 fb81 	bl	8003260 <RTC_ExitInitMode>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d004      	beq.n	8002b6e <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2204      	movs	r2, #4
 8002b68:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e00c      	b.n	8002b88 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
  }
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3710      	adds	r7, #16
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40006c00 	.word	0x40006c00

08002b94 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	60b9      	str	r1, [r7, #8]
 8002b9e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	617b      	str	r3, [r7, #20]
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_RTC_SetTime+0x20>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e080      	b.n	8002cba <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	7c1b      	ldrb	r3, [r3, #16]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_RTC_SetTime+0x30>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e07a      	b.n	8002cba <HAL_RTC_SetTime+0x126>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2202      	movs	r2, #2
 8002bce:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d113      	bne.n	8002bfe <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	781b      	ldrb	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002be0:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	785b      	ldrb	r3, [r3, #1]
 8002be8:	4619      	mov	r1, r3
 8002bea:	460b      	mov	r3, r1
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a5b      	subs	r3, r3, r1
 8002bf0:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002bf2:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002bf8:	4413      	add	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e01e      	b.n	8002c3c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f000 fb71 	bl	80032ea <RTC_Bcd2ToByte>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002c10:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	785b      	ldrb	r3, [r3, #1]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f000 fb66 	bl	80032ea <RTC_Bcd2ToByte>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	461a      	mov	r2, r3
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c2a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	789b      	ldrb	r3, [r3, #2]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fb5a 	bl	80032ea <RTC_Bcd2ToByte>
 8002c36:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002c38:	4423      	add	r3, r4
 8002c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002c3c:	6979      	ldr	r1, [r7, #20]
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fa7f 	bl	8003142 <RTC_WriteTimeCounter>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d007      	beq.n	8002c5a <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e02f      	b.n	8002cba <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0205 	bic.w	r2, r2, #5
 8002c68:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fa90 	bl	8003190 <RTC_ReadAlarmCounter>
 8002c70:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c78:	d018      	beq.n	8002cac <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d214      	bcs.n	8002cac <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002c88:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c8c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c8e:	6939      	ldr	r1, [r7, #16]
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fa96 	bl	80031c2 <RTC_WriteAlarmCounter>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d007      	beq.n	8002cac <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e006      	b.n	8002cba <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd90      	pop	{r4, r7, pc}
	...

08002cc4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61fb      	str	r3, [r7, #28]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	617b      	str	r3, [r7, #20]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d002      	beq.n	8002cec <HAL_RTC_GetTime+0x28>
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0b5      	b.n	8002e5c <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0304 	and.w	r3, r3, #4
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0ac      	b.n	8002e5c <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	f000 f9ed 	bl	80030e2 <RTC_ReadTimeCounter>
 8002d08:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	4a55      	ldr	r2, [pc, #340]	; (8002e64 <HAL_RTC_GetTime+0x1a0>)
 8002d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d12:	0adb      	lsrs	r3, r3, #11
 8002d14:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	4b52      	ldr	r3, [pc, #328]	; (8002e64 <HAL_RTC_GetTime+0x1a0>)
 8002d1a:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1e:	0adb      	lsrs	r3, r3, #11
 8002d20:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002d24:	fb01 f303 	mul.w	r3, r1, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	4a4f      	ldr	r2, [pc, #316]	; (8002e68 <HAL_RTC_GetTime+0x1a4>)
 8002d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d30:	095b      	lsrs	r3, r3, #5
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	4a4a      	ldr	r2, [pc, #296]	; (8002e64 <HAL_RTC_GetTime+0x1a0>)
 8002d3c:	fba2 1203 	umull	r1, r2, r2, r3
 8002d40:	0ad2      	lsrs	r2, r2, #11
 8002d42:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002d46:	fb01 f202 	mul.w	r2, r1, r2
 8002d4a:	1a9a      	subs	r2, r3, r2
 8002d4c:	4b46      	ldr	r3, [pc, #280]	; (8002e68 <HAL_RTC_GetTime+0x1a4>)
 8002d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8002d52:	0959      	lsrs	r1, r3, #5
 8002d54:	460b      	mov	r3, r1
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a5b      	subs	r3, r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	1ad1      	subs	r1, r2, r3
 8002d5e:	b2ca      	uxtb	r2, r1
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	2b17      	cmp	r3, #23
 8002d68:	d955      	bls.n	8002e16 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <HAL_RTC_GetTime+0x1a8>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002d76:	6939      	ldr	r1, [r7, #16]
 8002d78:	4b3c      	ldr	r3, [pc, #240]	; (8002e6c <HAL_RTC_GetTime+0x1a8>)
 8002d7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002d7e:	091a      	lsrs	r2, r3, #4
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	00db      	lsls	r3, r3, #3
 8002d88:	1aca      	subs	r2, r1, r3
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f9fd 	bl	8003190 <RTC_ReadAlarmCounter>
 8002d96:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d008      	beq.n	8002db2 <HAL_RTC_GetTime+0xee>
 8002da0:	69fa      	ldr	r2, [r7, #28]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d904      	bls.n	8002db2 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002da8:	69fa      	ldr	r2, [r7, #28]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	e002      	b.n	8002db8 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002db2:	f04f 33ff 	mov.w	r3, #4294967295
 8002db6:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4a2d      	ldr	r2, [pc, #180]	; (8002e70 <HAL_RTC_GetTime+0x1ac>)
 8002dbc:	fb02 f303 	mul.w	r3, r2, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 f9ba 	bl	8003142 <RTC_WriteTimeCounter>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e041      	b.n	8002e5c <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dde:	d00c      	beq.n	8002dfa <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002de0:	69fa      	ldr	r2, [r7, #28]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	4413      	add	r3, r2
 8002de6:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002de8:	69f9      	ldr	r1, [r7, #28]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f000 f9e9 	bl	80031c2 <RTC_WriteAlarmCounter>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00a      	beq.n	8002e0c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e030      	b.n	8002e5c <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002dfa:	69f9      	ldr	r1, [r7, #28]
 8002dfc:	68f8      	ldr	r0, [r7, #12]
 8002dfe:	f000 f9e0 	bl	80031c2 <RTC_WriteAlarmCounter>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e027      	b.n	8002e5c <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 fa88 	bl	8003324 <RTC_DateUpdate>
 8002e14:	e003      	b.n	8002e1e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01a      	beq.n	8002e5a <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f000 fa41 	bl	80032b0 <RTC_ByteToBcd2>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	461a      	mov	r2, r3
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	785b      	ldrb	r3, [r3, #1]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fa38 	bl	80032b0 <RTC_ByteToBcd2>
 8002e40:	4603      	mov	r3, r0
 8002e42:	461a      	mov	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	789b      	ldrb	r3, [r3, #2]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f000 fa2f 	bl	80032b0 <RTC_ByteToBcd2>
 8002e52:	4603      	mov	r3, r0
 8002e54:	461a      	mov	r2, r3
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3720      	adds	r7, #32
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	91a2b3c5 	.word	0x91a2b3c5
 8002e68:	88888889 	.word	0x88888889
 8002e6c:	aaaaaaab 	.word	0xaaaaaaab
 8002e70:	00015180 	.word	0x00015180

08002e74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RTC_SetDate+0x24>
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d101      	bne.n	8002e9c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e097      	b.n	8002fcc <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	7c1b      	ldrb	r3, [r3, #16]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RTC_SetDate+0x34>
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	e091      	b.n	8002fcc <HAL_RTC_SetDate+0x158>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2202      	movs	r2, #2
 8002eb2:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	78da      	ldrb	r2, [r3, #3]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	785a      	ldrb	r2, [r3, #1]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	789a      	ldrb	r2, [r3, #2]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	739a      	strb	r2, [r3, #14]
 8002ed2:	e01a      	b.n	8002f0a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	78db      	ldrb	r3, [r3, #3]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fa06 	bl	80032ea <RTC_Bcd2ToByte>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	785b      	ldrb	r3, [r3, #1]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 f9fd 	bl	80032ea <RTC_Bcd2ToByte>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	789b      	ldrb	r3, [r3, #2]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f000 f9f4 	bl	80032ea <RTC_Bcd2ToByte>
 8002f02:	4603      	mov	r3, r0
 8002f04:	461a      	mov	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	7bdb      	ldrb	r3, [r3, #15]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7b59      	ldrb	r1, [r3, #13]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	7b9b      	ldrb	r3, [r3, #14]
 8002f18:	461a      	mov	r2, r3
 8002f1a:	f000 fadf 	bl	80034dc <RTC_WeekDayNum>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	461a      	mov	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	7b1a      	ldrb	r2, [r3, #12]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f8d7 	bl	80030e2 <RTC_ReadTimeCounter>
 8002f34:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_RTC_SetDate+0x160>)
 8002f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3e:	0adb      	lsrs	r3, r3, #11
 8002f40:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b18      	cmp	r3, #24
 8002f46:	d93a      	bls.n	8002fbe <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	4a23      	ldr	r2, [pc, #140]	; (8002fd8 <HAL_RTC_SetDate+0x164>)
 8002f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f50:	091b      	lsrs	r3, r3, #4
 8002f52:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <HAL_RTC_SetDate+0x168>)
 8002f54:	fb02 f303 	mul.w	r3, r2, r3
 8002f58:	69fa      	ldr	r2, [r7, #28]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002f5e:	69f9      	ldr	r1, [r7, #28]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f8ee 	bl	8003142 <RTC_WriteTimeCounter>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d007      	beq.n	8002f7c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2204      	movs	r2, #4
 8002f70:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e027      	b.n	8002fcc <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f907 	bl	8003190 <RTC_ReadAlarmCounter>
 8002f82:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8a:	d018      	beq.n	8002fbe <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d214      	bcs.n	8002fbe <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002f9a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002f9e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002fa0:	69b9      	ldr	r1, [r7, #24]
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f90d 	bl	80031c2 <RTC_WriteAlarmCounter>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d007      	beq.n	8002fbe <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e006      	b.n	8002fcc <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3720      	adds	r7, #32
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	91a2b3c5 	.word	0x91a2b3c5
 8002fd8:	aaaaaaab 	.word	0xaaaaaaab
 8002fdc:	00015180 	.word	0x00015180

08002fe0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	801a      	strh	r2, [r3, #0]
 8002ff6:	460a      	mov	r2, r1
 8002ff8:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_RTC_GetDate+0x26>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e03a      	b.n	8003080 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	2200      	movs	r2, #0
 8003010:	4619      	mov	r1, r3
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff fe56 	bl	8002cc4 <HAL_RTC_GetTime>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e02e      	b.n	8003080 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	7b1a      	ldrb	r2, [r3, #12]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	7bda      	ldrb	r2, [r3, #15]
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	7b5a      	ldrb	r2, [r3, #13]
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	7b9a      	ldrb	r2, [r3, #14]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01a      	beq.n	800307e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	78db      	ldrb	r3, [r3, #3]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 f92f 	bl	80032b0 <RTC_ByteToBcd2>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	785b      	ldrb	r3, [r3, #1]
 800305e:	4618      	mov	r0, r3
 8003060:	f000 f926 	bl	80032b0 <RTC_ByteToBcd2>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	789b      	ldrb	r3, [r3, #2]
 8003070:	4618      	mov	r0, r3
 8003072:	f000 f91d 	bl	80032b0 <RTC_ByteToBcd2>
 8003076:	4603      	mov	r3, r0
 8003078:	461a      	mov	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e01d      	b.n	80030da <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0208 	bic.w	r2, r2, #8
 80030ac:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80030ae:	f7fd fefd 	bl	8000eac <HAL_GetTick>
 80030b2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80030b4:	e009      	b.n	80030ca <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80030b6:	f7fd fef9 	bl	8000eac <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030c4:	d901      	bls.n	80030ca <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e007      	b.n	80030da <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0308 	and.w	r3, r3, #8
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ee      	beq.n	80030b6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b087      	sub	sp, #28
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	827b      	strh	r3, [r7, #18]
 80030ee:	2300      	movs	r3, #0
 80030f0:	823b      	strh	r3, [r7, #16]
 80030f2:	2300      	movs	r3, #0
 80030f4:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8003112:	8a7a      	ldrh	r2, [r7, #18]
 8003114:	8a3b      	ldrh	r3, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d008      	beq.n	800312c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800311a:	8a3b      	ldrh	r3, [r7, #16]
 800311c:	041a      	lsls	r2, r3, #16
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	b29b      	uxth	r3, r3
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
 800312a:	e004      	b.n	8003136 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800312c:	8a7b      	ldrh	r3, [r7, #18]
 800312e:	041a      	lsls	r2, r3, #16
 8003130:	89fb      	ldrh	r3, [r7, #14]
 8003132:	4313      	orrs	r3, r2
 8003134:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003136:	697b      	ldr	r3, [r7, #20]
}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr

08003142 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800314c:	2300      	movs	r3, #0
 800314e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f000 f85d 	bl	8003210 <RTC_EnterInitMode>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
 8003160:	e011      	b.n	8003186 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	0c12      	lsrs	r2, r2, #16
 800316a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b292      	uxth	r2, r2
 8003174:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f872 	bl	8003260 <RTC_ExitInitMode>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	81fb      	strh	r3, [r7, #14]
 800319c:	2300      	movs	r3, #0
 800319e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80031b0:	89fb      	ldrh	r3, [r7, #14]
 80031b2:	041a      	lsls	r2, r3, #16
 80031b4:	89bb      	ldrh	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	bc80      	pop	{r7}
 80031c0:	4770      	bx	lr

080031c2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031cc:	2300      	movs	r3, #0
 80031ce:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f81d 	bl	8003210 <RTC_EnterInitMode>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
 80031e0:	e011      	b.n	8003206 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	0c12      	lsrs	r2, r2, #16
 80031ea:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	683a      	ldr	r2, [r7, #0]
 80031f2:	b292      	uxth	r2, r2
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f832 	bl	8003260 <RTC_ExitInitMode>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003206:	7bfb      	ldrb	r3, [r7, #15]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800321c:	f7fd fe46 	bl	8000eac <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003222:	e009      	b.n	8003238 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003224:	f7fd fe42 	bl	8000eac <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003232:	d901      	bls.n	8003238 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e00f      	b.n	8003258 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d0ee      	beq.n	8003224 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0210 	orr.w	r2, r2, #16
 8003254:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003256:	2300      	movs	r3, #0
}
 8003258:	4618      	mov	r0, r3
 800325a:	3710      	adds	r7, #16
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f022 0210 	bic.w	r2, r2, #16
 800327a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800327c:	f7fd fe16 	bl	8000eac <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003282:	e009      	b.n	8003298 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003284:	f7fd fe12 	bl	8000eac <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003292:	d901      	bls.n	8003298 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e007      	b.n	80032a8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0ee      	beq.n	8003284 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80032a6:	2300      	movs	r3, #0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	3710      	adds	r7, #16
 80032ac:	46bd      	mov	sp, r7
 80032ae:	bd80      	pop	{r7, pc}

080032b0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	4603      	mov	r3, r0
 80032b8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80032be:	e005      	b.n	80032cc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	3301      	adds	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	3b0a      	subs	r3, #10
 80032ca:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80032cc:	79fb      	ldrb	r3, [r7, #7]
 80032ce:	2b09      	cmp	r3, #9
 80032d0:	d8f6      	bhi.n	80032c0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	4313      	orrs	r3, r2
 80032de:	b2db      	uxtb	r3, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bc80      	pop	{r7}
 80032e8:	4770      	bx	lr

080032ea <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80032f8:	79fb      	ldrb	r3, [r7, #7]
 80032fa:	091b      	lsrs	r3, r3, #4
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800330a:	79fb      	ldrb	r3, [r7, #7]
 800330c:	f003 030f 	and.w	r3, r3, #15
 8003310:	b2da      	uxtb	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	4413      	add	r3, r2
 8003318:	b2db      	uxtb	r3, r3
}
 800331a:	4618      	mov	r0, r3
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	bc80      	pop	{r7}
 8003322:	4770      	bx	lr

08003324 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	2300      	movs	r3, #0
 8003338:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	7bdb      	ldrb	r3, [r3, #15]
 8003342:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7b5b      	ldrb	r3, [r3, #13]
 8003348:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7b9b      	ldrb	r3, [r3, #14]
 800334e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
 8003354:	e06f      	b.n	8003436 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d011      	beq.n	8003380 <RTC_DateUpdate+0x5c>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b03      	cmp	r3, #3
 8003360:	d00e      	beq.n	8003380 <RTC_DateUpdate+0x5c>
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	2b05      	cmp	r3, #5
 8003366:	d00b      	beq.n	8003380 <RTC_DateUpdate+0x5c>
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b07      	cmp	r3, #7
 800336c:	d008      	beq.n	8003380 <RTC_DateUpdate+0x5c>
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b08      	cmp	r3, #8
 8003372:	d005      	beq.n	8003380 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0a      	cmp	r3, #10
 8003378:	d002      	beq.n	8003380 <RTC_DateUpdate+0x5c>
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d117      	bne.n	80033b0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b1e      	cmp	r3, #30
 8003384:	d803      	bhi.n	800338e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3301      	adds	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800338c:	e050      	b.n	8003430 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b0c      	cmp	r3, #12
 8003392:	d005      	beq.n	80033a0 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3301      	adds	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
          day = 1U;
 800339a:	2301      	movs	r3, #1
 800339c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800339e:	e047      	b.n	8003430 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80033a0:	2301      	movs	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80033a4:	2301      	movs	r3, #1
 80033a6:	60fb      	str	r3, [r7, #12]
          year++;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3301      	adds	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80033ae:	e03f      	b.n	8003430 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d008      	beq.n	80033c8 <RTC_DateUpdate+0xa4>
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	2b06      	cmp	r3, #6
 80033ba:	d005      	beq.n	80033c8 <RTC_DateUpdate+0xa4>
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d002      	beq.n	80033c8 <RTC_DateUpdate+0xa4>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b0b      	cmp	r3, #11
 80033c6:	d10c      	bne.n	80033e2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2b1d      	cmp	r3, #29
 80033cc:	d803      	bhi.n	80033d6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	3301      	adds	r3, #1
 80033d2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80033d4:	e02c      	b.n	8003430 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	3301      	adds	r3, #1
 80033da:	613b      	str	r3, [r7, #16]
        day = 1U;
 80033dc:	2301      	movs	r3, #1
 80033de:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80033e0:	e026      	b.n	8003430 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d123      	bne.n	8003430 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b1b      	cmp	r3, #27
 80033ec:	d803      	bhi.n	80033f6 <RTC_DateUpdate+0xd2>
      {
        day++;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	3301      	adds	r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	e01c      	b.n	8003430 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2b1c      	cmp	r3, #28
 80033fa:	d111      	bne.n	8003420 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	4618      	mov	r0, r3
 8003402:	f000 f839 	bl	8003478 <RTC_IsLeapYear>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <RTC_DateUpdate+0xf0>
        {
          day++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3301      	adds	r3, #1
 8003410:	60fb      	str	r3, [r7, #12]
 8003412:	e00d      	b.n	8003430 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	3301      	adds	r3, #1
 8003418:	613b      	str	r3, [r7, #16]
          day = 1U;
 800341a:	2301      	movs	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	e007      	b.n	8003430 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2b1d      	cmp	r3, #29
 8003424:	d104      	bne.n	8003430 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	3301      	adds	r3, #1
 800342a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800342c:	2301      	movs	r3, #1
 800342e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	3301      	adds	r3, #1
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d38b      	bcc.n	8003356 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	4619      	mov	r1, r3
 8003460:	6978      	ldr	r0, [r7, #20]
 8003462:	f000 f83b 	bl	80034dc <RTC_WeekDayNum>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	731a      	strb	r2, [r3, #12]
}
 800346e:	bf00      	nop
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
	...

08003478 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003482:	88fb      	ldrh	r3, [r7, #6]
 8003484:	f003 0303 	and.w	r3, r3, #3
 8003488:	b29b      	uxth	r3, r3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	e01d      	b.n	80034ce <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <RTC_IsLeapYear+0x60>)
 8003496:	fba2 1203 	umull	r1, r2, r2, r3
 800349a:	0952      	lsrs	r2, r2, #5
 800349c:	2164      	movs	r1, #100	; 0x64
 800349e:	fb01 f202 	mul.w	r2, r1, r2
 80034a2:	1a9b      	subs	r3, r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <RTC_IsLeapYear+0x60>)
 80034b2:	fba2 1203 	umull	r1, r2, r2, r3
 80034b6:	09d2      	lsrs	r2, r2, #7
 80034b8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80034bc:	fb01 f202 	mul.w	r2, r1, r2
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d101      	bne.n	80034cc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80034cc:	2300      	movs	r3, #0
  }
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	51eb851f 	.word	0x51eb851f

080034dc <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
 80034e8:	4613      	mov	r3, r2
 80034ea:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	2300      	movs	r3, #0
 80034f2:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80034fa:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d82d      	bhi.n	800355e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	4a2c      	ldr	r2, [pc, #176]	; (80035c0 <RTC_WeekDayNum+0xe4>)
 8003510:	fba2 2303 	umull	r2, r3, r2, r3
 8003514:	085a      	lsrs	r2, r3, #1
 8003516:	78bb      	ldrb	r3, [r7, #2]
 8003518:	441a      	add	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	441a      	add	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	3b01      	subs	r3, #1
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	441a      	add	r2, r3
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3b01      	subs	r3, #1
 800352a:	4926      	ldr	r1, [pc, #152]	; (80035c4 <RTC_WeekDayNum+0xe8>)
 800352c:	fba1 1303 	umull	r1, r3, r1, r3
 8003530:	095b      	lsrs	r3, r3, #5
 8003532:	1ad2      	subs	r2, r2, r3
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3b01      	subs	r3, #1
 8003538:	4922      	ldr	r1, [pc, #136]	; (80035c4 <RTC_WeekDayNum+0xe8>)
 800353a:	fba1 1303 	umull	r1, r3, r1, r3
 800353e:	09db      	lsrs	r3, r3, #7
 8003540:	4413      	add	r3, r2
 8003542:	1d1a      	adds	r2, r3, #4
 8003544:	4b20      	ldr	r3, [pc, #128]	; (80035c8 <RTC_WeekDayNum+0xec>)
 8003546:	fba3 1302 	umull	r1, r3, r3, r2
 800354a:	1ad1      	subs	r1, r2, r3
 800354c:	0849      	lsrs	r1, r1, #1
 800354e:	440b      	add	r3, r1
 8003550:	0899      	lsrs	r1, r3, #2
 8003552:	460b      	mov	r3, r1
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a5b      	subs	r3, r3, r1
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	60fb      	str	r3, [r7, #12]
 800355c:	e029      	b.n	80035b2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4613      	mov	r3, r2
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4413      	add	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <RTC_WeekDayNum+0xe4>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	085a      	lsrs	r2, r3, #1
 8003572:	78bb      	ldrb	r3, [r7, #2]
 8003574:	441a      	add	r2, r3
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	441a      	add	r2, r3
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	089b      	lsrs	r3, r3, #2
 800357e:	441a      	add	r2, r3
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4910      	ldr	r1, [pc, #64]	; (80035c4 <RTC_WeekDayNum+0xe8>)
 8003584:	fba1 1303 	umull	r1, r3, r1, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	1ad2      	subs	r2, r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	490d      	ldr	r1, [pc, #52]	; (80035c4 <RTC_WeekDayNum+0xe8>)
 8003590:	fba1 1303 	umull	r1, r3, r1, r3
 8003594:	09db      	lsrs	r3, r3, #7
 8003596:	4413      	add	r3, r2
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <RTC_WeekDayNum+0xec>)
 800359c:	fba3 1302 	umull	r1, r3, r3, r2
 80035a0:	1ad1      	subs	r1, r2, r3
 80035a2:	0849      	lsrs	r1, r1, #1
 80035a4:	440b      	add	r3, r1
 80035a6:	0899      	lsrs	r1, r3, #2
 80035a8:	460b      	mov	r3, r1
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	1a5b      	subs	r3, r3, r1
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	b2db      	uxtb	r3, r3
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr
 80035c0:	38e38e39 	.word	0x38e38e39
 80035c4:	51eb851f 	.word	0x51eb851f
 80035c8:	24924925 	.word	0x24924925

080035cc <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d027      	beq.n	8003632 <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d020      	beq.n	8003632 <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0304 	and.w	r3, r3, #4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00b      	beq.n	8003616 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f824 	bl	800364c <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f06f 0204 	mvn.w	r2, #4
 800360c:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2204      	movs	r2, #4
 8003612:	745a      	strb	r2, [r3, #17]
 8003614:	e005      	b.n	8003622 <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f80f 	bl	800363a <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003632:	bf00      	nop
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e041      	b.n	80036f4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7fd f9fd 	bl	8000a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	4619      	mov	r1, r3
 800369c:	4610      	mov	r0, r2
 800369e:	f000 fa5b 	bl	8003b58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b01      	cmp	r3, #1
 800370e:	d001      	beq.n	8003714 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e03a      	b.n	800378a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a18      	ldr	r2, [pc, #96]	; (8003794 <HAL_TIM_Base_Start_IT+0x98>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d00e      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x58>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d009      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x58>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a14      	ldr	r2, [pc, #80]	; (8003798 <HAL_TIM_Base_Start_IT+0x9c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d004      	beq.n	8003754 <HAL_TIM_Base_Start_IT+0x58>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a13      	ldr	r2, [pc, #76]	; (800379c <HAL_TIM_Base_Start_IT+0xa0>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d111      	bne.n	8003778 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b06      	cmp	r3, #6
 8003764:	d010      	beq.n	8003788 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f042 0201 	orr.w	r2, r2, #1
 8003774:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003776:	e007      	b.n	8003788 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40000800 	.word	0x40000800

080037a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d020      	beq.n	8003804 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d01b      	beq.n	8003804 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0202 	mvn.w	r2, #2
 80037d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f998 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e005      	b.n	80037fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f98b 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f99a 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d020      	beq.n	8003850 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d01b      	beq.n	8003850 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f06f 0204 	mvn.w	r2, #4
 8003820:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2202      	movs	r2, #2
 8003826:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f972 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
 800383c:	e005      	b.n	800384a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f965 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f974 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0308 	and.w	r3, r3, #8
 8003856:	2b00      	cmp	r3, #0
 8003858:	d020      	beq.n	800389c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d01b      	beq.n	800389c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f06f 0208 	mvn.w	r2, #8
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2204      	movs	r2, #4
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f000 f94c 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
 8003888:	e005      	b.n	8003896 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f93f 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 f94e 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d020      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d01b      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f06f 0210 	mvn.w	r2, #16
 80038b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2208      	movs	r2, #8
 80038be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 f926 	bl	8003b20 <HAL_TIM_IC_CaptureCallback>
 80038d4:	e005      	b.n	80038e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f919 	bl	8003b0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f000 f928 	bl	8003b32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0201 	mvn.w	r2, #1
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7fc ffb6 	bl	8000878 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00c      	beq.n	8003930 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d007      	beq.n	8003930 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fa7f 	bl	8003e2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003936:	2b00      	cmp	r3, #0
 8003938:	d00c      	beq.n	8003954 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d007      	beq.n	8003954 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800394c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8f8 	bl	8003b44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f003 0320 	and.w	r3, r3, #32
 8003964:	2b00      	cmp	r3, #0
 8003966:	d007      	beq.n	8003978 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0220 	mvn.w	r2, #32
 8003970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f000 fa52 	bl	8003e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	bf00      	nop
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIM_ConfigClockSource+0x1c>
 8003998:	2302      	movs	r3, #2
 800399a:	e0b4      	b.n	8003b06 <HAL_TIM_ConfigClockSource+0x186>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d4:	d03e      	beq.n	8003a54 <HAL_TIM_ConfigClockSource+0xd4>
 80039d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039da:	f200 8087 	bhi.w	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 80039de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e2:	f000 8086 	beq.w	8003af2 <HAL_TIM_ConfigClockSource+0x172>
 80039e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ea:	d87f      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 80039ec:	2b70      	cmp	r3, #112	; 0x70
 80039ee:	d01a      	beq.n	8003a26 <HAL_TIM_ConfigClockSource+0xa6>
 80039f0:	2b70      	cmp	r3, #112	; 0x70
 80039f2:	d87b      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 80039f4:	2b60      	cmp	r3, #96	; 0x60
 80039f6:	d050      	beq.n	8003a9a <HAL_TIM_ConfigClockSource+0x11a>
 80039f8:	2b60      	cmp	r3, #96	; 0x60
 80039fa:	d877      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 80039fc:	2b50      	cmp	r3, #80	; 0x50
 80039fe:	d03c      	beq.n	8003a7a <HAL_TIM_ConfigClockSource+0xfa>
 8003a00:	2b50      	cmp	r3, #80	; 0x50
 8003a02:	d873      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d058      	beq.n	8003aba <HAL_TIM_ConfigClockSource+0x13a>
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d86f      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 8003a0c:	2b30      	cmp	r3, #48	; 0x30
 8003a0e:	d064      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x15a>
 8003a10:	2b30      	cmp	r3, #48	; 0x30
 8003a12:	d86b      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d060      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x15a>
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d867      	bhi.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d05c      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x15a>
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d05a      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0x15a>
 8003a24:	e062      	b.n	8003aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6818      	ldr	r0, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	6899      	ldr	r1, [r3, #8]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	f000 f974 	bl	8003d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	609a      	str	r2, [r3, #8]
      break;
 8003a52:	e04f      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	6899      	ldr	r1, [r3, #8]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f000 f95d 	bl	8003d22 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a76:	609a      	str	r2, [r3, #8]
      break;
 8003a78:	e03c      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	6859      	ldr	r1, [r3, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f000 f8d4 	bl	8003c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2150      	movs	r1, #80	; 0x50
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f92b 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003a98:	e02c      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6818      	ldr	r0, [r3, #0]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	6859      	ldr	r1, [r3, #4]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	f000 f8f2 	bl	8003c90 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2160      	movs	r1, #96	; 0x60
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 f91b 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003ab8:	e01c      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6818      	ldr	r0, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	6859      	ldr	r1, [r3, #4]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f000 f8b4 	bl	8003c34 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2140      	movs	r1, #64	; 0x40
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f000 f90b 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003ad8:	e00c      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f000 f902 	bl	8003cee <TIM_ITRx_SetConfig>
      break;
 8003aea:	e003      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      break;
 8003af0:	e000      	b.n	8003af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3710      	adds	r7, #16
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b083      	sub	sp, #12
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b16:	bf00      	nop
 8003b18:	370c      	adds	r7, #12
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bc80      	pop	{r7}
 8003b1e:	4770      	bx	lr

08003b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bc80      	pop	{r7}
 8003b30:	4770      	bx	lr

08003b32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b083      	sub	sp, #12
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b3a:	bf00      	nop
 8003b3c:	370c      	adds	r7, #12
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr

08003b44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b4c:	bf00      	nop
 8003b4e:	370c      	adds	r7, #12
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
	...

08003b58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a2f      	ldr	r2, [pc, #188]	; (8003c28 <TIM_Base_SetConfig+0xd0>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00b      	beq.n	8003b88 <TIM_Base_SetConfig+0x30>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b76:	d007      	beq.n	8003b88 <TIM_Base_SetConfig+0x30>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a2c      	ldr	r2, [pc, #176]	; (8003c2c <TIM_Base_SetConfig+0xd4>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d003      	beq.n	8003b88 <TIM_Base_SetConfig+0x30>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a2b      	ldr	r2, [pc, #172]	; (8003c30 <TIM_Base_SetConfig+0xd8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <TIM_Base_SetConfig+0xd0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d00b      	beq.n	8003bba <TIM_Base_SetConfig+0x62>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba8:	d007      	beq.n	8003bba <TIM_Base_SetConfig+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <TIM_Base_SetConfig+0xd4>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d003      	beq.n	8003bba <TIM_Base_SetConfig+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1e      	ldr	r2, [pc, #120]	; (8003c30 <TIM_Base_SetConfig+0xd8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d108      	bne.n	8003bcc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a0d      	ldr	r2, [pc, #52]	; (8003c28 <TIM_Base_SetConfig+0xd0>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d005      	beq.n	8003c1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	611a      	str	r2, [r3, #16]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr
 8003c28:	40012c00 	.word	0x40012c00
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800

08003c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 030a 	bic.w	r3, r3, #10
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr

08003c90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b087      	sub	sp, #28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	f023 0210 	bic.w	r2, r3, #16
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	031b      	lsls	r3, r3, #12
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ccc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	621a      	str	r2, [r3, #32]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bc80      	pop	{r7}
 8003cec:	4770      	bx	lr

08003cee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b085      	sub	sp, #20
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	f043 0307 	orr.w	r3, r3, #7
 8003d10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	609a      	str	r2, [r3, #8]
}
 8003d18:	bf00      	nop
 8003d1a:	3714      	adds	r7, #20
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bc80      	pop	{r7}
 8003d20:	4770      	bx	lr

08003d22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b087      	sub	sp, #28
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	60f8      	str	r0, [r7, #12]
 8003d2a:	60b9      	str	r1, [r7, #8]
 8003d2c:	607a      	str	r2, [r7, #4]
 8003d2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	021a      	lsls	r2, r3, #8
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	609a      	str	r2, [r3, #8]
}
 8003d56:	bf00      	nop
 8003d58:	371c      	adds	r7, #28
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bc80      	pop	{r7}
 8003d5e:	4770      	bx	lr

08003d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e046      	b.n	8003e06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d00e      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc4:	d009      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d004      	beq.n	8003dda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d10c      	bne.n	8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003de0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68ba      	ldr	r2, [r7, #8]
 8003df2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bc80      	pop	{r7}
 8003e0e:	4770      	bx	lr
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	40000400 	.word	0x40000400
 8003e18:	40000800 	.word	0x40000800

08003e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bc80      	pop	{r7}
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bc80      	pop	{r7}
 8003e3e:	4770      	bx	lr

08003e40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e042      	b.n	8003ed8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e58:	b2db      	uxtb	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d106      	bne.n	8003e6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fc fe32 	bl	8000ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2224      	movs	r2, #36	; 0x24
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fcd5 	bl	8004834 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ea8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3708      	adds	r7, #8
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	4613      	mov	r3, r2
 8003eec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b20      	cmp	r3, #32
 8003ef8:	d112      	bne.n	8003f20 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <HAL_UART_Receive_IT+0x26>
 8003f00:	88fb      	ldrh	r3, [r7, #6]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e00b      	b.n	8003f22 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f10:	88fb      	ldrh	r3, [r7, #6]
 8003f12:	461a      	mov	r2, r3
 8003f14:	68b9      	ldr	r1, [r7, #8]
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fab7 	bl	800448a <UART_Start_Receive_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b0ba      	sub	sp, #232	; 0xe8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f62:	f003 030f 	and.w	r3, r3, #15
 8003f66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d10f      	bne.n	8003f92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0320 	and.w	r3, r3, #32
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d009      	beq.n	8003f92 <HAL_UART_IRQHandler+0x66>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 fb93 	bl	80046b6 <UART_Receive_IT>
      return;
 8003f90:	e25b      	b.n	800444a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80de 	beq.w	8004158 <HAL_UART_IRQHandler+0x22c>
 8003f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d106      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f000 80d1 	beq.w	8004158 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <HAL_UART_IRQHandler+0xae>
 8003fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fde:	f003 0304 	and.w	r3, r3, #4
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xd2>
 8003fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xf6>
 800400a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004026:	f003 0308 	and.w	r3, r3, #8
 800402a:	2b00      	cmp	r3, #0
 800402c:	d011      	beq.n	8004052 <HAL_UART_IRQHandler+0x126>
 800402e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d105      	bne.n	8004046 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f043 0208 	orr.w	r2, r3, #8
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 81f2 	beq.w	8004440 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800405c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004060:	f003 0320 	and.w	r3, r3, #32
 8004064:	2b00      	cmp	r3, #0
 8004066:	d008      	beq.n	800407a <HAL_UART_IRQHandler+0x14e>
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d002      	beq.n	800407a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 fb1e 	bl	80046b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	bf14      	ite	ne
 8004088:	2301      	movne	r3, #1
 800408a:	2300      	moveq	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004096:	f003 0308 	and.w	r3, r3, #8
 800409a:	2b00      	cmp	r3, #0
 800409c:	d103      	bne.n	80040a6 <HAL_UART_IRQHandler+0x17a>
 800409e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d04f      	beq.n	8004146 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 fa28 	bl	80044fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d041      	beq.n	800413e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	3314      	adds	r3, #20
 80040c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040c8:	e853 3f00 	ldrex	r3, [r3]
 80040cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3314      	adds	r3, #20
 80040e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040f6:	e841 2300 	strex	r3, r2, [r1]
 80040fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1d9      	bne.n	80040ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d013      	beq.n	8004136 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004112:	4a7e      	ldr	r2, [pc, #504]	; (800430c <HAL_UART_IRQHandler+0x3e0>)
 8004114:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411a:	4618      	mov	r0, r3
 800411c:	f7fd f83c 	bl	8001198 <HAL_DMA_Abort_IT>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004130:	4610      	mov	r0, r2
 8004132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004134:	e00e      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f993 	bl	8004462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413c:	e00a      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f98f 	bl	8004462 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004144:	e006      	b.n	8004154 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f98b 	bl	8004462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004152:	e175      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	bf00      	nop
    return;
 8004156:	e173      	b.n	8004440 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 814f 	bne.w	8004400 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004166:	f003 0310 	and.w	r3, r3, #16
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8148 	beq.w	8004400 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 0310 	and.w	r3, r3, #16
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8141 	beq.w	8004400 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800417e:	2300      	movs	r3, #0
 8004180:	60bb      	str	r3, [r7, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80b6 	beq.w	8004310 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8145 	beq.w	8004444 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041c2:	429a      	cmp	r2, r3
 80041c4:	f080 813e 	bcs.w	8004444 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	f000 8088 	beq.w	80042ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	330c      	adds	r3, #12
 80041e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004208:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800420c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004214:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004218:	e841 2300 	strex	r3, r2, [r1]
 800421c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004220:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1d9      	bne.n	80041dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3314      	adds	r3, #20
 800422e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004230:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004232:	e853 3f00 	ldrex	r3, [r3]
 8004236:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004238:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800423a:	f023 0301 	bic.w	r3, r3, #1
 800423e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3314      	adds	r3, #20
 8004248:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800424c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004250:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004252:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004254:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800425e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e1      	bne.n	8004228 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3314      	adds	r3, #20
 800426a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800426e:	e853 3f00 	ldrex	r3, [r3]
 8004272:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004276:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800427a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004288:	66fa      	str	r2, [r7, #108]	; 0x6c
 800428a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800428e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004290:	e841 2300 	strex	r3, r2, [r1]
 8004294:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1e3      	bne.n	8004264 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2220      	movs	r2, #32
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	330c      	adds	r3, #12
 80042b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b4:	e853 3f00 	ldrex	r3, [r3]
 80042b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042bc:	f023 0310 	bic.w	r3, r3, #16
 80042c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	330c      	adds	r3, #12
 80042ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80042ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80042d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e3      	bne.n	80042aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	4618      	mov	r0, r3
 80042e8:	f7fc ff1b 	bl	8001122 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	b29b      	uxth	r3, r3
 8004300:	4619      	mov	r1, r3
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f8b6 	bl	8004474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004308:	e09c      	b.n	8004444 <HAL_UART_IRQHandler+0x518>
 800430a:	bf00      	nop
 800430c:	080045c1 	.word	0x080045c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004318:	b29b      	uxth	r3, r3
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004324:	b29b      	uxth	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 808e 	beq.w	8004448 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800432c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8089 	beq.w	8004448 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	e853 3f00 	ldrex	r3, [r3]
 8004344:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800434c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800435a:	647a      	str	r2, [r7, #68]	; 0x44
 800435c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1e3      	bne.n	8004336 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3314      	adds	r3, #20
 8004374:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	e853 3f00 	ldrex	r3, [r3]
 800437c:	623b      	str	r3, [r7, #32]
   return(result);
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	f023 0301 	bic.w	r3, r3, #1
 8004384:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3314      	adds	r3, #20
 800438e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004392:	633a      	str	r2, [r7, #48]	; 0x30
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e3      	bne.n	800436e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0310 	bic.w	r3, r3, #16
 80043ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	330c      	adds	r3, #12
 80043d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80043d8:	61fa      	str	r2, [r7, #28]
 80043da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	69b9      	ldr	r1, [r7, #24]
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	617b      	str	r3, [r7, #20]
   return(result);
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e3      	bne.n	80043b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2202      	movs	r2, #2
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043f6:	4619      	mov	r1, r3
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f000 f83b 	bl	8004474 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043fe:	e023      	b.n	8004448 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <HAL_UART_IRQHandler+0x4f4>
 800440c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8e5 	bl	80045e8 <UART_Transmit_IT>
    return;
 800441e:	e014      	b.n	800444a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00e      	beq.n	800444a <HAL_UART_IRQHandler+0x51e>
 800442c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d008      	beq.n	800444a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f924 	bl	8004686 <UART_EndTransmit_IT>
    return;
 800443e:	e004      	b.n	800444a <HAL_UART_IRQHandler+0x51e>
    return;
 8004440:	bf00      	nop
 8004442:	e002      	b.n	800444a <HAL_UART_IRQHandler+0x51e>
      return;
 8004444:	bf00      	nop
 8004446:	e000      	b.n	800444a <HAL_UART_IRQHandler+0x51e>
      return;
 8004448:	bf00      	nop
  }
}
 800444a:	37e8      	adds	r7, #232	; 0xe8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	bc80      	pop	{r7}
 8004460:	4770      	bx	lr

08004462 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr

08004474 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	bc80      	pop	{r7}
 8004488:	4770      	bx	lr

0800448a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800448a:	b480      	push	{r7}
 800448c:	b085      	sub	sp, #20
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	4613      	mov	r3, r2
 8004496:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	88fa      	ldrh	r2, [r7, #6]
 80044a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	88fa      	ldrh	r2, [r7, #6]
 80044a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2222      	movs	r2, #34	; 0x22
 80044b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d007      	beq.n	80044d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0220 	orr.w	r2, r2, #32
 80044ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bc80      	pop	{r7}
 80044fa:	4770      	bx	lr

080044fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b095      	sub	sp, #84	; 0x54
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450e:	e853 3f00 	ldrex	r3, [r3]
 8004512:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004516:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800451a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004524:	643a      	str	r2, [r7, #64]	; 0x40
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004528:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800452a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800452c:	e841 2300 	strex	r3, r2, [r1]
 8004530:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1e5      	bne.n	8004504 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	61fb      	str	r3, [r7, #28]
   return(result);
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	f023 0301 	bic.w	r3, r3, #1
 800454e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004558:	62fa      	str	r2, [r7, #44]	; 0x2c
 800455a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800455e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e5      	bne.n	8004538 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	2b01      	cmp	r3, #1
 8004572:	d119      	bne.n	80045a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	330c      	adds	r3, #12
 800457a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	e853 3f00 	ldrex	r3, [r3]
 8004582:	60bb      	str	r3, [r7, #8]
   return(result);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f023 0310 	bic.w	r3, r3, #16
 800458a:	647b      	str	r3, [r7, #68]	; 0x44
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	330c      	adds	r3, #12
 8004592:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004594:	61ba      	str	r2, [r7, #24]
 8004596:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004598:	6979      	ldr	r1, [r7, #20]
 800459a:	69ba      	ldr	r2, [r7, #24]
 800459c:	e841 2300 	strex	r3, r2, [r1]
 80045a0:	613b      	str	r3, [r7, #16]
   return(result);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1e5      	bne.n	8004574 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80045b6:	bf00      	nop
 80045b8:	3754      	adds	r7, #84	; 0x54
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff ff41 	bl	8004462 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e0:	bf00      	nop
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	2b21      	cmp	r3, #33	; 0x21
 80045fa:	d13e      	bne.n	800467a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004604:	d114      	bne.n	8004630 <UART_Transmit_IT+0x48>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d110      	bne.n	8004630 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004622:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	1c9a      	adds	r2, r3, #2
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	621a      	str	r2, [r3, #32]
 800462e:	e008      	b.n	8004642 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	1c59      	adds	r1, r3, #1
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	6211      	str	r1, [r2, #32]
 800463a:	781a      	ldrb	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29b      	uxth	r3, r3
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	4619      	mov	r1, r3
 8004650:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10f      	bne.n	8004676 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68da      	ldr	r2, [r3, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004664:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004674:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	e000      	b.n	800467c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800467a:	2302      	movs	r3, #2
  }
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	bc80      	pop	{r7}
 8004684:	4770      	bx	lr

08004686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	68da      	ldr	r2, [r3, #12]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800469c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff fed2 	bl	8004450 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08c      	sub	sp, #48	; 0x30
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b22      	cmp	r3, #34	; 0x22
 80046c8:	f040 80ae 	bne.w	8004828 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046d4:	d117      	bne.n	8004706 <UART_Receive_IT+0x50>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d113      	bne.n	8004706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046fe:	1c9a      	adds	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	629a      	str	r2, [r3, #40]	; 0x28
 8004704:	e026      	b.n	8004754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004718:	d007      	beq.n	800472a <UART_Receive_IT+0x74>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d10a      	bne.n	8004738 <UART_Receive_IT+0x82>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d106      	bne.n	8004738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	b2da      	uxtb	r2, r3
 8004732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e008      	b.n	800474a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004744:	b2da      	uxtb	r2, r3
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474e:	1c5a      	adds	r2, r3, #1
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004758:	b29b      	uxth	r3, r3
 800475a:	3b01      	subs	r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	687a      	ldr	r2, [r7, #4]
 8004760:	4619      	mov	r1, r3
 8004762:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004764:	2b00      	cmp	r3, #0
 8004766:	d15d      	bne.n	8004824 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0220 	bic.w	r2, r2, #32
 8004776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695a      	ldr	r2, [r3, #20]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f022 0201 	bic.w	r2, r2, #1
 8004796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d135      	bne.n	800481a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	330c      	adds	r3, #12
 80047ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	e853 3f00 	ldrex	r3, [r3]
 80047c2:	613b      	str	r3, [r7, #16]
   return(result);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f023 0310 	bic.w	r3, r3, #16
 80047ca:	627b      	str	r3, [r7, #36]	; 0x24
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	330c      	adds	r3, #12
 80047d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047d4:	623a      	str	r2, [r7, #32]
 80047d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d8:	69f9      	ldr	r1, [r7, #28]
 80047da:	6a3a      	ldr	r2, [r7, #32]
 80047dc:	e841 2300 	strex	r3, r2, [r1]
 80047e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d1e5      	bne.n	80047b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d10a      	bne.n	800480c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60fb      	str	r3, [r7, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004810:	4619      	mov	r1, r3
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fe2e 	bl	8004474 <HAL_UARTEx_RxEventCallback>
 8004818:	e002      	b.n	8004820 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc fa28 	bl	8000c70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004820:	2300      	movs	r3, #0
 8004822:	e002      	b.n	800482a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	e000      	b.n	800482a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004828:	2302      	movs	r3, #2
  }
}
 800482a:	4618      	mov	r0, r3
 800482c:	3730      	adds	r7, #48	; 0x30
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
	...

08004834 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	430a      	orrs	r2, r1
 8004850:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800486e:	f023 030c 	bic.w	r3, r3, #12
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	6812      	ldr	r2, [r2, #0]
 8004876:	68b9      	ldr	r1, [r7, #8]
 8004878:	430b      	orrs	r3, r1
 800487a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699a      	ldr	r2, [r3, #24]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <UART_SetConfig+0x114>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d103      	bne.n	80048a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800489c:	f7fd ff50 	bl	8002740 <HAL_RCC_GetPCLK2Freq>
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	e002      	b.n	80048aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048a4:	f7fd ff38 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 80048a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	009a      	lsls	r2, r3, #2
 80048b4:	441a      	add	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c0:	4a22      	ldr	r2, [pc, #136]	; (800494c <UART_SetConfig+0x118>)
 80048c2:	fba2 2303 	umull	r2, r3, r2, r3
 80048c6:	095b      	lsrs	r3, r3, #5
 80048c8:	0119      	lsls	r1, r3, #4
 80048ca:	68fa      	ldr	r2, [r7, #12]
 80048cc:	4613      	mov	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	009a      	lsls	r2, r3, #2
 80048d4:	441a      	add	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80048e0:	4b1a      	ldr	r3, [pc, #104]	; (800494c <UART_SetConfig+0x118>)
 80048e2:	fba3 0302 	umull	r0, r3, r3, r2
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2064      	movs	r0, #100	; 0x64
 80048ea:	fb00 f303 	mul.w	r3, r0, r3
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	; 0x32
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <UART_SetConfig+0x118>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004900:	4419      	add	r1, r3
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009a      	lsls	r2, r3, #2
 800490c:	441a      	add	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	fbb2 f2f3 	udiv	r2, r2, r3
 8004918:	4b0c      	ldr	r3, [pc, #48]	; (800494c <UART_SetConfig+0x118>)
 800491a:	fba3 0302 	umull	r0, r3, r3, r2
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	2064      	movs	r0, #100	; 0x64
 8004922:	fb00 f303 	mul.w	r3, r0, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	011b      	lsls	r3, r3, #4
 800492a:	3332      	adds	r3, #50	; 0x32
 800492c:	4a07      	ldr	r2, [pc, #28]	; (800494c <UART_SetConfig+0x118>)
 800492e:	fba2 2303 	umull	r2, r3, r2, r3
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	f003 020f 	and.w	r2, r3, #15
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	440a      	add	r2, r1
 800493e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004940:	bf00      	nop
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	40013800 	.word	0x40013800
 800494c:	51eb851f 	.word	0x51eb851f

08004950 <__errno>:
 8004950:	4b01      	ldr	r3, [pc, #4]	; (8004958 <__errno+0x8>)
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	4770      	bx	lr
 8004956:	bf00      	nop
 8004958:	20000010 	.word	0x20000010

0800495c <__libc_init_array>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	2600      	movs	r6, #0
 8004960:	4d0c      	ldr	r5, [pc, #48]	; (8004994 <__libc_init_array+0x38>)
 8004962:	4c0d      	ldr	r4, [pc, #52]	; (8004998 <__libc_init_array+0x3c>)
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	42a6      	cmp	r6, r4
 800496a:	d109      	bne.n	8004980 <__libc_init_array+0x24>
 800496c:	f000 fc5c 	bl	8005228 <_init>
 8004970:	2600      	movs	r6, #0
 8004972:	4d0a      	ldr	r5, [pc, #40]	; (800499c <__libc_init_array+0x40>)
 8004974:	4c0a      	ldr	r4, [pc, #40]	; (80049a0 <__libc_init_array+0x44>)
 8004976:	1b64      	subs	r4, r4, r5
 8004978:	10a4      	asrs	r4, r4, #2
 800497a:	42a6      	cmp	r6, r4
 800497c:	d105      	bne.n	800498a <__libc_init_array+0x2e>
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	f855 3b04 	ldr.w	r3, [r5], #4
 8004984:	4798      	blx	r3
 8004986:	3601      	adds	r6, #1
 8004988:	e7ee      	b.n	8004968 <__libc_init_array+0xc>
 800498a:	f855 3b04 	ldr.w	r3, [r5], #4
 800498e:	4798      	blx	r3
 8004990:	3601      	adds	r6, #1
 8004992:	e7f2      	b.n	800497a <__libc_init_array+0x1e>
 8004994:	08005358 	.word	0x08005358
 8004998:	08005358 	.word	0x08005358
 800499c:	08005358 	.word	0x08005358
 80049a0:	0800535c 	.word	0x0800535c

080049a4 <__retarget_lock_acquire_recursive>:
 80049a4:	4770      	bx	lr

080049a6 <__retarget_lock_release_recursive>:
 80049a6:	4770      	bx	lr

080049a8 <memchr>:
 80049a8:	4603      	mov	r3, r0
 80049aa:	b510      	push	{r4, lr}
 80049ac:	b2c9      	uxtb	r1, r1
 80049ae:	4402      	add	r2, r0
 80049b0:	4293      	cmp	r3, r2
 80049b2:	4618      	mov	r0, r3
 80049b4:	d101      	bne.n	80049ba <memchr+0x12>
 80049b6:	2000      	movs	r0, #0
 80049b8:	e003      	b.n	80049c2 <memchr+0x1a>
 80049ba:	7804      	ldrb	r4, [r0, #0]
 80049bc:	3301      	adds	r3, #1
 80049be:	428c      	cmp	r4, r1
 80049c0:	d1f6      	bne.n	80049b0 <memchr+0x8>
 80049c2:	bd10      	pop	{r4, pc}

080049c4 <memcpy>:
 80049c4:	440a      	add	r2, r1
 80049c6:	4291      	cmp	r1, r2
 80049c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80049cc:	d100      	bne.n	80049d0 <memcpy+0xc>
 80049ce:	4770      	bx	lr
 80049d0:	b510      	push	{r4, lr}
 80049d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80049d6:	4291      	cmp	r1, r2
 80049d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80049dc:	d1f9      	bne.n	80049d2 <memcpy+0xe>
 80049de:	bd10      	pop	{r4, pc}

080049e0 <memset>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	4402      	add	r2, r0
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d100      	bne.n	80049ea <memset+0xa>
 80049e8:	4770      	bx	lr
 80049ea:	f803 1b01 	strb.w	r1, [r3], #1
 80049ee:	e7f9      	b.n	80049e4 <memset+0x4>

080049f0 <_free_r>:
 80049f0:	b538      	push	{r3, r4, r5, lr}
 80049f2:	4605      	mov	r5, r0
 80049f4:	2900      	cmp	r1, #0
 80049f6:	d043      	beq.n	8004a80 <_free_r+0x90>
 80049f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80049fc:	1f0c      	subs	r4, r1, #4
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bfb8      	it	lt
 8004a02:	18e4      	addlt	r4, r4, r3
 8004a04:	f000 f8ca 	bl	8004b9c <__malloc_lock>
 8004a08:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <_free_r+0x94>)
 8004a0a:	6813      	ldr	r3, [r2, #0]
 8004a0c:	4610      	mov	r0, r2
 8004a0e:	b933      	cbnz	r3, 8004a1e <_free_r+0x2e>
 8004a10:	6063      	str	r3, [r4, #4]
 8004a12:	6014      	str	r4, [r2, #0]
 8004a14:	4628      	mov	r0, r5
 8004a16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a1a:	f000 b8c5 	b.w	8004ba8 <__malloc_unlock>
 8004a1e:	42a3      	cmp	r3, r4
 8004a20:	d90a      	bls.n	8004a38 <_free_r+0x48>
 8004a22:	6821      	ldr	r1, [r4, #0]
 8004a24:	1862      	adds	r2, r4, r1
 8004a26:	4293      	cmp	r3, r2
 8004a28:	bf01      	itttt	eq
 8004a2a:	681a      	ldreq	r2, [r3, #0]
 8004a2c:	685b      	ldreq	r3, [r3, #4]
 8004a2e:	1852      	addeq	r2, r2, r1
 8004a30:	6022      	streq	r2, [r4, #0]
 8004a32:	6063      	str	r3, [r4, #4]
 8004a34:	6004      	str	r4, [r0, #0]
 8004a36:	e7ed      	b.n	8004a14 <_free_r+0x24>
 8004a38:	461a      	mov	r2, r3
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	b10b      	cbz	r3, 8004a42 <_free_r+0x52>
 8004a3e:	42a3      	cmp	r3, r4
 8004a40:	d9fa      	bls.n	8004a38 <_free_r+0x48>
 8004a42:	6811      	ldr	r1, [r2, #0]
 8004a44:	1850      	adds	r0, r2, r1
 8004a46:	42a0      	cmp	r0, r4
 8004a48:	d10b      	bne.n	8004a62 <_free_r+0x72>
 8004a4a:	6820      	ldr	r0, [r4, #0]
 8004a4c:	4401      	add	r1, r0
 8004a4e:	1850      	adds	r0, r2, r1
 8004a50:	4283      	cmp	r3, r0
 8004a52:	6011      	str	r1, [r2, #0]
 8004a54:	d1de      	bne.n	8004a14 <_free_r+0x24>
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	4401      	add	r1, r0
 8004a5c:	6011      	str	r1, [r2, #0]
 8004a5e:	6053      	str	r3, [r2, #4]
 8004a60:	e7d8      	b.n	8004a14 <_free_r+0x24>
 8004a62:	d902      	bls.n	8004a6a <_free_r+0x7a>
 8004a64:	230c      	movs	r3, #12
 8004a66:	602b      	str	r3, [r5, #0]
 8004a68:	e7d4      	b.n	8004a14 <_free_r+0x24>
 8004a6a:	6820      	ldr	r0, [r4, #0]
 8004a6c:	1821      	adds	r1, r4, r0
 8004a6e:	428b      	cmp	r3, r1
 8004a70:	bf01      	itttt	eq
 8004a72:	6819      	ldreq	r1, [r3, #0]
 8004a74:	685b      	ldreq	r3, [r3, #4]
 8004a76:	1809      	addeq	r1, r1, r0
 8004a78:	6021      	streq	r1, [r4, #0]
 8004a7a:	6063      	str	r3, [r4, #4]
 8004a7c:	6054      	str	r4, [r2, #4]
 8004a7e:	e7c9      	b.n	8004a14 <_free_r+0x24>
 8004a80:	bd38      	pop	{r3, r4, r5, pc}
 8004a82:	bf00      	nop
 8004a84:	200000ac 	.word	0x200000ac

08004a88 <_malloc_r>:
 8004a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a8a:	1ccd      	adds	r5, r1, #3
 8004a8c:	f025 0503 	bic.w	r5, r5, #3
 8004a90:	3508      	adds	r5, #8
 8004a92:	2d0c      	cmp	r5, #12
 8004a94:	bf38      	it	cc
 8004a96:	250c      	movcc	r5, #12
 8004a98:	2d00      	cmp	r5, #0
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	db01      	blt.n	8004aa2 <_malloc_r+0x1a>
 8004a9e:	42a9      	cmp	r1, r5
 8004aa0:	d903      	bls.n	8004aaa <_malloc_r+0x22>
 8004aa2:	230c      	movs	r3, #12
 8004aa4:	6033      	str	r3, [r6, #0]
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004aaa:	f000 f877 	bl	8004b9c <__malloc_lock>
 8004aae:	4921      	ldr	r1, [pc, #132]	; (8004b34 <_malloc_r+0xac>)
 8004ab0:	680a      	ldr	r2, [r1, #0]
 8004ab2:	4614      	mov	r4, r2
 8004ab4:	b99c      	cbnz	r4, 8004ade <_malloc_r+0x56>
 8004ab6:	4f20      	ldr	r7, [pc, #128]	; (8004b38 <_malloc_r+0xb0>)
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	b923      	cbnz	r3, 8004ac6 <_malloc_r+0x3e>
 8004abc:	4621      	mov	r1, r4
 8004abe:	4630      	mov	r0, r6
 8004ac0:	f000 f83c 	bl	8004b3c <_sbrk_r>
 8004ac4:	6038      	str	r0, [r7, #0]
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	4630      	mov	r0, r6
 8004aca:	f000 f837 	bl	8004b3c <_sbrk_r>
 8004ace:	1c43      	adds	r3, r0, #1
 8004ad0:	d123      	bne.n	8004b1a <_malloc_r+0x92>
 8004ad2:	230c      	movs	r3, #12
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	6033      	str	r3, [r6, #0]
 8004ad8:	f000 f866 	bl	8004ba8 <__malloc_unlock>
 8004adc:	e7e3      	b.n	8004aa6 <_malloc_r+0x1e>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	1b5b      	subs	r3, r3, r5
 8004ae2:	d417      	bmi.n	8004b14 <_malloc_r+0x8c>
 8004ae4:	2b0b      	cmp	r3, #11
 8004ae6:	d903      	bls.n	8004af0 <_malloc_r+0x68>
 8004ae8:	6023      	str	r3, [r4, #0]
 8004aea:	441c      	add	r4, r3
 8004aec:	6025      	str	r5, [r4, #0]
 8004aee:	e004      	b.n	8004afa <_malloc_r+0x72>
 8004af0:	6863      	ldr	r3, [r4, #4]
 8004af2:	42a2      	cmp	r2, r4
 8004af4:	bf0c      	ite	eq
 8004af6:	600b      	streq	r3, [r1, #0]
 8004af8:	6053      	strne	r3, [r2, #4]
 8004afa:	4630      	mov	r0, r6
 8004afc:	f000 f854 	bl	8004ba8 <__malloc_unlock>
 8004b00:	f104 000b 	add.w	r0, r4, #11
 8004b04:	1d23      	adds	r3, r4, #4
 8004b06:	f020 0007 	bic.w	r0, r0, #7
 8004b0a:	1ac2      	subs	r2, r0, r3
 8004b0c:	d0cc      	beq.n	8004aa8 <_malloc_r+0x20>
 8004b0e:	1a1b      	subs	r3, r3, r0
 8004b10:	50a3      	str	r3, [r4, r2]
 8004b12:	e7c9      	b.n	8004aa8 <_malloc_r+0x20>
 8004b14:	4622      	mov	r2, r4
 8004b16:	6864      	ldr	r4, [r4, #4]
 8004b18:	e7cc      	b.n	8004ab4 <_malloc_r+0x2c>
 8004b1a:	1cc4      	adds	r4, r0, #3
 8004b1c:	f024 0403 	bic.w	r4, r4, #3
 8004b20:	42a0      	cmp	r0, r4
 8004b22:	d0e3      	beq.n	8004aec <_malloc_r+0x64>
 8004b24:	1a21      	subs	r1, r4, r0
 8004b26:	4630      	mov	r0, r6
 8004b28:	f000 f808 	bl	8004b3c <_sbrk_r>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d1dd      	bne.n	8004aec <_malloc_r+0x64>
 8004b30:	e7cf      	b.n	8004ad2 <_malloc_r+0x4a>
 8004b32:	bf00      	nop
 8004b34:	200000ac 	.word	0x200000ac
 8004b38:	200000b0 	.word	0x200000b0

08004b3c <_sbrk_r>:
 8004b3c:	b538      	push	{r3, r4, r5, lr}
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4d05      	ldr	r5, [pc, #20]	; (8004b58 <_sbrk_r+0x1c>)
 8004b42:	4604      	mov	r4, r0
 8004b44:	4608      	mov	r0, r1
 8004b46:	602b      	str	r3, [r5, #0]
 8004b48:	f7fc f856 	bl	8000bf8 <_sbrk>
 8004b4c:	1c43      	adds	r3, r0, #1
 8004b4e:	d102      	bne.n	8004b56 <_sbrk_r+0x1a>
 8004b50:	682b      	ldr	r3, [r5, #0]
 8004b52:	b103      	cbz	r3, 8004b56 <_sbrk_r+0x1a>
 8004b54:	6023      	str	r3, [r4, #0]
 8004b56:	bd38      	pop	{r3, r4, r5, pc}
 8004b58:	200001f0 	.word	0x200001f0

08004b5c <siprintf>:
 8004b5c:	b40e      	push	{r1, r2, r3}
 8004b5e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b62:	b500      	push	{lr}
 8004b64:	b09c      	sub	sp, #112	; 0x70
 8004b66:	ab1d      	add	r3, sp, #116	; 0x74
 8004b68:	9002      	str	r0, [sp, #8]
 8004b6a:	9006      	str	r0, [sp, #24]
 8004b6c:	9107      	str	r1, [sp, #28]
 8004b6e:	9104      	str	r1, [sp, #16]
 8004b70:	4808      	ldr	r0, [pc, #32]	; (8004b94 <siprintf+0x38>)
 8004b72:	4909      	ldr	r1, [pc, #36]	; (8004b98 <siprintf+0x3c>)
 8004b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b78:	9105      	str	r1, [sp, #20]
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	a902      	add	r1, sp, #8
 8004b7e:	9301      	str	r3, [sp, #4]
 8004b80:	f000 f874 	bl	8004c6c <_svfiprintf_r>
 8004b84:	2200      	movs	r2, #0
 8004b86:	9b02      	ldr	r3, [sp, #8]
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	b01c      	add	sp, #112	; 0x70
 8004b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b90:	b003      	add	sp, #12
 8004b92:	4770      	bx	lr
 8004b94:	20000010 	.word	0x20000010
 8004b98:	ffff0208 	.word	0xffff0208

08004b9c <__malloc_lock>:
 8004b9c:	4801      	ldr	r0, [pc, #4]	; (8004ba4 <__malloc_lock+0x8>)
 8004b9e:	f7ff bf01 	b.w	80049a4 <__retarget_lock_acquire_recursive>
 8004ba2:	bf00      	nop
 8004ba4:	200001e8 	.word	0x200001e8

08004ba8 <__malloc_unlock>:
 8004ba8:	4801      	ldr	r0, [pc, #4]	; (8004bb0 <__malloc_unlock+0x8>)
 8004baa:	f7ff befc 	b.w	80049a6 <__retarget_lock_release_recursive>
 8004bae:	bf00      	nop
 8004bb0:	200001e8 	.word	0x200001e8

08004bb4 <__ssputs_r>:
 8004bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	688e      	ldr	r6, [r1, #8]
 8004bba:	4682      	mov	sl, r0
 8004bbc:	429e      	cmp	r6, r3
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	4690      	mov	r8, r2
 8004bc2:	461f      	mov	r7, r3
 8004bc4:	d838      	bhi.n	8004c38 <__ssputs_r+0x84>
 8004bc6:	898a      	ldrh	r2, [r1, #12]
 8004bc8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004bcc:	d032      	beq.n	8004c34 <__ssputs_r+0x80>
 8004bce:	6825      	ldr	r5, [r4, #0]
 8004bd0:	6909      	ldr	r1, [r1, #16]
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	eba5 0901 	sub.w	r9, r5, r1
 8004bd8:	6965      	ldr	r5, [r4, #20]
 8004bda:	444b      	add	r3, r9
 8004bdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004be0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004be4:	106d      	asrs	r5, r5, #1
 8004be6:	429d      	cmp	r5, r3
 8004be8:	bf38      	it	cc
 8004bea:	461d      	movcc	r5, r3
 8004bec:	0553      	lsls	r3, r2, #21
 8004bee:	d531      	bpl.n	8004c54 <__ssputs_r+0xa0>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	f7ff ff49 	bl	8004a88 <_malloc_r>
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	b950      	cbnz	r0, 8004c10 <__ssputs_r+0x5c>
 8004bfa:	230c      	movs	r3, #12
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	f8ca 3000 	str.w	r3, [sl]
 8004c04:	89a3      	ldrh	r3, [r4, #12]
 8004c06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0a:	81a3      	strh	r3, [r4, #12]
 8004c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c10:	464a      	mov	r2, r9
 8004c12:	6921      	ldr	r1, [r4, #16]
 8004c14:	f7ff fed6 	bl	80049c4 <memcpy>
 8004c18:	89a3      	ldrh	r3, [r4, #12]
 8004c1a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c22:	81a3      	strh	r3, [r4, #12]
 8004c24:	6126      	str	r6, [r4, #16]
 8004c26:	444e      	add	r6, r9
 8004c28:	6026      	str	r6, [r4, #0]
 8004c2a:	463e      	mov	r6, r7
 8004c2c:	6165      	str	r5, [r4, #20]
 8004c2e:	eba5 0509 	sub.w	r5, r5, r9
 8004c32:	60a5      	str	r5, [r4, #8]
 8004c34:	42be      	cmp	r6, r7
 8004c36:	d900      	bls.n	8004c3a <__ssputs_r+0x86>
 8004c38:	463e      	mov	r6, r7
 8004c3a:	4632      	mov	r2, r6
 8004c3c:	4641      	mov	r1, r8
 8004c3e:	6820      	ldr	r0, [r4, #0]
 8004c40:	f000 faaa 	bl	8005198 <memmove>
 8004c44:	68a3      	ldr	r3, [r4, #8]
 8004c46:	6822      	ldr	r2, [r4, #0]
 8004c48:	1b9b      	subs	r3, r3, r6
 8004c4a:	4432      	add	r2, r6
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	60a3      	str	r3, [r4, #8]
 8004c50:	6022      	str	r2, [r4, #0]
 8004c52:	e7db      	b.n	8004c0c <__ssputs_r+0x58>
 8004c54:	462a      	mov	r2, r5
 8004c56:	f000 fab9 	bl	80051cc <_realloc_r>
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	d1e1      	bne.n	8004c24 <__ssputs_r+0x70>
 8004c60:	4650      	mov	r0, sl
 8004c62:	6921      	ldr	r1, [r4, #16]
 8004c64:	f7ff fec4 	bl	80049f0 <_free_r>
 8004c68:	e7c7      	b.n	8004bfa <__ssputs_r+0x46>
	...

08004c6c <_svfiprintf_r>:
 8004c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c70:	4698      	mov	r8, r3
 8004c72:	898b      	ldrh	r3, [r1, #12]
 8004c74:	4607      	mov	r7, r0
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	460d      	mov	r5, r1
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	b09d      	sub	sp, #116	; 0x74
 8004c7e:	d50e      	bpl.n	8004c9e <_svfiprintf_r+0x32>
 8004c80:	690b      	ldr	r3, [r1, #16]
 8004c82:	b963      	cbnz	r3, 8004c9e <_svfiprintf_r+0x32>
 8004c84:	2140      	movs	r1, #64	; 0x40
 8004c86:	f7ff feff 	bl	8004a88 <_malloc_r>
 8004c8a:	6028      	str	r0, [r5, #0]
 8004c8c:	6128      	str	r0, [r5, #16]
 8004c8e:	b920      	cbnz	r0, 8004c9a <_svfiprintf_r+0x2e>
 8004c90:	230c      	movs	r3, #12
 8004c92:	603b      	str	r3, [r7, #0]
 8004c94:	f04f 30ff 	mov.w	r0, #4294967295
 8004c98:	e0d1      	b.n	8004e3e <_svfiprintf_r+0x1d2>
 8004c9a:	2340      	movs	r3, #64	; 0x40
 8004c9c:	616b      	str	r3, [r5, #20]
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca2:	2320      	movs	r3, #32
 8004ca4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ca8:	2330      	movs	r3, #48	; 0x30
 8004caa:	f04f 0901 	mov.w	r9, #1
 8004cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8004cb2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004e58 <_svfiprintf_r+0x1ec>
 8004cb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004cba:	4623      	mov	r3, r4
 8004cbc:	469a      	mov	sl, r3
 8004cbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004cc2:	b10a      	cbz	r2, 8004cc8 <_svfiprintf_r+0x5c>
 8004cc4:	2a25      	cmp	r2, #37	; 0x25
 8004cc6:	d1f9      	bne.n	8004cbc <_svfiprintf_r+0x50>
 8004cc8:	ebba 0b04 	subs.w	fp, sl, r4
 8004ccc:	d00b      	beq.n	8004ce6 <_svfiprintf_r+0x7a>
 8004cce:	465b      	mov	r3, fp
 8004cd0:	4622      	mov	r2, r4
 8004cd2:	4629      	mov	r1, r5
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	f7ff ff6d 	bl	8004bb4 <__ssputs_r>
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f000 80aa 	beq.w	8004e34 <_svfiprintf_r+0x1c8>
 8004ce0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ce2:	445a      	add	r2, fp
 8004ce4:	9209      	str	r2, [sp, #36]	; 0x24
 8004ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 80a2 	beq.w	8004e34 <_svfiprintf_r+0x1c8>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cfa:	f10a 0a01 	add.w	sl, sl, #1
 8004cfe:	9304      	str	r3, [sp, #16]
 8004d00:	9307      	str	r3, [sp, #28]
 8004d02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d06:	931a      	str	r3, [sp, #104]	; 0x68
 8004d08:	4654      	mov	r4, sl
 8004d0a:	2205      	movs	r2, #5
 8004d0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d10:	4851      	ldr	r0, [pc, #324]	; (8004e58 <_svfiprintf_r+0x1ec>)
 8004d12:	f7ff fe49 	bl	80049a8 <memchr>
 8004d16:	9a04      	ldr	r2, [sp, #16]
 8004d18:	b9d8      	cbnz	r0, 8004d52 <_svfiprintf_r+0xe6>
 8004d1a:	06d0      	lsls	r0, r2, #27
 8004d1c:	bf44      	itt	mi
 8004d1e:	2320      	movmi	r3, #32
 8004d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d24:	0711      	lsls	r1, r2, #28
 8004d26:	bf44      	itt	mi
 8004d28:	232b      	movmi	r3, #43	; 0x2b
 8004d2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d2e:	f89a 3000 	ldrb.w	r3, [sl]
 8004d32:	2b2a      	cmp	r3, #42	; 0x2a
 8004d34:	d015      	beq.n	8004d62 <_svfiprintf_r+0xf6>
 8004d36:	4654      	mov	r4, sl
 8004d38:	2000      	movs	r0, #0
 8004d3a:	f04f 0c0a 	mov.w	ip, #10
 8004d3e:	9a07      	ldr	r2, [sp, #28]
 8004d40:	4621      	mov	r1, r4
 8004d42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004d46:	3b30      	subs	r3, #48	; 0x30
 8004d48:	2b09      	cmp	r3, #9
 8004d4a:	d94e      	bls.n	8004dea <_svfiprintf_r+0x17e>
 8004d4c:	b1b0      	cbz	r0, 8004d7c <_svfiprintf_r+0x110>
 8004d4e:	9207      	str	r2, [sp, #28]
 8004d50:	e014      	b.n	8004d7c <_svfiprintf_r+0x110>
 8004d52:	eba0 0308 	sub.w	r3, r0, r8
 8004d56:	fa09 f303 	lsl.w	r3, r9, r3
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	46a2      	mov	sl, r4
 8004d5e:	9304      	str	r3, [sp, #16]
 8004d60:	e7d2      	b.n	8004d08 <_svfiprintf_r+0x9c>
 8004d62:	9b03      	ldr	r3, [sp, #12]
 8004d64:	1d19      	adds	r1, r3, #4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	9103      	str	r1, [sp, #12]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	bfbb      	ittet	lt
 8004d6e:	425b      	neglt	r3, r3
 8004d70:	f042 0202 	orrlt.w	r2, r2, #2
 8004d74:	9307      	strge	r3, [sp, #28]
 8004d76:	9307      	strlt	r3, [sp, #28]
 8004d78:	bfb8      	it	lt
 8004d7a:	9204      	strlt	r2, [sp, #16]
 8004d7c:	7823      	ldrb	r3, [r4, #0]
 8004d7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004d80:	d10c      	bne.n	8004d9c <_svfiprintf_r+0x130>
 8004d82:	7863      	ldrb	r3, [r4, #1]
 8004d84:	2b2a      	cmp	r3, #42	; 0x2a
 8004d86:	d135      	bne.n	8004df4 <_svfiprintf_r+0x188>
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	3402      	adds	r4, #2
 8004d8c:	1d1a      	adds	r2, r3, #4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	9203      	str	r2, [sp, #12]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfb8      	it	lt
 8004d96:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d9a:	9305      	str	r3, [sp, #20]
 8004d9c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004e68 <_svfiprintf_r+0x1fc>
 8004da0:	2203      	movs	r2, #3
 8004da2:	4650      	mov	r0, sl
 8004da4:	7821      	ldrb	r1, [r4, #0]
 8004da6:	f7ff fdff 	bl	80049a8 <memchr>
 8004daa:	b140      	cbz	r0, 8004dbe <_svfiprintf_r+0x152>
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	eba0 000a 	sub.w	r0, r0, sl
 8004db2:	fa03 f000 	lsl.w	r0, r3, r0
 8004db6:	9b04      	ldr	r3, [sp, #16]
 8004db8:	3401      	adds	r4, #1
 8004dba:	4303      	orrs	r3, r0
 8004dbc:	9304      	str	r3, [sp, #16]
 8004dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dc2:	2206      	movs	r2, #6
 8004dc4:	4825      	ldr	r0, [pc, #148]	; (8004e5c <_svfiprintf_r+0x1f0>)
 8004dc6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004dca:	f7ff fded 	bl	80049a8 <memchr>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	d038      	beq.n	8004e44 <_svfiprintf_r+0x1d8>
 8004dd2:	4b23      	ldr	r3, [pc, #140]	; (8004e60 <_svfiprintf_r+0x1f4>)
 8004dd4:	bb1b      	cbnz	r3, 8004e1e <_svfiprintf_r+0x1b2>
 8004dd6:	9b03      	ldr	r3, [sp, #12]
 8004dd8:	3307      	adds	r3, #7
 8004dda:	f023 0307 	bic.w	r3, r3, #7
 8004dde:	3308      	adds	r3, #8
 8004de0:	9303      	str	r3, [sp, #12]
 8004de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004de4:	4433      	add	r3, r6
 8004de6:	9309      	str	r3, [sp, #36]	; 0x24
 8004de8:	e767      	b.n	8004cba <_svfiprintf_r+0x4e>
 8004dea:	460c      	mov	r4, r1
 8004dec:	2001      	movs	r0, #1
 8004dee:	fb0c 3202 	mla	r2, ip, r2, r3
 8004df2:	e7a5      	b.n	8004d40 <_svfiprintf_r+0xd4>
 8004df4:	2300      	movs	r3, #0
 8004df6:	f04f 0c0a 	mov.w	ip, #10
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	3401      	adds	r4, #1
 8004dfe:	9305      	str	r3, [sp, #20]
 8004e00:	4620      	mov	r0, r4
 8004e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e06:	3a30      	subs	r2, #48	; 0x30
 8004e08:	2a09      	cmp	r2, #9
 8004e0a:	d903      	bls.n	8004e14 <_svfiprintf_r+0x1a8>
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0c5      	beq.n	8004d9c <_svfiprintf_r+0x130>
 8004e10:	9105      	str	r1, [sp, #20]
 8004e12:	e7c3      	b.n	8004d9c <_svfiprintf_r+0x130>
 8004e14:	4604      	mov	r4, r0
 8004e16:	2301      	movs	r3, #1
 8004e18:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e1c:	e7f0      	b.n	8004e00 <_svfiprintf_r+0x194>
 8004e1e:	ab03      	add	r3, sp, #12
 8004e20:	9300      	str	r3, [sp, #0]
 8004e22:	462a      	mov	r2, r5
 8004e24:	4638      	mov	r0, r7
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <_svfiprintf_r+0x1f8>)
 8004e28:	a904      	add	r1, sp, #16
 8004e2a:	f3af 8000 	nop.w
 8004e2e:	1c42      	adds	r2, r0, #1
 8004e30:	4606      	mov	r6, r0
 8004e32:	d1d6      	bne.n	8004de2 <_svfiprintf_r+0x176>
 8004e34:	89ab      	ldrh	r3, [r5, #12]
 8004e36:	065b      	lsls	r3, r3, #25
 8004e38:	f53f af2c 	bmi.w	8004c94 <_svfiprintf_r+0x28>
 8004e3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004e3e:	b01d      	add	sp, #116	; 0x74
 8004e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e44:	ab03      	add	r3, sp, #12
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	462a      	mov	r2, r5
 8004e4a:	4638      	mov	r0, r7
 8004e4c:	4b05      	ldr	r3, [pc, #20]	; (8004e64 <_svfiprintf_r+0x1f8>)
 8004e4e:	a904      	add	r1, sp, #16
 8004e50:	f000 f87c 	bl	8004f4c <_printf_i>
 8004e54:	e7eb      	b.n	8004e2e <_svfiprintf_r+0x1c2>
 8004e56:	bf00      	nop
 8004e58:	08005324 	.word	0x08005324
 8004e5c:	0800532e 	.word	0x0800532e
 8004e60:	00000000 	.word	0x00000000
 8004e64:	08004bb5 	.word	0x08004bb5
 8004e68:	0800532a 	.word	0x0800532a

08004e6c <_printf_common>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	4616      	mov	r6, r2
 8004e72:	4699      	mov	r9, r3
 8004e74:	688a      	ldr	r2, [r1, #8]
 8004e76:	690b      	ldr	r3, [r1, #16]
 8004e78:	4607      	mov	r7, r0
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	bfb8      	it	lt
 8004e7e:	4613      	movlt	r3, r2
 8004e80:	6033      	str	r3, [r6, #0]
 8004e82:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e86:	460c      	mov	r4, r1
 8004e88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e8c:	b10a      	cbz	r2, 8004e92 <_printf_common+0x26>
 8004e8e:	3301      	adds	r3, #1
 8004e90:	6033      	str	r3, [r6, #0]
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	0699      	lsls	r1, r3, #26
 8004e96:	bf42      	ittt	mi
 8004e98:	6833      	ldrmi	r3, [r6, #0]
 8004e9a:	3302      	addmi	r3, #2
 8004e9c:	6033      	strmi	r3, [r6, #0]
 8004e9e:	6825      	ldr	r5, [r4, #0]
 8004ea0:	f015 0506 	ands.w	r5, r5, #6
 8004ea4:	d106      	bne.n	8004eb4 <_printf_common+0x48>
 8004ea6:	f104 0a19 	add.w	sl, r4, #25
 8004eaa:	68e3      	ldr	r3, [r4, #12]
 8004eac:	6832      	ldr	r2, [r6, #0]
 8004eae:	1a9b      	subs	r3, r3, r2
 8004eb0:	42ab      	cmp	r3, r5
 8004eb2:	dc28      	bgt.n	8004f06 <_printf_common+0x9a>
 8004eb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eb8:	1e13      	subs	r3, r2, #0
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	bf18      	it	ne
 8004ebe:	2301      	movne	r3, #1
 8004ec0:	0692      	lsls	r2, r2, #26
 8004ec2:	d42d      	bmi.n	8004f20 <_printf_common+0xb4>
 8004ec4:	4649      	mov	r1, r9
 8004ec6:	4638      	mov	r0, r7
 8004ec8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ecc:	47c0      	blx	r8
 8004ece:	3001      	adds	r0, #1
 8004ed0:	d020      	beq.n	8004f14 <_printf_common+0xa8>
 8004ed2:	6823      	ldr	r3, [r4, #0]
 8004ed4:	68e5      	ldr	r5, [r4, #12]
 8004ed6:	f003 0306 	and.w	r3, r3, #6
 8004eda:	2b04      	cmp	r3, #4
 8004edc:	bf18      	it	ne
 8004ede:	2500      	movne	r5, #0
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	f04f 0600 	mov.w	r6, #0
 8004ee6:	68a3      	ldr	r3, [r4, #8]
 8004ee8:	bf08      	it	eq
 8004eea:	1aad      	subeq	r5, r5, r2
 8004eec:	6922      	ldr	r2, [r4, #16]
 8004eee:	bf08      	it	eq
 8004ef0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	bfc4      	itt	gt
 8004ef8:	1a9b      	subgt	r3, r3, r2
 8004efa:	18ed      	addgt	r5, r5, r3
 8004efc:	341a      	adds	r4, #26
 8004efe:	42b5      	cmp	r5, r6
 8004f00:	d11a      	bne.n	8004f38 <_printf_common+0xcc>
 8004f02:	2000      	movs	r0, #0
 8004f04:	e008      	b.n	8004f18 <_printf_common+0xac>
 8004f06:	2301      	movs	r3, #1
 8004f08:	4652      	mov	r2, sl
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	4638      	mov	r0, r7
 8004f0e:	47c0      	blx	r8
 8004f10:	3001      	adds	r0, #1
 8004f12:	d103      	bne.n	8004f1c <_printf_common+0xb0>
 8004f14:	f04f 30ff 	mov.w	r0, #4294967295
 8004f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1c:	3501      	adds	r5, #1
 8004f1e:	e7c4      	b.n	8004eaa <_printf_common+0x3e>
 8004f20:	2030      	movs	r0, #48	; 0x30
 8004f22:	18e1      	adds	r1, r4, r3
 8004f24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f2e:	4422      	add	r2, r4
 8004f30:	3302      	adds	r3, #2
 8004f32:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f36:	e7c5      	b.n	8004ec4 <_printf_common+0x58>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4622      	mov	r2, r4
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	4638      	mov	r0, r7
 8004f40:	47c0      	blx	r8
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0e6      	beq.n	8004f14 <_printf_common+0xa8>
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7d9      	b.n	8004efe <_printf_common+0x92>
	...

08004f4c <_printf_i>:
 8004f4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f50:	460c      	mov	r4, r1
 8004f52:	7e27      	ldrb	r7, [r4, #24]
 8004f54:	4691      	mov	r9, r2
 8004f56:	2f78      	cmp	r7, #120	; 0x78
 8004f58:	4680      	mov	r8, r0
 8004f5a:	469a      	mov	sl, r3
 8004f5c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004f5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f62:	d807      	bhi.n	8004f74 <_printf_i+0x28>
 8004f64:	2f62      	cmp	r7, #98	; 0x62
 8004f66:	d80a      	bhi.n	8004f7e <_printf_i+0x32>
 8004f68:	2f00      	cmp	r7, #0
 8004f6a:	f000 80d9 	beq.w	8005120 <_printf_i+0x1d4>
 8004f6e:	2f58      	cmp	r7, #88	; 0x58
 8004f70:	f000 80a4 	beq.w	80050bc <_printf_i+0x170>
 8004f74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004f78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f7c:	e03a      	b.n	8004ff4 <_printf_i+0xa8>
 8004f7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f82:	2b15      	cmp	r3, #21
 8004f84:	d8f6      	bhi.n	8004f74 <_printf_i+0x28>
 8004f86:	a001      	add	r0, pc, #4	; (adr r0, 8004f8c <_printf_i+0x40>)
 8004f88:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004ff9 	.word	0x08004ff9
 8004f94:	08004f75 	.word	0x08004f75
 8004f98:	08004f75 	.word	0x08004f75
 8004f9c:	08004f75 	.word	0x08004f75
 8004fa0:	08004f75 	.word	0x08004f75
 8004fa4:	08004ff9 	.word	0x08004ff9
 8004fa8:	08004f75 	.word	0x08004f75
 8004fac:	08004f75 	.word	0x08004f75
 8004fb0:	08004f75 	.word	0x08004f75
 8004fb4:	08004f75 	.word	0x08004f75
 8004fb8:	08005107 	.word	0x08005107
 8004fbc:	08005029 	.word	0x08005029
 8004fc0:	080050e9 	.word	0x080050e9
 8004fc4:	08004f75 	.word	0x08004f75
 8004fc8:	08004f75 	.word	0x08004f75
 8004fcc:	08005129 	.word	0x08005129
 8004fd0:	08004f75 	.word	0x08004f75
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004f75 	.word	0x08004f75
 8004fdc:	08004f75 	.word	0x08004f75
 8004fe0:	080050f1 	.word	0x080050f1
 8004fe4:	680b      	ldr	r3, [r1, #0]
 8004fe6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004fea:	1d1a      	adds	r2, r3, #4
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	600a      	str	r2, [r1, #0]
 8004ff0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e0a4      	b.n	8005142 <_printf_i+0x1f6>
 8004ff8:	6825      	ldr	r5, [r4, #0]
 8004ffa:	6808      	ldr	r0, [r1, #0]
 8004ffc:	062e      	lsls	r6, r5, #24
 8004ffe:	f100 0304 	add.w	r3, r0, #4
 8005002:	d50a      	bpl.n	800501a <_printf_i+0xce>
 8005004:	6805      	ldr	r5, [r0, #0]
 8005006:	600b      	str	r3, [r1, #0]
 8005008:	2d00      	cmp	r5, #0
 800500a:	da03      	bge.n	8005014 <_printf_i+0xc8>
 800500c:	232d      	movs	r3, #45	; 0x2d
 800500e:	426d      	negs	r5, r5
 8005010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005014:	230a      	movs	r3, #10
 8005016:	485e      	ldr	r0, [pc, #376]	; (8005190 <_printf_i+0x244>)
 8005018:	e019      	b.n	800504e <_printf_i+0x102>
 800501a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800501e:	6805      	ldr	r5, [r0, #0]
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	bf18      	it	ne
 8005024:	b22d      	sxthne	r5, r5
 8005026:	e7ef      	b.n	8005008 <_printf_i+0xbc>
 8005028:	680b      	ldr	r3, [r1, #0]
 800502a:	6825      	ldr	r5, [r4, #0]
 800502c:	1d18      	adds	r0, r3, #4
 800502e:	6008      	str	r0, [r1, #0]
 8005030:	0628      	lsls	r0, r5, #24
 8005032:	d501      	bpl.n	8005038 <_printf_i+0xec>
 8005034:	681d      	ldr	r5, [r3, #0]
 8005036:	e002      	b.n	800503e <_printf_i+0xf2>
 8005038:	0669      	lsls	r1, r5, #25
 800503a:	d5fb      	bpl.n	8005034 <_printf_i+0xe8>
 800503c:	881d      	ldrh	r5, [r3, #0]
 800503e:	2f6f      	cmp	r7, #111	; 0x6f
 8005040:	bf0c      	ite	eq
 8005042:	2308      	moveq	r3, #8
 8005044:	230a      	movne	r3, #10
 8005046:	4852      	ldr	r0, [pc, #328]	; (8005190 <_printf_i+0x244>)
 8005048:	2100      	movs	r1, #0
 800504a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800504e:	6866      	ldr	r6, [r4, #4]
 8005050:	2e00      	cmp	r6, #0
 8005052:	bfa8      	it	ge
 8005054:	6821      	ldrge	r1, [r4, #0]
 8005056:	60a6      	str	r6, [r4, #8]
 8005058:	bfa4      	itt	ge
 800505a:	f021 0104 	bicge.w	r1, r1, #4
 800505e:	6021      	strge	r1, [r4, #0]
 8005060:	b90d      	cbnz	r5, 8005066 <_printf_i+0x11a>
 8005062:	2e00      	cmp	r6, #0
 8005064:	d04d      	beq.n	8005102 <_printf_i+0x1b6>
 8005066:	4616      	mov	r6, r2
 8005068:	fbb5 f1f3 	udiv	r1, r5, r3
 800506c:	fb03 5711 	mls	r7, r3, r1, r5
 8005070:	5dc7      	ldrb	r7, [r0, r7]
 8005072:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005076:	462f      	mov	r7, r5
 8005078:	42bb      	cmp	r3, r7
 800507a:	460d      	mov	r5, r1
 800507c:	d9f4      	bls.n	8005068 <_printf_i+0x11c>
 800507e:	2b08      	cmp	r3, #8
 8005080:	d10b      	bne.n	800509a <_printf_i+0x14e>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	07df      	lsls	r7, r3, #31
 8005086:	d508      	bpl.n	800509a <_printf_i+0x14e>
 8005088:	6923      	ldr	r3, [r4, #16]
 800508a:	6861      	ldr	r1, [r4, #4]
 800508c:	4299      	cmp	r1, r3
 800508e:	bfde      	ittt	le
 8005090:	2330      	movle	r3, #48	; 0x30
 8005092:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005096:	f106 36ff 	addle.w	r6, r6, #4294967295
 800509a:	1b92      	subs	r2, r2, r6
 800509c:	6122      	str	r2, [r4, #16]
 800509e:	464b      	mov	r3, r9
 80050a0:	4621      	mov	r1, r4
 80050a2:	4640      	mov	r0, r8
 80050a4:	f8cd a000 	str.w	sl, [sp]
 80050a8:	aa03      	add	r2, sp, #12
 80050aa:	f7ff fedf 	bl	8004e6c <_printf_common>
 80050ae:	3001      	adds	r0, #1
 80050b0:	d14c      	bne.n	800514c <_printf_i+0x200>
 80050b2:	f04f 30ff 	mov.w	r0, #4294967295
 80050b6:	b004      	add	sp, #16
 80050b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050bc:	4834      	ldr	r0, [pc, #208]	; (8005190 <_printf_i+0x244>)
 80050be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050c2:	680e      	ldr	r6, [r1, #0]
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80050ca:	061f      	lsls	r7, r3, #24
 80050cc:	600e      	str	r6, [r1, #0]
 80050ce:	d514      	bpl.n	80050fa <_printf_i+0x1ae>
 80050d0:	07d9      	lsls	r1, r3, #31
 80050d2:	bf44      	itt	mi
 80050d4:	f043 0320 	orrmi.w	r3, r3, #32
 80050d8:	6023      	strmi	r3, [r4, #0]
 80050da:	b91d      	cbnz	r5, 80050e4 <_printf_i+0x198>
 80050dc:	6823      	ldr	r3, [r4, #0]
 80050de:	f023 0320 	bic.w	r3, r3, #32
 80050e2:	6023      	str	r3, [r4, #0]
 80050e4:	2310      	movs	r3, #16
 80050e6:	e7af      	b.n	8005048 <_printf_i+0xfc>
 80050e8:	6823      	ldr	r3, [r4, #0]
 80050ea:	f043 0320 	orr.w	r3, r3, #32
 80050ee:	6023      	str	r3, [r4, #0]
 80050f0:	2378      	movs	r3, #120	; 0x78
 80050f2:	4828      	ldr	r0, [pc, #160]	; (8005194 <_printf_i+0x248>)
 80050f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050f8:	e7e3      	b.n	80050c2 <_printf_i+0x176>
 80050fa:	065e      	lsls	r6, r3, #25
 80050fc:	bf48      	it	mi
 80050fe:	b2ad      	uxthmi	r5, r5
 8005100:	e7e6      	b.n	80050d0 <_printf_i+0x184>
 8005102:	4616      	mov	r6, r2
 8005104:	e7bb      	b.n	800507e <_printf_i+0x132>
 8005106:	680b      	ldr	r3, [r1, #0]
 8005108:	6826      	ldr	r6, [r4, #0]
 800510a:	1d1d      	adds	r5, r3, #4
 800510c:	6960      	ldr	r0, [r4, #20]
 800510e:	600d      	str	r5, [r1, #0]
 8005110:	0635      	lsls	r5, r6, #24
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	d501      	bpl.n	800511a <_printf_i+0x1ce>
 8005116:	6018      	str	r0, [r3, #0]
 8005118:	e002      	b.n	8005120 <_printf_i+0x1d4>
 800511a:	0671      	lsls	r1, r6, #25
 800511c:	d5fb      	bpl.n	8005116 <_printf_i+0x1ca>
 800511e:	8018      	strh	r0, [r3, #0]
 8005120:	2300      	movs	r3, #0
 8005122:	4616      	mov	r6, r2
 8005124:	6123      	str	r3, [r4, #16]
 8005126:	e7ba      	b.n	800509e <_printf_i+0x152>
 8005128:	680b      	ldr	r3, [r1, #0]
 800512a:	1d1a      	adds	r2, r3, #4
 800512c:	600a      	str	r2, [r1, #0]
 800512e:	681e      	ldr	r6, [r3, #0]
 8005130:	2100      	movs	r1, #0
 8005132:	4630      	mov	r0, r6
 8005134:	6862      	ldr	r2, [r4, #4]
 8005136:	f7ff fc37 	bl	80049a8 <memchr>
 800513a:	b108      	cbz	r0, 8005140 <_printf_i+0x1f4>
 800513c:	1b80      	subs	r0, r0, r6
 800513e:	6060      	str	r0, [r4, #4]
 8005140:	6863      	ldr	r3, [r4, #4]
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	2300      	movs	r3, #0
 8005146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800514a:	e7a8      	b.n	800509e <_printf_i+0x152>
 800514c:	4632      	mov	r2, r6
 800514e:	4649      	mov	r1, r9
 8005150:	4640      	mov	r0, r8
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	47d0      	blx	sl
 8005156:	3001      	adds	r0, #1
 8005158:	d0ab      	beq.n	80050b2 <_printf_i+0x166>
 800515a:	6823      	ldr	r3, [r4, #0]
 800515c:	079b      	lsls	r3, r3, #30
 800515e:	d413      	bmi.n	8005188 <_printf_i+0x23c>
 8005160:	68e0      	ldr	r0, [r4, #12]
 8005162:	9b03      	ldr	r3, [sp, #12]
 8005164:	4298      	cmp	r0, r3
 8005166:	bfb8      	it	lt
 8005168:	4618      	movlt	r0, r3
 800516a:	e7a4      	b.n	80050b6 <_printf_i+0x16a>
 800516c:	2301      	movs	r3, #1
 800516e:	4632      	mov	r2, r6
 8005170:	4649      	mov	r1, r9
 8005172:	4640      	mov	r0, r8
 8005174:	47d0      	blx	sl
 8005176:	3001      	adds	r0, #1
 8005178:	d09b      	beq.n	80050b2 <_printf_i+0x166>
 800517a:	3501      	adds	r5, #1
 800517c:	68e3      	ldr	r3, [r4, #12]
 800517e:	9903      	ldr	r1, [sp, #12]
 8005180:	1a5b      	subs	r3, r3, r1
 8005182:	42ab      	cmp	r3, r5
 8005184:	dcf2      	bgt.n	800516c <_printf_i+0x220>
 8005186:	e7eb      	b.n	8005160 <_printf_i+0x214>
 8005188:	2500      	movs	r5, #0
 800518a:	f104 0619 	add.w	r6, r4, #25
 800518e:	e7f5      	b.n	800517c <_printf_i+0x230>
 8005190:	08005335 	.word	0x08005335
 8005194:	08005346 	.word	0x08005346

08005198 <memmove>:
 8005198:	4288      	cmp	r0, r1
 800519a:	b510      	push	{r4, lr}
 800519c:	eb01 0402 	add.w	r4, r1, r2
 80051a0:	d902      	bls.n	80051a8 <memmove+0x10>
 80051a2:	4284      	cmp	r4, r0
 80051a4:	4623      	mov	r3, r4
 80051a6:	d807      	bhi.n	80051b8 <memmove+0x20>
 80051a8:	1e43      	subs	r3, r0, #1
 80051aa:	42a1      	cmp	r1, r4
 80051ac:	d008      	beq.n	80051c0 <memmove+0x28>
 80051ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051b6:	e7f8      	b.n	80051aa <memmove+0x12>
 80051b8:	4601      	mov	r1, r0
 80051ba:	4402      	add	r2, r0
 80051bc:	428a      	cmp	r2, r1
 80051be:	d100      	bne.n	80051c2 <memmove+0x2a>
 80051c0:	bd10      	pop	{r4, pc}
 80051c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051ca:	e7f7      	b.n	80051bc <memmove+0x24>

080051cc <_realloc_r>:
 80051cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ce:	4607      	mov	r7, r0
 80051d0:	4614      	mov	r4, r2
 80051d2:	460e      	mov	r6, r1
 80051d4:	b921      	cbnz	r1, 80051e0 <_realloc_r+0x14>
 80051d6:	4611      	mov	r1, r2
 80051d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80051dc:	f7ff bc54 	b.w	8004a88 <_malloc_r>
 80051e0:	b922      	cbnz	r2, 80051ec <_realloc_r+0x20>
 80051e2:	f7ff fc05 	bl	80049f0 <_free_r>
 80051e6:	4625      	mov	r5, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ec:	f000 f814 	bl	8005218 <_malloc_usable_size_r>
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d20f      	bcs.n	8005214 <_realloc_r+0x48>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4638      	mov	r0, r7
 80051f8:	f7ff fc46 	bl	8004a88 <_malloc_r>
 80051fc:	4605      	mov	r5, r0
 80051fe:	2800      	cmp	r0, #0
 8005200:	d0f2      	beq.n	80051e8 <_realloc_r+0x1c>
 8005202:	4631      	mov	r1, r6
 8005204:	4622      	mov	r2, r4
 8005206:	f7ff fbdd 	bl	80049c4 <memcpy>
 800520a:	4631      	mov	r1, r6
 800520c:	4638      	mov	r0, r7
 800520e:	f7ff fbef 	bl	80049f0 <_free_r>
 8005212:	e7e9      	b.n	80051e8 <_realloc_r+0x1c>
 8005214:	4635      	mov	r5, r6
 8005216:	e7e7      	b.n	80051e8 <_realloc_r+0x1c>

08005218 <_malloc_usable_size_r>:
 8005218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521c:	1f18      	subs	r0, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	bfbc      	itt	lt
 8005222:	580b      	ldrlt	r3, [r1, r0]
 8005224:	18c0      	addlt	r0, r0, r3
 8005226:	4770      	bx	lr

08005228 <_init>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr

08005234 <_fini>:
 8005234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005236:	bf00      	nop
 8005238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800523a:	bc08      	pop	{r3}
 800523c:	469e      	mov	lr, r3
 800523e:	4770      	bx	lr
