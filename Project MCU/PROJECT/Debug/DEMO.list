
DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080043dc  080043dc  000143dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004434  08004434  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004434  08004434  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004434  08004434  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004434  08004434  00014434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004438  08004438  00014438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800443c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000010  0800444c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  0800444c  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014741  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb4  00000000  00000000  0003477a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001230  00000000  00000000  00037430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f8  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019519  00000000  00000000  00039758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ff2  00000000  00000000  00052c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fac1  00000000  00000000  00068c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004aec  00000000  00000000  000f8778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080043c4 	.word	0x080043c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080043c4 	.word	0x080043c4

0800014c <LED_RED>:
#include "main.h"
void Init_Led(void){
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
}
void LED_RED(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8000150:	2201      	movs	r2, #1
 8000152:	2110      	movs	r1, #16
 8000154:	4805      	ldr	r0, [pc, #20]	; (800016c <LED_RED+0x20>)
 8000156:	f001 f967 	bl	8001428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800015a:	2201      	movs	r2, #1
 800015c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000160:	4802      	ldr	r0, [pc, #8]	; (800016c <LED_RED+0x20>)
 8000162:	f001 f961 	bl	8001428 <HAL_GPIO_WritePin>
}
 8000166:	bf00      	nop
 8000168:	bd80      	pop	{r7, pc}
 800016a:	bf00      	nop
 800016c:	40010c00 	.word	0x40010c00

08000170 <LED_YELLOW>:
void LED_YELLOW(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8000174:	2200      	movs	r2, #0
 8000176:	2110      	movs	r1, #16
 8000178:	4805      	ldr	r0, [pc, #20]	; (8000190 <LED_YELLOW+0x20>)
 800017a:	f001 f955 	bl	8001428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 800017e:	2201      	movs	r2, #1
 8000180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000184:	4802      	ldr	r0, [pc, #8]	; (8000190 <LED_YELLOW+0x20>)
 8000186:	f001 f94f 	bl	8001428 <HAL_GPIO_WritePin>
}
 800018a:	bf00      	nop
 800018c:	bd80      	pop	{r7, pc}
 800018e:	bf00      	nop
 8000190:	40010c00 	.word	0x40010c00

08000194 <LED_GREEN>:
void LED_GREEN(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8000198:	2201      	movs	r2, #1
 800019a:	2110      	movs	r1, #16
 800019c:	4805      	ldr	r0, [pc, #20]	; (80001b4 <LED_GREEN+0x20>)
 800019e:	f001 f943 	bl	8001428 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 80001a2:	2200      	movs	r2, #0
 80001a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001a8:	4802      	ldr	r0, [pc, #8]	; (80001b4 <LED_GREEN+0x20>)
 80001aa:	f001 f93d 	bl	8001428 <HAL_GPIO_WritePin>
}
 80001ae:	bf00      	nop
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40010c00 	.word	0x40010c00

080001b8 <fsm_run>:
#include "global.h"
#include "LED.h"
#include "i2c-lcd.h"
#include "software_timer.h"

void fsm_run(void){
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	switch(status){
 80001bc:	4b1f      	ldr	r3, [pc, #124]	; (800023c <fsm_run+0x84>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	2b02      	cmp	r3, #2
 80001c2:	d023      	beq.n	800020c <fsm_run+0x54>
 80001c4:	2b02      	cmp	r3, #2
 80001c6:	dc37      	bgt.n	8000238 <fsm_run+0x80>
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d002      	beq.n	80001d2 <fsm_run+0x1a>
 80001cc:	2b01      	cmp	r3, #1
 80001ce:	d00a      	beq.n	80001e6 <fsm_run+0x2e>
			status = WAITING;
		}
		break;
	}

}
 80001d0:	e032      	b.n	8000238 <fsm_run+0x80>
		LED_YELLOW();
 80001d2:	f7ff ffcd 	bl	8000170 <LED_YELLOW>
		lcd_goto_XY(1, 5);
 80001d6:	2105      	movs	r1, #5
 80001d8:	2001      	movs	r0, #1
 80001da:	f000 f8dc 	bl	8000396 <lcd_goto_XY>
		lcd_send_string("WAITING");
 80001de:	4818      	ldr	r0, [pc, #96]	; (8000240 <fsm_run+0x88>)
 80001e0:	f000 f8c4 	bl	800036c <lcd_send_string>
		break;
 80001e4:	e028      	b.n	8000238 <fsm_run+0x80>
		LED_GREEN();
 80001e6:	f7ff ffd5 	bl	8000194 <LED_GREEN>
		lcd_goto_XY(1, 5);
 80001ea:	2105      	movs	r1, #5
 80001ec:	2001      	movs	r0, #1
 80001ee:	f000 f8d2 	bl	8000396 <lcd_goto_XY>
		lcd_send_string("WELCOME");
 80001f2:	4814      	ldr	r0, [pc, #80]	; (8000244 <fsm_run+0x8c>)
 80001f4:	f000 f8ba 	bl	800036c <lcd_send_string>
		if(timer0_flag == 1){
 80001f8:	4b13      	ldr	r3, [pc, #76]	; (8000248 <fsm_run+0x90>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d118      	bne.n	8000232 <fsm_run+0x7a>
			lcd_init();
 8000200:	f000 f886 	bl	8000310 <lcd_init>
			status = WAITING;
 8000204:	4b0d      	ldr	r3, [pc, #52]	; (800023c <fsm_run+0x84>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
		break;
 800020a:	e012      	b.n	8000232 <fsm_run+0x7a>
		LED_RED();
 800020c:	f7ff ff9e 	bl	800014c <LED_RED>
		lcd_goto_XY(1, 5);
 8000210:	2105      	movs	r1, #5
 8000212:	2001      	movs	r0, #1
 8000214:	f000 f8bf 	bl	8000396 <lcd_goto_XY>
		lcd_send_string("INVALID");
 8000218:	480c      	ldr	r0, [pc, #48]	; (800024c <fsm_run+0x94>)
 800021a:	f000 f8a7 	bl	800036c <lcd_send_string>
		if(timer0_flag == 1){
 800021e:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <fsm_run+0x90>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d107      	bne.n	8000236 <fsm_run+0x7e>
			lcd_init();
 8000226:	f000 f873 	bl	8000310 <lcd_init>
			status = WAITING;
 800022a:	4b04      	ldr	r3, [pc, #16]	; (800023c <fsm_run+0x84>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
		break;
 8000230:	e001      	b.n	8000236 <fsm_run+0x7e>
		break;
 8000232:	bf00      	nop
 8000234:	e000      	b.n	8000238 <fsm_run+0x80>
		break;
 8000236:	bf00      	nop
}
 8000238:	bf00      	nop
 800023a:	bd80      	pop	{r7, pc}
 800023c:	2000002c 	.word	0x2000002c
 8000240:	080043dc 	.word	0x080043dc
 8000244:	080043e4 	.word	0x080043e4
 8000248:	20000030 	.word	0x20000030
 800024c:	080043ec 	.word	0x080043ec

08000250 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b086      	sub	sp, #24
 8000254:	af02      	add	r7, sp, #8
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	f023 030f 	bic.w	r3, r3, #15
 8000260:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	011b      	lsls	r3, r3, #4
 8000266:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000268:	7bfb      	ldrb	r3, [r7, #15]
 800026a:	f043 030c 	orr.w	r3, r3, #12
 800026e:	b2db      	uxtb	r3, r3
 8000270:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000272:	7bfb      	ldrb	r3, [r7, #15]
 8000274:	f043 0308 	orr.w	r3, r3, #8
 8000278:	b2db      	uxtb	r3, r3
 800027a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800027c:	7bbb      	ldrb	r3, [r7, #14]
 800027e:	f043 030c 	orr.w	r3, r3, #12
 8000282:	b2db      	uxtb	r3, r3
 8000284:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000286:	7bbb      	ldrb	r3, [r7, #14]
 8000288:	f043 0308 	orr.w	r3, r3, #8
 800028c:	b2db      	uxtb	r3, r3
 800028e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000290:	f107 0208 	add.w	r2, r7, #8
 8000294:	2364      	movs	r3, #100	; 0x64
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2304      	movs	r3, #4
 800029a:	2142      	movs	r1, #66	; 0x42
 800029c:	4803      	ldr	r0, [pc, #12]	; (80002ac <lcd_send_cmd+0x5c>)
 800029e:	f001 fa41 	bl	8001724 <HAL_I2C_Master_Transmit>
}
 80002a2:	bf00      	nop
 80002a4:	3710      	adds	r7, #16
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	20000044 	.word	0x20000044

080002b0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b086      	sub	sp, #24
 80002b4:	af02      	add	r7, sp, #8
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80002ba:	79fb      	ldrb	r3, [r7, #7]
 80002bc:	f023 030f 	bic.w	r3, r3, #15
 80002c0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	011b      	lsls	r3, r3, #4
 80002c6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	f043 030d 	orr.w	r3, r3, #13
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80002d2:	7bfb      	ldrb	r3, [r7, #15]
 80002d4:	f043 0309 	orr.w	r3, r3, #9
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80002dc:	7bbb      	ldrb	r3, [r7, #14]
 80002de:	f043 030d 	orr.w	r3, r3, #13
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	f043 0309 	orr.w	r3, r3, #9
 80002ec:	b2db      	uxtb	r3, r3
 80002ee:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f0:	f107 0208 	add.w	r2, r7, #8
 80002f4:	2364      	movs	r3, #100	; 0x64
 80002f6:	9300      	str	r3, [sp, #0]
 80002f8:	2304      	movs	r3, #4
 80002fa:	2142      	movs	r1, #66	; 0x42
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_data+0x5c>)
 80002fe:	f001 fa11 	bl	8001724 <HAL_I2C_Master_Transmit>
}
 8000302:	bf00      	nop
 8000304:	3710      	adds	r7, #16
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	20000044 	.word	0x20000044

08000310 <lcd_init>:

void lcd_init (void) {
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000314:	2033      	movs	r0, #51	; 0x33
 8000316:	f7ff ff9b 	bl	8000250 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800031a:	2032      	movs	r0, #50	; 0x32
 800031c:	f7ff ff98 	bl	8000250 <lcd_send_cmd>
	HAL_Delay(50);
 8000320:	2032      	movs	r0, #50	; 0x32
 8000322:	f000 fd19 	bl	8000d58 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000326:	2028      	movs	r0, #40	; 0x28
 8000328:	f7ff ff92 	bl	8000250 <lcd_send_cmd>
	HAL_Delay(50);
 800032c:	2032      	movs	r0, #50	; 0x32
 800032e:	f000 fd13 	bl	8000d58 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000332:	2001      	movs	r0, #1
 8000334:	f7ff ff8c 	bl	8000250 <lcd_send_cmd>
	HAL_Delay(50);
 8000338:	2032      	movs	r0, #50	; 0x32
 800033a:	f000 fd0d 	bl	8000d58 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800033e:	2006      	movs	r0, #6
 8000340:	f7ff ff86 	bl	8000250 <lcd_send_cmd>
	HAL_Delay(50);
 8000344:	2032      	movs	r0, #50	; 0x32
 8000346:	f000 fd07 	bl	8000d58 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 800034a:	200c      	movs	r0, #12
 800034c:	f7ff ff80 	bl	8000250 <lcd_send_cmd>
	HAL_Delay(50);
 8000350:	2032      	movs	r0, #50	; 0x32
 8000352:	f000 fd01 	bl	8000d58 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000356:	2002      	movs	r0, #2
 8000358:	f7ff ff7a 	bl	8000250 <lcd_send_cmd>
	HAL_Delay(50);
 800035c:	2032      	movs	r0, #50	; 0x32
 800035e:	f000 fcfb 	bl	8000d58 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000362:	2080      	movs	r0, #128	; 0x80
 8000364:	f7ff ff74 	bl	8000250 <lcd_send_cmd>
}
 8000368:	bf00      	nop
 800036a:	bd80      	pop	{r7, pc}

0800036c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000374:	e006      	b.n	8000384 <lcd_send_string+0x18>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	1c5a      	adds	r2, r3, #1
 800037a:	607a      	str	r2, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	4618      	mov	r0, r3
 8000380:	f7ff ff96 	bl	80002b0 <lcd_send_data>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d1f4      	bne.n	8000376 <lcd_send_string+0xa>
}
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}

08000396 <lcd_goto_XY>:
{
	lcd_send_cmd (0x01); //clear display
}

void lcd_goto_XY (int row, int col)
{
 8000396:	b580      	push	{r7, lr}
 8000398:	b084      	sub	sp, #16
 800039a:	af00      	add	r7, sp, #0
 800039c:	6078      	str	r0, [r7, #4]
 800039e:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	2b01      	cmp	r3, #1
 80003a4:	d108      	bne.n	80003b8 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	b2da      	uxtb	r2, r3
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	4413      	add	r3, r2
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	337f      	adds	r3, #127	; 0x7f
 80003b4:	73fb      	strb	r3, [r7, #15]
 80003b6:	e008      	b.n	80003ca <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	b2db      	uxtb	r3, r3
 80003bc:	3340      	adds	r3, #64	; 0x40
 80003be:	b2db      	uxtb	r3, r3
 80003c0:	b25b      	sxtb	r3, r3
 80003c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003c6:	b25b      	sxtb	r3, r3
 80003c8:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 80003ca:	7bfb      	ldrb	r3, [r7, #15]
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff3f 	bl	8000250 <lcd_send_cmd>
}
 80003d2:	bf00      	nop
 80003d4:	3710      	adds	r7, #16
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e0:	f000 fc58 	bl	8000c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003e4:	f000 f82e 	bl	8000444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e8:	f000 f978 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80003ec:	f000 f884 	bl	80004f8 <MX_I2C1_Init>
  MX_TIM1_Init();
 80003f0:	f000 f8fa 	bl	80005e8 <MX_TIM1_Init>
  MX_RTC_Init();
 80003f4:	f000 f8ae 	bl	8000554 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80003f8:	f000 f946 	bl	8000688 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 80003fc:	480c      	ldr	r0, [pc, #48]	; (8000430 <main+0x54>)
 80003fe:	f002 fe8b 	bl	8003118 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8000402:	f7ff ff85 	bl	8000310 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = WAITING;
 8000406:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <main+0x58>)
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2,&temp,1);
 800040c:	2201      	movs	r2, #1
 800040e:	490a      	ldr	r1, [pc, #40]	; (8000438 <main+0x5c>)
 8000410:	480a      	ldr	r0, [pc, #40]	; (800043c <main+0x60>)
 8000412:	f003 fa73 	bl	80038fc <HAL_UART_Receive_IT>
  //uint8_t n = 3;

  while (1)
  {
  if (buffer_flag == 1) {
 8000416:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <main+0x64>)
 8000418:	781b      	ldrb	r3, [r3, #0]
 800041a:	2b01      	cmp	r3, #1
 800041c:	d104      	bne.n	8000428 <main+0x4c>
	  command_parser_fsm();
 800041e:	f000 fbdb 	bl	8000bd8 <command_parser_fsm>
	  buffer_flag = 0;
 8000422:	4b07      	ldr	r3, [pc, #28]	; (8000440 <main+0x64>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
  }
  fsm_run();
 8000428:	f7ff fec6 	bl	80001b8 <fsm_run>
  if (buffer_flag == 1) {
 800042c:	e7f3      	b.n	8000416 <main+0x3a>
 800042e:	bf00      	nop
 8000430:	200000ac 	.word	0x200000ac
 8000434:	2000002c 	.word	0x2000002c
 8000438:	20000040 	.word	0x20000040
 800043c:	200000f4 	.word	0x200000f4
 8000440:	20000041 	.word	0x20000041

08000444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b094      	sub	sp, #80	; 0x50
 8000448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800044e:	2228      	movs	r2, #40	; 0x28
 8000450:	2100      	movs	r1, #0
 8000452:	4618      	mov	r0, r3
 8000454:	f003 ffae 	bl	80043b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000458:	f107 0314 	add.w	r3, r7, #20
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000468:	1d3b      	adds	r3, r7, #4
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000474:	2306      	movs	r3, #6
 8000476:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000478:	2301      	movs	r3, #1
 800047a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	2301      	movs	r3, #1
 800047e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000480:	2310      	movs	r3, #16
 8000482:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000484:	2302      	movs	r3, #2
 8000486:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000488:	2300      	movs	r3, #0
 800048a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800048c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000490:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000496:	4618      	mov	r0, r3
 8000498:	f001 fca8 	bl	8001dec <HAL_RCC_OscConfig>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80004a2:	f000 f9bf 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a6:	230f      	movs	r3, #15
 80004a8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004aa:	2302      	movs	r3, #2
 80004ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004bc:	f107 0314 	add.w	r3, r7, #20
 80004c0:	2102      	movs	r1, #2
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 ff12 	bl	80022ec <HAL_RCC_ClockConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80004ce:	f000 f9a9 	bl	8000824 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80004d2:	2301      	movs	r3, #1
 80004d4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80004d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80004da:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	4618      	mov	r0, r3
 80004e0:	f002 f892 	bl	8002608 <HAL_RCCEx_PeriphCLKConfig>
 80004e4:	4603      	mov	r3, r0
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d001      	beq.n	80004ee <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80004ea:	f000 f99b 	bl	8000824 <Error_Handler>
  }
}
 80004ee:	bf00      	nop
 80004f0:	3750      	adds	r7, #80	; 0x50
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80004fc:	4b12      	ldr	r3, [pc, #72]	; (8000548 <MX_I2C1_Init+0x50>)
 80004fe:	4a13      	ldr	r2, [pc, #76]	; (800054c <MX_I2C1_Init+0x54>)
 8000500:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000502:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_I2C1_Init+0x50>)
 8000504:	4a12      	ldr	r2, [pc, #72]	; (8000550 <MX_I2C1_Init+0x58>)
 8000506:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_I2C1_Init+0x50>)
 8000516:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800051a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_I2C1_Init+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_I2C1_Init+0x50>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <MX_I2C1_Init+0x50>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_I2C1_Init+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_I2C1_Init+0x50>)
 8000536:	f000 ffb1 	bl	800149c <HAL_I2C_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000540:	f000 f970 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000044 	.word	0x20000044
 800054c:	40005400 	.word	0x40005400
 8000550:	000186a0 	.word	0x000186a0

08000554 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	2100      	movs	r1, #0
 800055e:	460a      	mov	r2, r1
 8000560:	801a      	strh	r2, [r3, #0]
 8000562:	460a      	mov	r2, r1
 8000564:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000566:	2300      	movs	r3, #0
 8000568:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800056a:	4b1d      	ldr	r3, [pc, #116]	; (80005e0 <MX_RTC_Init+0x8c>)
 800056c:	4a1d      	ldr	r2, [pc, #116]	; (80005e4 <MX_RTC_Init+0x90>)
 800056e:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <MX_RTC_Init+0x8c>)
 8000572:	f04f 32ff 	mov.w	r2, #4294967295
 8000576:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <MX_RTC_Init+0x8c>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800057e:	4818      	ldr	r0, [pc, #96]	; (80005e0 <MX_RTC_Init+0x8c>)
 8000580:	f002 f9ae 	bl	80028e0 <HAL_RTC_Init>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_RTC_Init+0x3a>
  {
    Error_Handler();
 800058a:	f000 f94b 	bl	8000824 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x17;
 800058e:	2317      	movs	r3, #23
 8000590:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x30;
 8000592:	2330      	movs	r3, #48	; 0x30
 8000594:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000596:	2300      	movs	r3, #0
 8000598:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	2201      	movs	r2, #1
 800059e:	4619      	mov	r1, r3
 80005a0:	480f      	ldr	r0, [pc, #60]	; (80005e0 <MX_RTC_Init+0x8c>)
 80005a2:	f002 fa29 	bl	80029f8 <HAL_RTC_SetTime>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_RTC_Init+0x5c>
  {
    Error_Handler();
 80005ac:	f000 f93a 	bl	8000824 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_THURSDAY;
 80005b0:	2304      	movs	r3, #4
 80005b2:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_NOVEMBER;
 80005b4:	2311      	movs	r3, #17
 80005b6:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 0x7;
 80005b8:	2307      	movs	r3, #7
 80005ba:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0x24;
 80005bc:	2324      	movs	r3, #36	; 0x24
 80005be:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BCD) != HAL_OK)
 80005c0:	463b      	mov	r3, r7
 80005c2:	2201      	movs	r2, #1
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	; (80005e0 <MX_RTC_Init+0x8c>)
 80005c8:	f002 faae 	bl	8002b28 <HAL_RTC_SetDate>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80005d2:	f000 f927 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000098 	.word	0x20000098
 80005e4:	40002800 	.word	0x40002800

080005e8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000604:	4b1e      	ldr	r3, [pc, #120]	; (8000680 <MX_TIM1_Init+0x98>)
 8000606:	4a1f      	ldr	r2, [pc, #124]	; (8000684 <MX_TIM1_Init+0x9c>)
 8000608:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63999;
 800060a:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_TIM1_Init+0x98>)
 800060c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000610:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000612:	4b1b      	ldr	r3, [pc, #108]	; (8000680 <MX_TIM1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9;
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_TIM1_Init+0x98>)
 800061a:	2209      	movs	r2, #9
 800061c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800061e:	4b18      	ldr	r3, [pc, #96]	; (8000680 <MX_TIM1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000624:	4b16      	ldr	r3, [pc, #88]	; (8000680 <MX_TIM1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800062a:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_TIM1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000630:	4813      	ldr	r0, [pc, #76]	; (8000680 <MX_TIM1_Init+0x98>)
 8000632:	f002 fd22 	bl	800307a <HAL_TIM_Base_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800063c:	f000 f8f2 	bl	8000824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000644:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4619      	mov	r1, r3
 800064c:	480c      	ldr	r0, [pc, #48]	; (8000680 <MX_TIM1_Init+0x98>)
 800064e:	f002 fea5 	bl	800339c <HAL_TIM_ConfigClockSource>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000658:	f000 f8e4 	bl	8000824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800065c:	2300      	movs	r3, #0
 800065e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_TIM1_Init+0x98>)
 800066a:	f003 f887 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 f8d6 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3718      	adds	r7, #24
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000ac 	.word	0x200000ac
 8000684:	40012c00 	.word	0x40012c00

08000688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART2_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART2_UART_Init+0x4c>)
 80006c0:	f003 f8cc 	bl	800385c <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f8ab 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	200000f4 	.word	0x200000f4
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <MX_GPIO_Init+0x120>)
 80006f2:	699b      	ldr	r3, [r3, #24]
 80006f4:	4a41      	ldr	r2, [pc, #260]	; (80007fc <MX_GPIO_Init+0x120>)
 80006f6:	f043 0310 	orr.w	r3, r3, #16
 80006fa:	6193      	str	r3, [r2, #24]
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <MX_GPIO_Init+0x120>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	f003 0310 	and.w	r3, r3, #16
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <MX_GPIO_Init+0x120>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a3b      	ldr	r2, [pc, #236]	; (80007fc <MX_GPIO_Init+0x120>)
 800070e:	f043 0320 	orr.w	r3, r3, #32
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b39      	ldr	r3, [pc, #228]	; (80007fc <MX_GPIO_Init+0x120>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0320 	and.w	r3, r3, #32
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000720:	4b36      	ldr	r3, [pc, #216]	; (80007fc <MX_GPIO_Init+0x120>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a35      	ldr	r2, [pc, #212]	; (80007fc <MX_GPIO_Init+0x120>)
 8000726:	f043 0304 	orr.w	r3, r3, #4
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b33      	ldr	r3, [pc, #204]	; (80007fc <MX_GPIO_Init+0x120>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0304 	and.w	r3, r3, #4
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000738:	4b30      	ldr	r3, [pc, #192]	; (80007fc <MX_GPIO_Init+0x120>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a2f      	ldr	r2, [pc, #188]	; (80007fc <MX_GPIO_Init+0x120>)
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b2d      	ldr	r3, [pc, #180]	; (80007fc <MX_GPIO_Init+0x120>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0308 	and.w	r3, r3, #8
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|LED_GREEN_Pin|LED_BLUE1_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2123      	movs	r1, #35	; 0x23
 8000754:	482a      	ldr	r0, [pc, #168]	; (8000800 <MX_GPIO_Init+0x124>)
 8000756:	f000 fe67 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8000760:	4828      	ldr	r0, [pc, #160]	; (8000804 <MX_GPIO_Init+0x128>)
 8000762:	f000 fe61 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_BLUE_Pin|LED_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 7140 	mov.w	r1, #768	; 0x300
 800076c:	4826      	ldr	r0, [pc, #152]	; (8000808 <MX_GPIO_Init+0x12c>)
 800076e:	f000 fe5b 	bl	8001428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000778:	4b24      	ldr	r3, [pc, #144]	; (800080c <MX_GPIO_Init+0x130>)
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 0310 	add.w	r3, r7, #16
 8000784:	4619      	mov	r1, r3
 8000786:	4820      	ldr	r0, [pc, #128]	; (8000808 <MX_GPIO_Init+0x12c>)
 8000788:	f000 fcca 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin LED_BLUE1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|LED_BLUE1_Pin;
 800078c:	2323      	movs	r3, #35	; 0x23
 800078e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2302      	movs	r3, #2
 800079a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	4817      	ldr	r0, [pc, #92]	; (8000800 <MX_GPIO_Init+0x124>)
 80007a4:	f000 fcbc 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80007a8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80007ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2302      	movs	r3, #2
 80007b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ba:	f107 0310 	add.w	r3, r7, #16
 80007be:	4619      	mov	r1, r3
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <MX_GPIO_Init+0x128>)
 80007c2:	f000 fcad 	bl	8001120 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_BLUE_Pin LED_Pin */
  GPIO_InitStruct.Pin = LED_BLUE_Pin|LED_Pin;
 80007c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2302      	movs	r3, #2
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <MX_GPIO_Init+0x12c>)
 80007e0:	f000 fc9e 	bl	8001120 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2100      	movs	r1, #0
 80007e8:	2028      	movs	r0, #40	; 0x28
 80007ea:	f000 fbb0 	bl	8000f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007ee:	2028      	movs	r0, #40	; 0x28
 80007f0:	f000 fbc9 	bl	8000f86 <HAL_NVIC_EnableIRQ>

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	40010800 	.word	0x40010800
 8000804:	40010c00 	.word	0x40010c00
 8000808:	40011000 	.word	0x40011000
 800080c:	10110000 	.word	0x10110000

08000810 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	timer_run();
 8000818:	f000 f824 	bl	8000864 <timer_run>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <setTimer0>:
int timer1_flag = 0;
int timer1_counter = 0;

int TIMER_CYCLE = 10;

void setTimer0(int duration){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	timer0_counter = duration / TIMER_CYCLE;
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <setTimer0+0x28>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000842:	4a06      	ldr	r2, [pc, #24]	; (800085c <setTimer0+0x2c>)
 8000844:	6013      	str	r3, [r2, #0]
	timer0_flag = 0;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <setTimer0+0x30>)
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
}
 800084c:	bf00      	nop
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	20000000 	.word	0x20000000
 800085c:	20000034 	.word	0x20000034
 8000860:	20000030 	.word	0x20000030

08000864 <timer_run>:
//		return 1;
//	}
//	return 0;
//}

void timer_run(void){
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
	if(timer0_counter > 0){
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <timer_run+0x4c>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	dd0b      	ble.n	8000888 <timer_run+0x24>
		timer0_counter--;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <timer_run+0x4c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	4a0e      	ldr	r2, [pc, #56]	; (80008b0 <timer_run+0x4c>)
 8000878:	6013      	str	r3, [r2, #0]
		if(timer0_counter <= 0){
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <timer_run+0x4c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	dc02      	bgt.n	8000888 <timer_run+0x24>
			timer0_flag = 1;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <timer_run+0x50>)
 8000884:	2201      	movs	r2, #1
 8000886:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer1_counter > 0){
 8000888:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <timer_run+0x54>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd0b      	ble.n	80008a8 <timer_run+0x44>
		timer1_counter--;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <timer_run+0x54>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3b01      	subs	r3, #1
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <timer_run+0x54>)
 8000898:	6013      	str	r3, [r2, #0]
		if(timer1_counter <= 0){
 800089a:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <timer_run+0x54>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dc02      	bgt.n	80008a8 <timer_run+0x44>
			timer1_flag = 1;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <timer_run+0x58>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bc80      	pop	{r7}
 80008ae:	4770      	bx	lr
 80008b0:	20000034 	.word	0x20000034
 80008b4:	20000030 	.word	0x20000030
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	20000038 	.word	0x20000038

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_MspInit+0x5c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_MspInit+0x5c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x5c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x5c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x60>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_MspInit+0x60>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000
 8000920:	40010000 	.word	0x40010000

08000924 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1d      	ldr	r2, [pc, #116]	; (80009b4 <HAL_I2C_MspInit+0x90>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d132      	bne.n	80009aa <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b1c      	ldr	r3, [pc, #112]	; (80009b8 <HAL_I2C_MspInit+0x94>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a1b      	ldr	r2, [pc, #108]	; (80009b8 <HAL_I2C_MspInit+0x94>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <HAL_I2C_MspInit+0x94>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800095c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	2312      	movs	r3, #18
 8000964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4812      	ldr	r0, [pc, #72]	; (80009bc <HAL_I2C_MspInit+0x98>)
 8000972:	f000 fbd5 	bl	8001120 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000976:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <HAL_I2C_MspInit+0x9c>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
 800097c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800097e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
 8000984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000986:	f043 0302 	orr.w	r3, r3, #2
 800098a:	627b      	str	r3, [r7, #36]	; 0x24
 800098c:	4a0c      	ldr	r2, [pc, #48]	; (80009c0 <HAL_I2C_MspInit+0x9c>)
 800098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000990:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000992:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_I2C_MspInit+0x94>)
 8000994:	69db      	ldr	r3, [r3, #28]
 8000996:	4a08      	ldr	r2, [pc, #32]	; (80009b8 <HAL_I2C_MspInit+0x94>)
 8000998:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800099c:	61d3      	str	r3, [r2, #28]
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_I2C_MspInit+0x94>)
 80009a0:	69db      	ldr	r3, [r3, #28]
 80009a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40021000 	.word	0x40021000
 80009bc:	40010c00 	.word	0x40010c00
 80009c0:	40010000 	.word	0x40010000

080009c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0f      	ldr	r2, [pc, #60]	; (8000a10 <HAL_RTC_MspInit+0x4c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d118      	bne.n	8000a08 <HAL_RTC_MspInit+0x44>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80009d6:	f001 f9fd 	bl	8001dd4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_RTC_MspInit+0x50>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_RTC_MspInit+0x50>)
 80009e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009e4:	61d3      	str	r3, [r2, #28]
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <HAL_RTC_MspInit+0x50>)
 80009e8:	69db      	ldr	r3, [r3, #28]
 80009ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_RTC_MspInit+0x54>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 faa6 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000a02:	2003      	movs	r0, #3
 8000a04:	f000 fabf 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40002800 	.word	0x40002800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	4242043c 	.word	0x4242043c

08000a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <HAL_TIM_Base_MspInit+0x44>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d113      	bne.n	8000a56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_TIM_Base_MspInit+0x48>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <HAL_TIM_Base_MspInit+0x48>)
 8000a34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <HAL_TIM_Base_MspInit+0x48>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2019      	movs	r0, #25
 8000a4c:	f000 fa7f 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a50:	2019      	movs	r0, #25
 8000a52:	f000 fa98 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40012c00 	.word	0x40012c00
 8000a64:	40021000 	.word	0x40021000

08000a68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0310 	add.w	r3, r7, #16
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <HAL_UART_MspInit+0x80>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d12b      	bne.n	8000ae0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	4a17      	ldr	r2, [pc, #92]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a92:	61d3      	str	r3, [r2, #28]
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a11      	ldr	r2, [pc, #68]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <HAL_UART_MspInit+0x84>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0304 	and.w	r3, r3, #4
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab8:	230c      	movs	r3, #12
 8000aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4809      	ldr	r0, [pc, #36]	; (8000af0 <HAL_UART_MspInit+0x88>)
 8000acc:	f000 fb28 	bl	8001120 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2026      	movs	r0, #38	; 0x26
 8000ad6:	f000 fa3a 	bl	8000f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ada:	2026      	movs	r0, #38	; 0x26
 8000adc:	f000 fa53 	bl	8000f86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ae0:	bf00      	nop
 8000ae2:	3720      	adds	r7, #32
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40004400 	.word	0x40004400
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010800 	.word	0x40010800

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f8f1 	bl	8000d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
	...

08000b44 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt.
  */
void RTC_IRQHandler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8000b48:	4802      	ldr	r0, [pc, #8]	; (8000b54 <RTC_IRQHandler+0x10>)
 8000b4a:	f002 fa4d 	bl	8002fe8 <HAL_RTCEx_RTCIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	20000098 	.word	0x20000098

08000b58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <TIM1_UP_IRQHandler+0x10>)
 8000b5e:	f002 fb2d 	bl	80031bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	200000ac 	.word	0x200000ac

08000b6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b70:	4802      	ldr	r0, [pc, #8]	; (8000b7c <USART2_IRQHandler+0x10>)
 8000b72:	f002 fee9 	bl	8003948 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000f4 	.word	0x200000f4

08000b80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000b84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b88:	f000 fc66 	bl	8001458 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bc80      	pop	{r7}
 8000b9a:	4770      	bx	lr

08000b9c <HAL_UART_RxCpltCallback>:
#include "i2c-lcd.h"
uint8_t command_flag = 0;
uint8_t temp = 0;
uint8_t buffer_flag = 0;
extern UART_HandleTypeDef huart2;
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	; (8000bc8 <HAL_UART_RxCpltCallback+0x2c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d107      	bne.n	8000bbe <HAL_UART_RxCpltCallback+0x22>
        buffer_flag = 1;  // Đánh dấu đã nhận được dữ liệu
 8000bae:	4b07      	ldr	r3, [pc, #28]	; (8000bcc <HAL_UART_RxCpltCallback+0x30>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, &temp, 1); // Tiếp tục nhận dữ liệu
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <HAL_UART_RxCpltCallback+0x34>)
 8000bb8:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <HAL_UART_RxCpltCallback+0x38>)
 8000bba:	f002 fe9f 	bl	80038fc <HAL_UART_Receive_IT>
    }
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	20000041 	.word	0x20000041
 8000bd0:	20000040 	.word	0x20000040
 8000bd4:	200000f4 	.word	0x200000f4

08000bd8 <command_parser_fsm>:

void command_parser_fsm() {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    if (temp == '1') {  // Nhận được ký tự '1'
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <command_parser_fsm+0x64>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b31      	cmp	r3, #49	; 0x31
 8000be2:	d112      	bne.n	8000c0a <command_parser_fsm+0x32>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); // Đèn LED bật
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <command_parser_fsm+0x68>)
 8000bec:	f000 fc1c 	bl	8001428 <HAL_GPIO_WritePin>
        setTimer0(2000); // Ví dụ: Bật LED trong 2 giây
 8000bf0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bf4:	f7ff fe1c 	bl	8000830 <setTimer0>
        lcd_init();
 8000bf8:	f7ff fb8a 	bl	8000310 <lcd_init>
        status = ACCEPT;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <command_parser_fsm+0x6c>)
 8000bfe:	2201      	movs	r2, #1
 8000c00:	601a      	str	r2, [r3, #0]
        temp = 0; // Xóa giá trị để tránh xử lý lại
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <command_parser_fsm+0x64>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	701a      	strb	r2, [r3, #0]
        setTimer0(2000); // Ví dụ: Tắt LED trong 2 giây
        lcd_init();
        status = DECLINE;
        temp = 0; // Xóa giá trị
    }
}
 8000c08:	e015      	b.n	8000c36 <command_parser_fsm+0x5e>
    } else if (temp == '2') {  // Nhận được ký tự '0'
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <command_parser_fsm+0x64>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b32      	cmp	r3, #50	; 0x32
 8000c10:	d111      	bne.n	8000c36 <command_parser_fsm+0x5e>
        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET); // Đèn LED tắt
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <command_parser_fsm+0x68>)
 8000c1a:	f000 fc05 	bl	8001428 <HAL_GPIO_WritePin>
        setTimer0(2000); // Ví dụ: Tắt LED trong 2 giây
 8000c1e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c22:	f7ff fe05 	bl	8000830 <setTimer0>
        lcd_init();
 8000c26:	f7ff fb73 	bl	8000310 <lcd_init>
        status = DECLINE;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <command_parser_fsm+0x6c>)
 8000c2c:	2202      	movs	r2, #2
 8000c2e:	601a      	str	r2, [r3, #0]
        temp = 0; // Xóa giá trị
 8000c30:	4b02      	ldr	r3, [pc, #8]	; (8000c3c <command_parser_fsm+0x64>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000040 	.word	0x20000040
 8000c40:	40011000 	.word	0x40011000
 8000c44:	2000002c 	.word	0x2000002c

08000c48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c48:	f7ff ffa2 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c4e:	490c      	ldr	r1, [pc, #48]	; (8000c80 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c50:	4a0c      	ldr	r2, [pc, #48]	; (8000c84 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c54:	e002      	b.n	8000c5c <LoopCopyDataInit>

08000c56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c5a:	3304      	adds	r3, #4

08000c5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c60:	d3f9      	bcc.n	8000c56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c62:	4a09      	ldr	r2, [pc, #36]	; (8000c88 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c64:	4c09      	ldr	r4, [pc, #36]	; (8000c8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c68:	e001      	b.n	8000c6e <LoopFillZerobss>

08000c6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c6c:	3204      	adds	r2, #4

08000c6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c70:	d3fb      	bcc.n	8000c6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c72:	f003 fb7b 	bl	800436c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c76:	f7ff fbb1 	bl	80003dc <main>
  bx lr
 8000c7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c80:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000c84:	0800443c 	.word	0x0800443c
  ldr r2, =_sbss
 8000c88:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000c8c:	20000140 	.word	0x20000140

08000c90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c90:	e7fe      	b.n	8000c90 <ADC1_2_IRQHandler>
	...

08000c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_Init+0x28>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <HAL_Init+0x28>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ca4:	2003      	movs	r0, #3
 8000ca6:	f000 f947 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000caa:	2000      	movs	r0, #0
 8000cac:	f000 f808 	bl	8000cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb0:	f7ff fe06 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cb4:	2300      	movs	r3, #0
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40022000 	.word	0x40022000

08000cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc8:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <HAL_InitTick+0x54>)
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <HAL_InitTick+0x58>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 f95f 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00e      	b.n	8000d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2b0f      	cmp	r3, #15
 8000cf2:	d80a      	bhi.n	8000d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	6879      	ldr	r1, [r7, #4]
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f000 f927 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d00:	4a06      	ldr	r2, [pc, #24]	; (8000d1c <HAL_InitTick+0x5c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d06:	2300      	movs	r3, #0
 8000d08:	e000      	b.n	8000d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000004 	.word	0x20000004
 8000d18:	2000000c 	.word	0x2000000c
 8000d1c:	20000008 	.word	0x20000008

08000d20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_IncTick+0x1c>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	461a      	mov	r2, r3
 8000d2a:	4b05      	ldr	r3, [pc, #20]	; (8000d40 <HAL_IncTick+0x20>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	4a03      	ldr	r2, [pc, #12]	; (8000d40 <HAL_IncTick+0x20>)
 8000d32:	6013      	str	r3, [r2, #0]
}
 8000d34:	bf00      	nop
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bc80      	pop	{r7}
 8000d3a:	4770      	bx	lr
 8000d3c:	2000000c 	.word	0x2000000c
 8000d40:	2000013c 	.word	0x2000013c

08000d44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return uwTick;
 8000d48:	4b02      	ldr	r3, [pc, #8]	; (8000d54 <HAL_GetTick+0x10>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr
 8000d54:	2000013c 	.word	0x2000013c

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff fff0 	bl	8000d44 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffe0 	bl	8000d44 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000000c 	.word	0x2000000c

08000da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f003 0307 	and.w	r3, r3, #7
 8000dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd2:	4a04      	ldr	r2, [pc, #16]	; (8000de4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	60d3      	str	r3, [r2, #12]
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bc80      	pop	{r7}
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dec:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <__NVIC_GetPriorityGrouping+0x18>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	0a1b      	lsrs	r3, r3, #8
 8000df2:	f003 0307 	and.w	r3, r3, #7
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bc80      	pop	{r7}
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db0b      	blt.n	8000e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f003 021f 	and.w	r2, r3, #31
 8000e1c:	4906      	ldr	r1, [pc, #24]	; (8000e38 <__NVIC_EnableIRQ+0x34>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	095b      	lsrs	r3, r3, #5
 8000e24:	2001      	movs	r0, #1
 8000e26:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e2e:	bf00      	nop
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	; (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	; (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	; 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	; 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff90 	bl	8000e3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff2d 	bl	8000da0 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff42 	bl	8000de8 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff90 	bl	8000e90 <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5f 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff35 	bl	8000e04 <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b085      	sub	sp, #20
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d008      	beq.n	8000fe4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2200      	movs	r2, #0
 8000fdc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e020      	b.n	8001026 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f022 020e 	bic.w	r2, r2, #14
 8000ff2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f022 0201 	bic.w	r2, r2, #1
 8001002:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800100c:	2101      	movs	r1, #1
 800100e:	fa01 f202 	lsl.w	r2, r1, r2
 8001012:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2201      	movs	r2, #1
 8001018:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001024:	7bfb      	ldrb	r3, [r7, #15]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b02      	cmp	r3, #2
 8001046:	d005      	beq.n	8001054 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2204      	movs	r2, #4
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	73fb      	strb	r3, [r7, #15]
 8001052:	e051      	b.n	80010f8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f022 020e 	bic.w	r2, r2, #14
 8001062:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f022 0201 	bic.w	r2, r2, #1
 8001072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a22      	ldr	r2, [pc, #136]	; (8001104 <HAL_DMA_Abort_IT+0xd4>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d029      	beq.n	80010d2 <HAL_DMA_Abort_IT+0xa2>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <HAL_DMA_Abort_IT+0xd8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d022      	beq.n	80010ce <HAL_DMA_Abort_IT+0x9e>
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1f      	ldr	r2, [pc, #124]	; (800110c <HAL_DMA_Abort_IT+0xdc>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d01a      	beq.n	80010c8 <HAL_DMA_Abort_IT+0x98>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_DMA_Abort_IT+0xe0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d012      	beq.n	80010c2 <HAL_DMA_Abort_IT+0x92>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_DMA_Abort_IT+0xe4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00a      	beq.n	80010bc <HAL_DMA_Abort_IT+0x8c>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_DMA_Abort_IT+0xe8>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d102      	bne.n	80010b6 <HAL_DMA_Abort_IT+0x86>
 80010b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010b4:	e00e      	b.n	80010d4 <HAL_DMA_Abort_IT+0xa4>
 80010b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010ba:	e00b      	b.n	80010d4 <HAL_DMA_Abort_IT+0xa4>
 80010bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c0:	e008      	b.n	80010d4 <HAL_DMA_Abort_IT+0xa4>
 80010c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c6:	e005      	b.n	80010d4 <HAL_DMA_Abort_IT+0xa4>
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	e002      	b.n	80010d4 <HAL_DMA_Abort_IT+0xa4>
 80010ce:	2310      	movs	r3, #16
 80010d0:	e000      	b.n	80010d4 <HAL_DMA_Abort_IT+0xa4>
 80010d2:	2301      	movs	r3, #1
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_DMA_Abort_IT+0xec>)
 80010d6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	4798      	blx	r3
    } 
  }
  return status;
 80010f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020008 	.word	0x40020008
 8001108:	4002001c 	.word	0x4002001c
 800110c:	40020030 	.word	0x40020030
 8001110:	40020044 	.word	0x40020044
 8001114:	40020058 	.word	0x40020058
 8001118:	4002006c 	.word	0x4002006c
 800111c:	40020000 	.word	0x40020000

08001120 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001120:	b480      	push	{r7}
 8001122:	b08b      	sub	sp, #44	; 0x2c
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800112a:	2300      	movs	r3, #0
 800112c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001132:	e169      	b.n	8001408 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001134:	2201      	movs	r2, #1
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	69fa      	ldr	r2, [r7, #28]
 8001144:	4013      	ands	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	429a      	cmp	r2, r3
 800114e:	f040 8158 	bne.w	8001402 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	4a9a      	ldr	r2, [pc, #616]	; (80013c0 <HAL_GPIO_Init+0x2a0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d05e      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 800115c:	4a98      	ldr	r2, [pc, #608]	; (80013c0 <HAL_GPIO_Init+0x2a0>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d875      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 8001162:	4a98      	ldr	r2, [pc, #608]	; (80013c4 <HAL_GPIO_Init+0x2a4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d058      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 8001168:	4a96      	ldr	r2, [pc, #600]	; (80013c4 <HAL_GPIO_Init+0x2a4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d86f      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 800116e:	4a96      	ldr	r2, [pc, #600]	; (80013c8 <HAL_GPIO_Init+0x2a8>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d052      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 8001174:	4a94      	ldr	r2, [pc, #592]	; (80013c8 <HAL_GPIO_Init+0x2a8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d869      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 800117a:	4a94      	ldr	r2, [pc, #592]	; (80013cc <HAL_GPIO_Init+0x2ac>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d04c      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 8001180:	4a92      	ldr	r2, [pc, #584]	; (80013cc <HAL_GPIO_Init+0x2ac>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d863      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 8001186:	4a92      	ldr	r2, [pc, #584]	; (80013d0 <HAL_GPIO_Init+0x2b0>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d046      	beq.n	800121a <HAL_GPIO_Init+0xfa>
 800118c:	4a90      	ldr	r2, [pc, #576]	; (80013d0 <HAL_GPIO_Init+0x2b0>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d85d      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 8001192:	2b12      	cmp	r3, #18
 8001194:	d82a      	bhi.n	80011ec <HAL_GPIO_Init+0xcc>
 8001196:	2b12      	cmp	r3, #18
 8001198:	d859      	bhi.n	800124e <HAL_GPIO_Init+0x12e>
 800119a:	a201      	add	r2, pc, #4	; (adr r2, 80011a0 <HAL_GPIO_Init+0x80>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	0800121b 	.word	0x0800121b
 80011a4:	080011f5 	.word	0x080011f5
 80011a8:	08001207 	.word	0x08001207
 80011ac:	08001249 	.word	0x08001249
 80011b0:	0800124f 	.word	0x0800124f
 80011b4:	0800124f 	.word	0x0800124f
 80011b8:	0800124f 	.word	0x0800124f
 80011bc:	0800124f 	.word	0x0800124f
 80011c0:	0800124f 	.word	0x0800124f
 80011c4:	0800124f 	.word	0x0800124f
 80011c8:	0800124f 	.word	0x0800124f
 80011cc:	0800124f 	.word	0x0800124f
 80011d0:	0800124f 	.word	0x0800124f
 80011d4:	0800124f 	.word	0x0800124f
 80011d8:	0800124f 	.word	0x0800124f
 80011dc:	0800124f 	.word	0x0800124f
 80011e0:	0800124f 	.word	0x0800124f
 80011e4:	080011fd 	.word	0x080011fd
 80011e8:	08001211 	.word	0x08001211
 80011ec:	4a79      	ldr	r2, [pc, #484]	; (80013d4 <HAL_GPIO_Init+0x2b4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011f2:	e02c      	b.n	800124e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	623b      	str	r3, [r7, #32]
          break;
 80011fa:	e029      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	3304      	adds	r3, #4
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e024      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	68db      	ldr	r3, [r3, #12]
 800120a:	3308      	adds	r3, #8
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e01f      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e01a      	b.n	8001250 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d102      	bne.n	8001228 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001222:	2304      	movs	r3, #4
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e013      	b.n	8001250 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d105      	bne.n	800123c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001230:	2308      	movs	r3, #8
 8001232:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	611a      	str	r2, [r3, #16]
          break;
 800123a:	e009      	b.n	8001250 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800123c:	2308      	movs	r3, #8
 800123e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69fa      	ldr	r2, [r7, #28]
 8001244:	615a      	str	r2, [r3, #20]
          break;
 8001246:	e003      	b.n	8001250 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
          break;
 800124c:	e000      	b.n	8001250 <HAL_GPIO_Init+0x130>
          break;
 800124e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	2bff      	cmp	r3, #255	; 0xff
 8001254:	d801      	bhi.n	800125a <HAL_GPIO_Init+0x13a>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	e001      	b.n	800125e <HAL_GPIO_Init+0x13e>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3304      	adds	r3, #4
 800125e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2bff      	cmp	r3, #255	; 0xff
 8001264:	d802      	bhi.n	800126c <HAL_GPIO_Init+0x14c>
 8001266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	e002      	b.n	8001272 <HAL_GPIO_Init+0x152>
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	3b08      	subs	r3, #8
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	210f      	movs	r1, #15
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	fa01 f303 	lsl.w	r3, r1, r3
 8001280:	43db      	mvns	r3, r3
 8001282:	401a      	ands	r2, r3
 8001284:	6a39      	ldr	r1, [r7, #32]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	fa01 f303 	lsl.w	r3, r1, r3
 800128c:	431a      	orrs	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 80b1 	beq.w	8001402 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012a0:	4b4d      	ldr	r3, [pc, #308]	; (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a4c      	ldr	r2, [pc, #304]	; (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b4a      	ldr	r3, [pc, #296]	; (80013d8 <HAL_GPIO_Init+0x2b8>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012b8:	4a48      	ldr	r2, [pc, #288]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	089b      	lsrs	r3, r3, #2
 80012be:	3302      	adds	r3, #2
 80012c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	220f      	movs	r2, #15
 80012d0:	fa02 f303 	lsl.w	r3, r2, r3
 80012d4:	43db      	mvns	r3, r3
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4013      	ands	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a40      	ldr	r2, [pc, #256]	; (80013e0 <HAL_GPIO_Init+0x2c0>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d013      	beq.n	800130c <HAL_GPIO_Init+0x1ec>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a3f      	ldr	r2, [pc, #252]	; (80013e4 <HAL_GPIO_Init+0x2c4>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d00d      	beq.n	8001308 <HAL_GPIO_Init+0x1e8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a3e      	ldr	r2, [pc, #248]	; (80013e8 <HAL_GPIO_Init+0x2c8>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_Init+0x1e4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3d      	ldr	r2, [pc, #244]	; (80013ec <HAL_GPIO_Init+0x2cc>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d101      	bne.n	8001300 <HAL_GPIO_Init+0x1e0>
 80012fc:	2303      	movs	r3, #3
 80012fe:	e006      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 8001300:	2304      	movs	r3, #4
 8001302:	e004      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 8001304:	2302      	movs	r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 8001308:	2301      	movs	r3, #1
 800130a:	e000      	b.n	800130e <HAL_GPIO_Init+0x1ee>
 800130c:	2300      	movs	r3, #0
 800130e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001310:	f002 0203 	and.w	r2, r2, #3
 8001314:	0092      	lsls	r2, r2, #2
 8001316:	4093      	lsls	r3, r2
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	4313      	orrs	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800131e:	492f      	ldr	r1, [pc, #188]	; (80013dc <HAL_GPIO_Init+0x2bc>)
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3302      	adds	r3, #2
 8001326:	68fa      	ldr	r2, [r7, #12]
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	492c      	ldr	r1, [pc, #176]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	4928      	ldr	r1, [pc, #160]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d006      	beq.n	800136e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001362:	68da      	ldr	r2, [r3, #12]
 8001364:	4922      	ldr	r1, [pc, #136]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	60cb      	str	r3, [r1, #12]
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	43db      	mvns	r3, r3
 8001376:	491e      	ldr	r1, [pc, #120]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001378:	4013      	ands	r3, r2
 800137a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	4918      	ldr	r1, [pc, #96]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	4313      	orrs	r3, r2
 8001392:	604b      	str	r3, [r1, #4]
 8001394:	e006      	b.n	80013a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	43db      	mvns	r3, r3
 800139e:	4914      	ldr	r1, [pc, #80]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d021      	beq.n	80013f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013b0:	4b0f      	ldr	r3, [pc, #60]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	490e      	ldr	r1, [pc, #56]	; (80013f0 <HAL_GPIO_Init+0x2d0>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	600b      	str	r3, [r1, #0]
 80013bc:	e021      	b.n	8001402 <HAL_GPIO_Init+0x2e2>
 80013be:	bf00      	nop
 80013c0:	10320000 	.word	0x10320000
 80013c4:	10310000 	.word	0x10310000
 80013c8:	10220000 	.word	0x10220000
 80013cc:	10210000 	.word	0x10210000
 80013d0:	10120000 	.word	0x10120000
 80013d4:	10110000 	.word	0x10110000
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000
 80013e0:	40010800 	.word	0x40010800
 80013e4:	40010c00 	.word	0x40010c00
 80013e8:	40011000 	.word	0x40011000
 80013ec:	40011400 	.word	0x40011400
 80013f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013f4:	4b0b      	ldr	r3, [pc, #44]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	69bb      	ldr	r3, [r7, #24]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	4909      	ldr	r1, [pc, #36]	; (8001424 <HAL_GPIO_Init+0x304>)
 80013fe:	4013      	ands	r3, r2
 8001400:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	3301      	adds	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	fa22 f303 	lsr.w	r3, r2, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	f47f ae8e 	bne.w	8001134 <HAL_GPIO_Init+0x14>
  }
}
 8001418:	bf00      	nop
 800141a:	bf00      	nop
 800141c:	372c      	adds	r7, #44	; 0x2c
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
 8001434:	4613      	mov	r3, r2
 8001436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001438:	787b      	ldrb	r3, [r7, #1]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800143e:	887a      	ldrh	r2, [r7, #2]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001446:	887b      	ldrh	r3, [r7, #2]
 8001448:	041a      	lsls	r2, r3, #16
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	611a      	str	r2, [r3, #16]
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001462:	4b08      	ldr	r3, [pc, #32]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001464:	695a      	ldr	r2, [r3, #20]
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4013      	ands	r3, r2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001470:	88fb      	ldrh	r3, [r7, #6]
 8001472:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f806 	bl	8001488 <HAL_GPIO_EXTI_Callback>
  }
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e12b      	b.n	8001706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d106      	bne.n	80014c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fa2e 	bl	8000924 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2224      	movs	r2, #36	; 0x24
 80014cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0201 	bic.w	r2, r2, #1
 80014de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001500:	f001 f83c 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4a81      	ldr	r2, [pc, #516]	; (8001710 <HAL_I2C_Init+0x274>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d807      	bhi.n	8001520 <HAL_I2C_Init+0x84>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4a80      	ldr	r2, [pc, #512]	; (8001714 <HAL_I2C_Init+0x278>)
 8001514:	4293      	cmp	r3, r2
 8001516:	bf94      	ite	ls
 8001518:	2301      	movls	r3, #1
 800151a:	2300      	movhi	r3, #0
 800151c:	b2db      	uxtb	r3, r3
 800151e:	e006      	b.n	800152e <HAL_I2C_Init+0x92>
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4a7d      	ldr	r2, [pc, #500]	; (8001718 <HAL_I2C_Init+0x27c>)
 8001524:	4293      	cmp	r3, r2
 8001526:	bf94      	ite	ls
 8001528:	2301      	movls	r3, #1
 800152a:	2300      	movhi	r3, #0
 800152c:	b2db      	uxtb	r3, r3
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0e7      	b.n	8001706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4a78      	ldr	r2, [pc, #480]	; (800171c <HAL_I2C_Init+0x280>)
 800153a:	fba2 2303 	umull	r2, r3, r2, r3
 800153e:	0c9b      	lsrs	r3, r3, #18
 8001540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68ba      	ldr	r2, [r7, #8]
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	4a6a      	ldr	r2, [pc, #424]	; (8001710 <HAL_I2C_Init+0x274>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d802      	bhi.n	8001570 <HAL_I2C_Init+0xd4>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	3301      	adds	r3, #1
 800156e:	e009      	b.n	8001584 <HAL_I2C_Init+0xe8>
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001576:	fb02 f303 	mul.w	r3, r2, r3
 800157a:	4a69      	ldr	r2, [pc, #420]	; (8001720 <HAL_I2C_Init+0x284>)
 800157c:	fba2 2303 	umull	r2, r3, r2, r3
 8001580:	099b      	lsrs	r3, r3, #6
 8001582:	3301      	adds	r3, #1
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	69db      	ldr	r3, [r3, #28]
 8001592:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	495c      	ldr	r1, [pc, #368]	; (8001710 <HAL_I2C_Init+0x274>)
 80015a0:	428b      	cmp	r3, r1
 80015a2:	d819      	bhi.n	80015d8 <HAL_I2C_Init+0x13c>
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	1e59      	subs	r1, r3, #1
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b2:	1c59      	adds	r1, r3, #1
 80015b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80015b8:	400b      	ands	r3, r1
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_I2C_Init+0x138>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	1e59      	subs	r1, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80015cc:	3301      	adds	r3, #1
 80015ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d2:	e051      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e04f      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d111      	bne.n	8001604 <HAL_I2C_Init+0x168>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	440b      	add	r3, r1
 80015ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f2:	3301      	adds	r3, #1
 80015f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	bf0c      	ite	eq
 80015fc:	2301      	moveq	r3, #1
 80015fe:	2300      	movne	r3, #0
 8001600:	b2db      	uxtb	r3, r3
 8001602:	e012      	b.n	800162a <HAL_I2C_Init+0x18e>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1e58      	subs	r0, r3, #1
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	460b      	mov	r3, r1
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	440b      	add	r3, r1
 8001612:	0099      	lsls	r1, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	fbb0 f3f3 	udiv	r3, r0, r3
 800161a:	3301      	adds	r3, #1
 800161c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <HAL_I2C_Init+0x196>
 800162e:	2301      	movs	r3, #1
 8001630:	e022      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10e      	bne.n	8001658 <HAL_I2C_Init+0x1bc>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	1e58      	subs	r0, r3, #1
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6859      	ldr	r1, [r3, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	440b      	add	r3, r1
 8001648:	fbb0 f3f3 	udiv	r3, r0, r3
 800164c:	3301      	adds	r3, #1
 800164e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001656:	e00f      	b.n	8001678 <HAL_I2C_Init+0x1dc>
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	1e58      	subs	r0, r3, #1
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6859      	ldr	r1, [r3, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	440b      	add	r3, r1
 8001666:	0099      	lsls	r1, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	fbb0 f3f3 	udiv	r3, r0, r3
 800166e:	3301      	adds	r3, #1
 8001670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001674:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	6809      	ldr	r1, [r1, #0]
 800167c:	4313      	orrs	r3, r2
 800167e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69da      	ldr	r2, [r3, #28]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	431a      	orrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	430a      	orrs	r2, r1
 800169a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6911      	ldr	r1, [r2, #16]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68d2      	ldr	r2, [r2, #12]
 80016b2:	4311      	orrs	r1, r2
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	430b      	orrs	r3, r1
 80016ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	695a      	ldr	r2, [r3, #20]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	699b      	ldr	r3, [r3, #24]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	000186a0 	.word	0x000186a0
 8001714:	001e847f 	.word	0x001e847f
 8001718:	003d08ff 	.word	0x003d08ff
 800171c:	431bde83 	.word	0x431bde83
 8001720:	10624dd3 	.word	0x10624dd3

08001724 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af02      	add	r7, sp, #8
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	607a      	str	r2, [r7, #4]
 800172e:	461a      	mov	r2, r3
 8001730:	460b      	mov	r3, r1
 8001732:	817b      	strh	r3, [r7, #10]
 8001734:	4613      	mov	r3, r2
 8001736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001738:	f7ff fb04 	bl	8000d44 <HAL_GetTick>
 800173c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b20      	cmp	r3, #32
 8001748:	f040 80e0 	bne.w	800190c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2319      	movs	r3, #25
 8001752:	2201      	movs	r2, #1
 8001754:	4970      	ldr	r1, [pc, #448]	; (8001918 <HAL_I2C_Master_Transmit+0x1f4>)
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f964 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001762:	2302      	movs	r3, #2
 8001764:	e0d3      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800176c:	2b01      	cmp	r3, #1
 800176e:	d101      	bne.n	8001774 <HAL_I2C_Master_Transmit+0x50>
 8001770:	2302      	movs	r3, #2
 8001772:	e0cc      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ea>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2201      	movs	r2, #1
 8001778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	2b01      	cmp	r3, #1
 8001788:	d007      	beq.n	800179a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f042 0201 	orr.w	r2, r2, #1
 8001798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2221      	movs	r2, #33	; 0x21
 80017ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2210      	movs	r2, #16
 80017b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2200      	movs	r2, #0
 80017be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	893a      	ldrh	r2, [r7, #8]
 80017ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	4a50      	ldr	r2, [pc, #320]	; (800191c <HAL_I2C_Master_Transmit+0x1f8>)
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017dc:	8979      	ldrh	r1, [r7, #10]
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	6a3a      	ldr	r2, [r7, #32]
 80017e2:	68f8      	ldr	r0, [r7, #12]
 80017e4:	f000 f89c 	bl	8001920 <I2C_MasterRequestWrite>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e08d      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001808:	e066      	b.n	80018d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	6a39      	ldr	r1, [r7, #32]
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 fa22 	bl	8001c58 <I2C_WaitOnTXEFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d00d      	beq.n	8001836 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	2b04      	cmp	r3, #4
 8001820:	d107      	bne.n	8001832 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e06b      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	781a      	ldrb	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	1c5a      	adds	r2, r3, #1
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001850:	b29b      	uxth	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	f003 0304 	and.w	r3, r3, #4
 8001870:	2b04      	cmp	r3, #4
 8001872:	d11b      	bne.n	80018ac <HAL_I2C_Master_Transmit+0x188>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001878:	2b00      	cmp	r3, #0
 800187a:	d017      	beq.n	80018ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001880:	781a      	ldrb	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	1c5a      	adds	r2, r3, #1
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	3b01      	subs	r3, #1
 800189a:	b29a      	uxth	r2, r3
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	6a39      	ldr	r1, [r7, #32]
 80018b0:	68f8      	ldr	r0, [r7, #12]
 80018b2:	f000 fa19 	bl	8001ce8 <I2C_WaitOnBTFFlagUntilTimeout>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00d      	beq.n	80018d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d107      	bne.n	80018d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	e01a      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d194      	bne.n	800180a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2220      	movs	r2, #32
 80018f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	00100002 	.word	0x00100002
 800191c:	ffff0000 	.word	0xffff0000

08001920 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	607a      	str	r2, [r7, #4]
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	460b      	mov	r3, r1
 800192e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001934:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d006      	beq.n	800194a <I2C_MasterRequestWrite+0x2a>
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d003      	beq.n	800194a <I2C_MasterRequestWrite+0x2a>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001948:	d108      	bne.n	800195c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e00b      	b.n	8001974 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	2b12      	cmp	r3, #18
 8001962:	d107      	bne.n	8001974 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001972:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f000 f84f 	bl	8001a24 <I2C_WaitOnFlagUntilTimeout>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d00d      	beq.n	80019a8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800199a:	d103      	bne.n	80019a4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e035      	b.n	8001a14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019b0:	d108      	bne.n	80019c4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80019b2:	897b      	ldrh	r3, [r7, #10]
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80019c0:	611a      	str	r2, [r3, #16]
 80019c2:	e01b      	b.n	80019fc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019c4:	897b      	ldrh	r3, [r7, #10]
 80019c6:	11db      	asrs	r3, r3, #7
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	f003 0306 	and.w	r3, r3, #6
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f063 030f 	orn	r3, r3, #15
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	490e      	ldr	r1, [pc, #56]	; (8001a1c <I2C_MasterRequestWrite+0xfc>)
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f898 	bl	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e010      	b.n	8001a14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019f2:	897b      	ldrh	r3, [r7, #10]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	4907      	ldr	r1, [pc, #28]	; (8001a20 <I2C_MasterRequestWrite+0x100>)
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f888 	bl	8001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3718      	adds	r7, #24
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	00010008 	.word	0x00010008
 8001a20:	00010002 	.word	0x00010002

08001a24 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	603b      	str	r3, [r7, #0]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a34:	e048      	b.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d044      	beq.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a3e:	f7ff f981 	bl	8000d44 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	429a      	cmp	r2, r3
 8001a4c:	d302      	bcc.n	8001a54 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d139      	bne.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	0c1b      	lsrs	r3, r3, #16
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10d      	bne.n	8001a7a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	43da      	mvns	r2, r3
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	e00c      	b.n	8001a94 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	43da      	mvns	r2, r3
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	4013      	ands	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	461a      	mov	r2, r3
 8001a94:	79fb      	ldrb	r3, [r7, #7]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d116      	bne.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f043 0220 	orr.w	r2, r3, #32
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e023      	b.n	8001b10 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0c1b      	lsrs	r3, r3, #16
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d10d      	bne.n	8001aee <I2C_WaitOnFlagUntilTimeout+0xca>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	43da      	mvns	r2, r3
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	4013      	ands	r3, r2
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf0c      	ite	eq
 8001ae4:	2301      	moveq	r3, #1
 8001ae6:	2300      	movne	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	461a      	mov	r2, r3
 8001aec:	e00c      	b.n	8001b08 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	43da      	mvns	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4013      	ands	r3, r2
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	bf0c      	ite	eq
 8001b00:	2301      	moveq	r3, #1
 8001b02:	2300      	movne	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	461a      	mov	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d093      	beq.n	8001a36 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b26:	e071      	b.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b36:	d123      	bne.n	8001b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b46:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b50:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f043 0204 	orr.w	r2, r3, #4
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e067      	b.n	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b86:	d041      	beq.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b88:	f7ff f8dc 	bl	8000d44 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	687a      	ldr	r2, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d302      	bcc.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d136      	bne.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	0c1b      	lsrs	r3, r3, #16
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d10c      	bne.n	8001bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf14      	ite	ne
 8001bba:	2301      	movne	r3, #1
 8001bbc:	2300      	moveq	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	e00b      	b.n	8001bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	43da      	mvns	r2, r3
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf14      	ite	ne
 8001bd4:	2301      	movne	r3, #1
 8001bd6:	2300      	moveq	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d016      	beq.n	8001c0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2200      	movs	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2220      	movs	r2, #32
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f043 0220 	orr.w	r2, r3, #32
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e021      	b.n	8001c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	0c1b      	lsrs	r3, r3, #16
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d10c      	bne.n	8001c30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	43da      	mvns	r2, r3
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	4013      	ands	r3, r2
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	e00b      	b.n	8001c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	43da      	mvns	r2, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	bf14      	ite	ne
 8001c42:	2301      	movne	r3, #1
 8001c44:	2300      	moveq	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	f47f af6d 	bne.w	8001b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c4e:	2300      	movs	r3, #0
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3710      	adds	r7, #16
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c64:	e034      	b.n	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f886 	bl	8001d78 <I2C_IsAcknowledgeFailed>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e034      	b.n	8001ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c7c:	d028      	beq.n	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c7e:	f7ff f861 	bl	8000d44 <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	68ba      	ldr	r2, [r7, #8]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d302      	bcc.n	8001c94 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d11d      	bne.n	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c9e:	2b80      	cmp	r3, #128	; 0x80
 8001ca0:	d016      	beq.n	8001cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2220      	movs	r2, #32
 8001cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f043 0220 	orr.w	r2, r3, #32
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e007      	b.n	8001ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	695b      	ldr	r3, [r3, #20]
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	2b80      	cmp	r3, #128	; 0x80
 8001cdc:	d1c3      	bne.n	8001c66 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001cf4:	e034      	b.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f000 f83e 	bl	8001d78 <I2C_IsAcknowledgeFailed>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e034      	b.n	8001d70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d0c:	d028      	beq.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d0e:	f7ff f819 	bl	8000d44 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d302      	bcc.n	8001d24 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d11d      	bne.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d016      	beq.n	8001d60 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2200      	movs	r2, #0
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f043 0220 	orr.w	r2, r3, #32
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e007      	b.n	8001d70 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d1c3      	bne.n	8001cf6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d8e:	d11b      	bne.n	8001dc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001d98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e000      	b.n	8001dca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001dda:	2201      	movs	r2, #1
 8001ddc:	601a      	str	r2, [r3, #0]
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	420e0020 	.word	0x420e0020

08001dec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e26c      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	f000 8087 	beq.w	8001f1a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e0c:	4b92      	ldr	r3, [pc, #584]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f003 030c 	and.w	r3, r3, #12
 8001e14:	2b04      	cmp	r3, #4
 8001e16:	d00c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e18:	4b8f      	ldr	r3, [pc, #572]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f003 030c 	and.w	r3, r3, #12
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d112      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
 8001e24:	4b8c      	ldr	r3, [pc, #560]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e30:	d10b      	bne.n	8001e4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e32:	4b89      	ldr	r3, [pc, #548]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d06c      	beq.n	8001f18 <HAL_RCC_OscConfig+0x12c>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d168      	bne.n	8001f18 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e246      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x76>
 8001e54:	4b80      	ldr	r3, [pc, #512]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a7f      	ldr	r2, [pc, #508]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e02e      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x98>
 8001e6a:	4b7b      	ldr	r3, [pc, #492]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a7a      	ldr	r2, [pc, #488]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	4b78      	ldr	r3, [pc, #480]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a77      	ldr	r2, [pc, #476]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	e01d      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0xbc>
 8001e8e:	4b72      	ldr	r3, [pc, #456]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a71      	ldr	r2, [pc, #452]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b6f      	ldr	r3, [pc, #444]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a6e      	ldr	r2, [pc, #440]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	4b6b      	ldr	r3, [pc, #428]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a6a      	ldr	r2, [pc, #424]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	4b68      	ldr	r3, [pc, #416]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a67      	ldr	r2, [pc, #412]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ebe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d013      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec8:	f7fe ff3c 	bl	8000d44 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7fe ff38 	bl	8000d44 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b64      	cmp	r3, #100	; 0x64
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e1fa      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ee2:	4b5d      	ldr	r3, [pc, #372]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0xe4>
 8001eee:	e014      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef0:	f7fe ff28 	bl	8000d44 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef8:	f7fe ff24 	bl	8000d44 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b64      	cmp	r3, #100	; 0x64
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e1e6      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0a:	4b53      	ldr	r3, [pc, #332]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f0      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x10c>
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d063      	beq.n	8001fee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f26:	4b4c      	ldr	r3, [pc, #304]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00b      	beq.n	8001f4a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f32:	4b49      	ldr	r3, [pc, #292]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d11c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x18c>
 8001f3e:	4b46      	ldr	r3, [pc, #280]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d116      	bne.n	8001f78 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f4a:	4b43      	ldr	r3, [pc, #268]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d005      	beq.n	8001f62 <HAL_RCC_OscConfig+0x176>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e1ba      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	4939      	ldr	r1, [pc, #228]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f76:	e03a      	b.n	8001fee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d020      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe fedd 	bl	8000d44 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8e:	f7fe fed9 	bl	8000d44 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e19b      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fa0:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fac:	4b2a      	ldr	r3, [pc, #168]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4927      	ldr	r1, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]
 8001fc0:	e015      	b.n	8001fee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc2:	4b26      	ldr	r3, [pc, #152]	; (800205c <HAL_RCC_OscConfig+0x270>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe febc 	bl	8000d44 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd0:	f7fe feb8 	bl	8000d44 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e17a      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d03a      	beq.n	8002070 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d019      	beq.n	8002036 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002002:	4b17      	ldr	r3, [pc, #92]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8002004:	2201      	movs	r2, #1
 8002006:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002008:	f7fe fe9c 	bl	8000d44 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002010:	f7fe fe98 	bl	8000d44 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e15a      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <HAL_RCC_OscConfig+0x26c>)
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0f0      	beq.n	8002010 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800202e:	2001      	movs	r0, #1
 8002030:	f000 facc 	bl	80025cc <RCC_Delay>
 8002034:	e01c      	b.n	8002070 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002036:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <HAL_RCC_OscConfig+0x274>)
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800203c:	f7fe fe82 	bl	8000d44 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002042:	e00f      	b.n	8002064 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002044:	f7fe fe7e 	bl	8000d44 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d908      	bls.n	8002064 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e140      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	42420000 	.word	0x42420000
 8002060:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002064:	4b9e      	ldr	r3, [pc, #632]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1e9      	bne.n	8002044 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0304 	and.w	r3, r3, #4
 8002078:	2b00      	cmp	r3, #0
 800207a:	f000 80a6 	beq.w	80021ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002082:	4b97      	ldr	r3, [pc, #604]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10d      	bne.n	80020aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208e:	4b94      	ldr	r3, [pc, #592]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a93      	ldr	r2, [pc, #588]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002098:	61d3      	str	r3, [r2, #28]
 800209a:	4b91      	ldr	r3, [pc, #580]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020aa:	4b8e      	ldr	r3, [pc, #568]	; (80022e4 <HAL_RCC_OscConfig+0x4f8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d118      	bne.n	80020e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020b6:	4b8b      	ldr	r3, [pc, #556]	; (80022e4 <HAL_RCC_OscConfig+0x4f8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a8a      	ldr	r2, [pc, #552]	; (80022e4 <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c2:	f7fe fe3f 	bl	8000d44 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ca:	f7fe fe3b 	bl	8000d44 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b64      	cmp	r3, #100	; 0x64
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e0fd      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020dc:	4b81      	ldr	r3, [pc, #516]	; (80022e4 <HAL_RCC_OscConfig+0x4f8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x312>
 80020f0:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a7a      	ldr	r2, [pc, #488]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80020f6:	f043 0301 	orr.w	r3, r3, #1
 80020fa:	6213      	str	r3, [r2, #32]
 80020fc:	e02d      	b.n	800215a <HAL_RCC_OscConfig+0x36e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10c      	bne.n	8002120 <HAL_RCC_OscConfig+0x334>
 8002106:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4a75      	ldr	r2, [pc, #468]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800210c:	f023 0301 	bic.w	r3, r3, #1
 8002110:	6213      	str	r3, [r2, #32]
 8002112:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a72      	ldr	r2, [pc, #456]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	e01c      	b.n	800215a <HAL_RCC_OscConfig+0x36e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	2b05      	cmp	r3, #5
 8002126:	d10c      	bne.n	8002142 <HAL_RCC_OscConfig+0x356>
 8002128:	4b6d      	ldr	r3, [pc, #436]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800212a:	6a1b      	ldr	r3, [r3, #32]
 800212c:	4a6c      	ldr	r2, [pc, #432]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6213      	str	r3, [r2, #32]
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	4a69      	ldr	r2, [pc, #420]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800213a:	f043 0301 	orr.w	r3, r3, #1
 800213e:	6213      	str	r3, [r2, #32]
 8002140:	e00b      	b.n	800215a <HAL_RCC_OscConfig+0x36e>
 8002142:	4b67      	ldr	r3, [pc, #412]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	6a1b      	ldr	r3, [r3, #32]
 8002146:	4a66      	ldr	r2, [pc, #408]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002148:	f023 0301 	bic.w	r3, r3, #1
 800214c:	6213      	str	r3, [r2, #32]
 800214e:	4b64      	ldr	r3, [pc, #400]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	4a63      	ldr	r2, [pc, #396]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d015      	beq.n	800218e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7fe fdef 	bl	8000d44 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002168:	e00a      	b.n	8002180 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216a:	f7fe fdeb 	bl	8000d44 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	f241 3288 	movw	r2, #5000	; 0x1388
 8002178:	4293      	cmp	r3, r2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0ab      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	4b57      	ldr	r3, [pc, #348]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	6a1b      	ldr	r3, [r3, #32]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0ee      	beq.n	800216a <HAL_RCC_OscConfig+0x37e>
 800218c:	e014      	b.n	80021b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218e:	f7fe fdd9 	bl	8000d44 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002194:	e00a      	b.n	80021ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002196:	f7fe fdd5 	bl	8000d44 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e095      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	f003 0302 	and.w	r3, r3, #2
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ee      	bne.n	8002196 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	4a47      	ldr	r2, [pc, #284]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8081 	beq.w	80022d6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021d4:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b08      	cmp	r3, #8
 80021de:	d061      	beq.n	80022a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d146      	bne.n	8002276 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021e8:	4b3f      	ldr	r3, [pc, #252]	; (80022e8 <HAL_RCC_OscConfig+0x4fc>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ee:	f7fe fda9 	bl	8000d44 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f6:	f7fe fda5 	bl	8000d44 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e067      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002208:	4b35      	ldr	r3, [pc, #212]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d108      	bne.n	8002230 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800221e:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	492d      	ldr	r1, [pc, #180]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800222c:	4313      	orrs	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002230:	4b2b      	ldr	r3, [pc, #172]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a19      	ldr	r1, [r3, #32]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	430b      	orrs	r3, r1
 8002242:	4927      	ldr	r1, [pc, #156]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x4fc>)
 800224a:	2201      	movs	r2, #1
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fd79 	bl	8000d44 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fd75 	bl	8000d44 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e037      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0f0      	beq.n	8002256 <HAL_RCC_OscConfig+0x46a>
 8002274:	e02f      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b1c      	ldr	r3, [pc, #112]	; (80022e8 <HAL_RCC_OscConfig+0x4fc>)
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227c:	f7fe fd62 	bl	8000d44 <HAL_GetTick>
 8002280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fd5e 	bl	8000d44 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e020      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	4b12      	ldr	r3, [pc, #72]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x498>
 80022a2:	e018      	b.n	80022d6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e013      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCC_OscConfig+0x4f4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d106      	bne.n	80022d2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d001      	beq.n	80022d6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3718      	adds	r7, #24
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42420060 	.word	0x42420060

080022ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0d0      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b6a      	ldr	r3, [pc, #424]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b67      	ldr	r3, [pc, #412]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4965      	ldr	r1, [pc, #404]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b8      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0302 	and.w	r3, r3, #2
 8002338:	2b00      	cmp	r3, #0
 800233a:	d020      	beq.n	800237e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0304 	and.w	r3, r3, #4
 8002344:	2b00      	cmp	r3, #0
 8002346:	d005      	beq.n	8002354 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002352:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0308 	and.w	r3, r3, #8
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4a52      	ldr	r2, [pc, #328]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002366:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800236a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800236c:	4b50      	ldr	r3, [pc, #320]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	494d      	ldr	r1, [pc, #308]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d040      	beq.n	800240c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d115      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e07f      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d107      	bne.n	80023ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023aa:	4b41      	ldr	r3, [pc, #260]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d109      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e073      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ba:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e06b      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ca:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f023 0203 	bic.w	r2, r3, #3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4936      	ldr	r1, [pc, #216]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023dc:	f7fe fcb2 	bl	8000d44 <HAL_GetTick>
 80023e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e2:	e00a      	b.n	80023fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e4:	f7fe fcae 	bl	8000d44 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e053      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023fa:	4b2d      	ldr	r3, [pc, #180]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 020c 	and.w	r2, r3, #12
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	429a      	cmp	r2, r3
 800240a:	d1eb      	bne.n	80023e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800240c:	4b27      	ldr	r3, [pc, #156]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d210      	bcs.n	800243c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b24      	ldr	r3, [pc, #144]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	4922      	ldr	r1, [pc, #136]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e032      	b.n	80024a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002448:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4916      	ldr	r1, [pc, #88]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	2b00      	cmp	r3, #0
 8002464:	d009      	beq.n	800247a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002466:	4b12      	ldr	r3, [pc, #72]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	490e      	ldr	r1, [pc, #56]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800247a:	f000 f821 	bl	80024c0 <HAL_RCC_GetSysClockFreq>
 800247e:	4602      	mov	r2, r0
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	490a      	ldr	r1, [pc, #40]	; (80024b4 <HAL_RCC_ClockConfig+0x1c8>)
 800248c:	5ccb      	ldrb	r3, [r1, r3]
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a09      	ldr	r2, [pc, #36]	; (80024b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1d0>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe fc10 	bl	8000cc0 <HAL_InitTick>

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	080043f4 	.word	0x080043f4
 80024b8:	20000004 	.word	0x20000004
 80024bc:	20000008 	.word	0x20000008

080024c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b087      	sub	sp, #28
 80024c4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024c6:	2300      	movs	r3, #0
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	2300      	movs	r3, #0
 80024d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCC_GetSysClockFreq+0x94>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	2b04      	cmp	r3, #4
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq+0x30>
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d003      	beq.n	80024f6 <HAL_RCC_GetSysClockFreq+0x36>
 80024ee:	e027      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024f0:	4b19      	ldr	r3, [pc, #100]	; (8002558 <HAL_RCC_GetSysClockFreq+0x98>)
 80024f2:	613b      	str	r3, [r7, #16]
      break;
 80024f4:	e027      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0c9b      	lsrs	r3, r3, #18
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4a17      	ldr	r2, [pc, #92]	; (800255c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_RCC_GetSysClockFreq+0x94>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	0c5b      	lsrs	r3, r3, #17
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	4a11      	ldr	r2, [pc, #68]	; (8002560 <HAL_RCC_GetSysClockFreq+0xa0>)
 800251a:	5cd3      	ldrb	r3, [r2, r3]
 800251c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a0d      	ldr	r2, [pc, #52]	; (8002558 <HAL_RCC_GetSysClockFreq+0x98>)
 8002522:	fb02 f203 	mul.w	r2, r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	fbb2 f3f3 	udiv	r3, r2, r3
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e004      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	4a0c      	ldr	r2, [pc, #48]	; (8002564 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002534:	fb02 f303 	mul.w	r3, r2, r3
 8002538:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	613b      	str	r3, [r7, #16]
      break;
 800253e:	e002      	b.n	8002546 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <HAL_RCC_GetSysClockFreq+0x98>)
 8002542:	613b      	str	r3, [r7, #16]
      break;
 8002544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002546:	693b      	ldr	r3, [r7, #16]
}
 8002548:	4618      	mov	r0, r3
 800254a:	371c      	adds	r7, #28
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000
 8002558:	007a1200 	.word	0x007a1200
 800255c:	0800440c 	.word	0x0800440c
 8002560:	0800441c 	.word	0x0800441c
 8002564:	003d0900 	.word	0x003d0900

08002568 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800256c:	4b02      	ldr	r3, [pc, #8]	; (8002578 <HAL_RCC_GetHCLKFreq+0x10>)
 800256e:	681b      	ldr	r3, [r3, #0]
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr
 8002578:	20000004 	.word	0x20000004

0800257c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002580:	f7ff fff2 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 8002584:	4602      	mov	r2, r0
 8002586:	4b05      	ldr	r3, [pc, #20]	; (800259c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	4903      	ldr	r1, [pc, #12]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002592:	5ccb      	ldrb	r3, [r1, r3]
 8002594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002598:	4618      	mov	r0, r3
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40021000 	.word	0x40021000
 80025a0:	08004404 	.word	0x08004404

080025a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025a8:	f7ff ffde 	bl	8002568 <HAL_RCC_GetHCLKFreq>
 80025ac:	4602      	mov	r2, r0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	0adb      	lsrs	r3, r3, #11
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	4903      	ldr	r1, [pc, #12]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ba:	5ccb      	ldrb	r3, [r1, r3]
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08004404 	.word	0x08004404

080025cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025d4:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <RCC_Delay+0x34>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a0a      	ldr	r2, [pc, #40]	; (8002604 <RCC_Delay+0x38>)
 80025da:	fba2 2303 	umull	r2, r3, r2, r3
 80025de:	0a5b      	lsrs	r3, r3, #9
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025e8:	bf00      	nop
  }
  while (Delay --);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	60fa      	str	r2, [r7, #12]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d1f9      	bne.n	80025e8 <RCC_Delay+0x1c>
}
 80025f4:	bf00      	nop
 80025f6:	bf00      	nop
 80025f8:	3714      	adds	r7, #20
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr
 8002600:	20000004 	.word	0x20000004
 8002604:	10624dd3 	.word	0x10624dd3

08002608 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	d07d      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002624:	2300      	movs	r3, #0
 8002626:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002628:	4b4f      	ldr	r3, [pc, #316]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10d      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002636:	69db      	ldr	r3, [r3, #28]
 8002638:	4a4b      	ldr	r2, [pc, #300]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263e:	61d3      	str	r3, [r2, #28]
 8002640:	4b49      	ldr	r3, [pc, #292]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264c:	2301      	movs	r3, #1
 800264e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002650:	4b46      	ldr	r3, [pc, #280]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d118      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265c:	4b43      	ldr	r3, [pc, #268]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a42      	ldr	r2, [pc, #264]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002668:	f7fe fb6c 	bl	8000d44 <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	e008      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002670:	f7fe fb68 	bl	8000d44 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e06d      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002682:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800268e:	4b36      	ldr	r3, [pc, #216]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002696:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d02e      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d027      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80026ac:	4b2e      	ldr	r3, [pc, #184]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b6:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026bc:	4b2c      	ldr	r3, [pc, #176]	; (8002770 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026c2:	4a29      	ldr	r2, [pc, #164]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d014      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fb37 	bl	8000d44 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fb33 	bl	8000d44 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e036      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4917      	ldr	r1, [pc, #92]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270a:	4313      	orrs	r3, r2
 800270c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d105      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002716:	69db      	ldr	r3, [r3, #28]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800271a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800271e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d008      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	490b      	ldr	r1, [pc, #44]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273a:	4313      	orrs	r3, r2
 800273c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800274a:	4b07      	ldr	r3, [pc, #28]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	4904      	ldr	r1, [pc, #16]	; (8002768 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3718      	adds	r7, #24
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40021000 	.word	0x40021000
 800276c:	40007000 	.word	0x40007000
 8002770:	42420440 	.word	0x42420440

08002774 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 800277c:	2300      	movs	r3, #0
 800277e:	617b      	str	r3, [r7, #20]
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	2300      	movs	r3, #0
 8002786:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	2300      	movs	r3, #0
 800278e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b10      	cmp	r3, #16
 8002794:	d00a      	beq.n	80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b10      	cmp	r3, #16
 800279a:	f200 808a 	bhi.w	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d045      	beq.n	8002830 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d075      	beq.n	8002896 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80027aa:	e082      	b.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80027ac:	4b46      	ldr	r3, [pc, #280]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80027b2:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d07b      	beq.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	0c9b      	lsrs	r3, r3, #18
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	4a41      	ldr	r2, [pc, #260]	; (80028cc <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d015      	beq.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027d6:	4b3c      	ldr	r3, [pc, #240]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	0c5b      	lsrs	r3, r3, #17
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	4a3b      	ldr	r2, [pc, #236]	; (80028d0 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00d      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80027f0:	4a38      	ldr	r2, [pc, #224]	; (80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	61fb      	str	r3, [r7, #28]
 8002800:	e004      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002806:	fb02 f303 	mul.w	r3, r2, r3
 800280a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800280c:	4b2e      	ldr	r3, [pc, #184]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002814:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002818:	d102      	bne.n	8002820 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	61bb      	str	r3, [r7, #24]
      break;
 800281e:	e04a      	b.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	4a2d      	ldr	r2, [pc, #180]	; (80028dc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002826:	fba2 2303 	umull	r2, r3, r2, r3
 800282a:	085b      	lsrs	r3, r3, #1
 800282c:	61bb      	str	r3, [r7, #24]
      break;
 800282e:	e042      	b.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002830:	4b25      	ldr	r3, [pc, #148]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800283c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002840:	d108      	bne.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800284c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e01f      	b.n	8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800285e:	d109      	bne.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002860:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800286c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	e00f      	b.n	8002894 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800287a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800287e:	d11c      	bne.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002880:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d016      	beq.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800288c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002890:	61bb      	str	r3, [r7, #24]
      break;
 8002892:	e012      	b.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002894:	e011      	b.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002896:	f7ff fe85 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	0b9b      	lsrs	r3, r3, #14
 80028a2:	f003 0303 	and.w	r3, r3, #3
 80028a6:	3301      	adds	r3, #1
 80028a8:	005b      	lsls	r3, r3, #1
 80028aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ae:	61bb      	str	r3, [r7, #24]
      break;
 80028b0:	e004      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028b2:	bf00      	nop
 80028b4:	e002      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028b6:	bf00      	nop
 80028b8:	e000      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80028ba:	bf00      	nop
    }
  }
  return (frequency);
 80028bc:	69bb      	ldr	r3, [r7, #24]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3720      	adds	r7, #32
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000
 80028cc:	08004420 	.word	0x08004420
 80028d0:	08004430 	.word	0x08004430
 80028d4:	007a1200 	.word	0x007a1200
 80028d8:	003d0900 	.word	0x003d0900
 80028dc:	aaaaaaab 	.word	0xaaaaaaab

080028e0 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07a      	b.n	80029ec <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	7c5b      	ldrb	r3, [r3, #17]
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d105      	bne.n	800290c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe f85c 	bl	80009c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9be 	bl	8002c94 <HAL_RTC_WaitForSynchro>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2204      	movs	r2, #4
 8002922:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e061      	b.n	80029ec <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fa77 	bl	8002e1c <RTC_EnterInitMode>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d004      	beq.n	800293e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2204      	movs	r2, #4
 8002938:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e056      	b.n	80029ec <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0207 	bic.w	r2, r2, #7
 800294c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002956:	4b27      	ldr	r3, [pc, #156]	; (80029f4 <HAL_RTC_Init+0x114>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	4a26      	ldr	r2, [pc, #152]	; (80029f4 <HAL_RTC_Init+0x114>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002962:	4b24      	ldr	r3, [pc, #144]	; (80029f4 <HAL_RTC_Init+0x114>)
 8002964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002966:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	4921      	ldr	r1, [pc, #132]	; (80029f4 <HAL_RTC_Init+0x114>)
 8002970:	4313      	orrs	r3, r2
 8002972:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d003      	beq.n	8002986 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00e      	b.n	80029a4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002986:	2001      	movs	r0, #1
 8002988:	f7ff fef4 	bl	8002774 <HAL_RCCEx_GetPeriphCLKFreq>
 800298c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2204      	movs	r2, #4
 8002998:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e026      	b.n	80029ec <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	3b01      	subs	r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	0c1a      	lsrs	r2, r3, #16
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f002 020f 	and.w	r2, r2, #15
 80029b0:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68fa      	ldr	r2, [r7, #12]
 80029b8:	b292      	uxth	r2, r2
 80029ba:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 fa55 	bl	8002e6c <RTC_ExitInitMode>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d004      	beq.n	80029d2 <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2204      	movs	r2, #4
 80029cc:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00c      	b.n	80029ec <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 80029ea:	2300      	movs	r3, #0
  }
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40006c00 	.word	0x40006c00

080029f8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_RTC_SetTime+0x20>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e080      	b.n	8002b1e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	7c1b      	ldrb	r3, [r3, #16]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_RTC_SetTime+0x30>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e07a      	b.n	8002b1e <HAL_RTC_SetTime+0x126>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2202      	movs	r2, #2
 8002a32:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a44:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	460b      	mov	r3, r1
 8002a50:	011b      	lsls	r3, r3, #4
 8002a52:	1a5b      	subs	r3, r3, r1
 8002a54:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a56:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002a5c:	4413      	add	r3, r2
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	e01e      	b.n	8002aa0 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fa28 	bl	8002ebc <RTC_Bcd2ToByte>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8002a74:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fa1d 	bl	8002ebc <RTC_Bcd2ToByte>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4613      	mov	r3, r2
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	1a9b      	subs	r3, r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a8e:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	789b      	ldrb	r3, [r3, #2]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fa11 	bl	8002ebc <RTC_Bcd2ToByte>
 8002a9a:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002a9c:	4423      	add	r3, r4
 8002a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002aa0:	6979      	ldr	r1, [r7, #20]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f953 	bl	8002d4e <RTC_WriteTimeCounter>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e02f      	b.n	8002b1e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0205 	bic.w	r2, r2, #5
 8002acc:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f964 	bl	8002d9c <RTC_ReadAlarmCounter>
 8002ad4:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002adc:	d018      	beq.n	8002b10 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d214      	bcs.n	8002b10 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002aec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002af0:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002af2:	6939      	ldr	r1, [r7, #16]
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f96a 	bl	8002dce <RTC_WriteAlarmCounter>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d007      	beq.n	8002b10 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2204      	movs	r2, #4
 8002b04:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e006      	b.n	8002b1e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
  }
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	371c      	adds	r7, #28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd90      	pop	{r4, r7, pc}
	...

08002b28 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b088      	sub	sp, #32
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d002      	beq.n	8002b4c <HAL_RTC_SetDate+0x24>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d101      	bne.n	8002b50 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e097      	b.n	8002c80 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	7c1b      	ldrb	r3, [r3, #16]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d101      	bne.n	8002b5c <HAL_RTC_SetDate+0x34>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e091      	b.n	8002c80 <HAL_RTC_SetDate+0x158>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2202      	movs	r2, #2
 8002b66:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	78da      	ldrb	r2, [r3, #3]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	785a      	ldrb	r2, [r3, #1]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	789a      	ldrb	r2, [r3, #2]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	739a      	strb	r2, [r3, #14]
 8002b86:	e01a      	b.n	8002bbe <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	78db      	ldrb	r3, [r3, #3]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 f995 	bl	8002ebc <RTC_Bcd2ToByte>
 8002b92:	4603      	mov	r3, r0
 8002b94:	461a      	mov	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f98c 	bl	8002ebc <RTC_Bcd2ToByte>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	789b      	ldrb	r3, [r3, #2]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f983 	bl	8002ebc <RTC_Bcd2ToByte>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	7bdb      	ldrb	r3, [r3, #15]
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	7b59      	ldrb	r1, [r3, #13]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	7b9b      	ldrb	r3, [r3, #14]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	f000 f993 	bl	8002ef8 <RTC_WeekDayNum>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	7b1a      	ldrb	r2, [r3, #12]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002be2:	68f8      	ldr	r0, [r7, #12]
 8002be4:	f000 f883 	bl	8002cee <RTC_ReadTimeCounter>
 8002be8:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4a26      	ldr	r2, [pc, #152]	; (8002c88 <HAL_RTC_SetDate+0x160>)
 8002bee:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf2:	0adb      	lsrs	r3, r3, #11
 8002bf4:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	2b18      	cmp	r3, #24
 8002bfa:	d93a      	bls.n	8002c72 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	4a23      	ldr	r2, [pc, #140]	; (8002c8c <HAL_RTC_SetDate+0x164>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	091b      	lsrs	r3, r3, #4
 8002c06:	4a22      	ldr	r2, [pc, #136]	; (8002c90 <HAL_RTC_SetDate+0x168>)
 8002c08:	fb02 f303 	mul.w	r3, r2, r3
 8002c0c:	69fa      	ldr	r2, [r7, #28]
 8002c0e:	1ad3      	subs	r3, r2, r3
 8002c10:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002c12:	69f9      	ldr	r1, [r7, #28]
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 f89a 	bl	8002d4e <RTC_WriteTimeCounter>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d007      	beq.n	8002c30 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2204      	movs	r2, #4
 8002c24:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e027      	b.n	8002c80 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f8b3 	bl	8002d9c <RTC_ReadAlarmCounter>
 8002c36:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3e:	d018      	beq.n	8002c72 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d214      	bcs.n	8002c72 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002c4e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c52:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f000 f8b9 	bl	8002dce <RTC_WriteAlarmCounter>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2204      	movs	r2, #4
 8002c66:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e006      	b.n	8002c80 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	91a2b3c5 	.word	0x91a2b3c5
 8002c8c:	aaaaaaab 	.word	0xaaaaaaab
 8002c90:	00015180 	.word	0x00015180

08002c94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e01d      	b.n	8002ce6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0208 	bic.w	r2, r2, #8
 8002cb8:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002cba:	f7fe f843 	bl	8000d44 <HAL_GetTick>
 8002cbe:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002cc0:	e009      	b.n	8002cd6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002cc2:	f7fe f83f 	bl	8000d44 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e007      	b.n	8002ce6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d0ee      	beq.n	8002cc2 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b087      	sub	sp, #28
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	827b      	strh	r3, [r7, #18]
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	823b      	strh	r3, [r7, #16]
 8002cfe:	2300      	movs	r3, #0
 8002d00:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	69db      	ldr	r3, [r3, #28]
 8002d14:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002d1e:	8a7a      	ldrh	r2, [r7, #18]
 8002d20:	8a3b      	ldrh	r3, [r7, #16]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d008      	beq.n	8002d38 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002d26:	8a3b      	ldrh	r3, [r7, #16]
 8002d28:	041a      	lsls	r2, r3, #16
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	e004      	b.n	8002d42 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8002d38:	8a7b      	ldrh	r3, [r7, #18]
 8002d3a:	041a      	lsls	r2, r3, #16
 8002d3c:	89fb      	ldrh	r3, [r7, #14]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002d42:	697b      	ldr	r3, [r7, #20]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f000 f85d 	bl	8002e1c <RTC_EnterInitMode>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d002      	beq.n	8002d6e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	73fb      	strb	r3, [r7, #15]
 8002d6c:	e011      	b.n	8002d92 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	0c12      	lsrs	r2, r2, #16
 8002d76:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f872 	bl	8002e6c <RTC_ExitInitMode>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	81fb      	strh	r3, [r7, #14]
 8002da8:	2300      	movs	r3, #0
 8002daa:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002dbc:	89fb      	ldrh	r3, [r7, #14]
 8002dbe:	041a      	lsls	r2, r3, #16
 8002dc0:	89bb      	ldrh	r3, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bc80      	pop	{r7}
 8002dcc:	4770      	bx	lr

08002dce <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f81d 	bl	8002e1c <RTC_EnterInitMode>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d002      	beq.n	8002dee <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e011      	b.n	8002e12 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	0c12      	lsrs	r2, r2, #16
 8002df6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	b292      	uxth	r2, r2
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f832 	bl	8002e6c <RTC_ExitInitMode>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8002e28:	f7fd ff8c 	bl	8000d44 <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e2e:	e009      	b.n	8002e44 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e30:	f7fd ff88 	bl	8000d44 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e3e:	d901      	bls.n	8002e44 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e00f      	b.n	8002e64 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ee      	beq.n	8002e30 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0210 	orr.w	r2, r2, #16
 8002e60:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0210 	bic.w	r2, r2, #16
 8002e86:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002e88:	f7fd ff5c 	bl	8000d44 <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002e8e:	e009      	b.n	8002ea4 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002e90:	f7fd ff58 	bl	8000d44 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e9e:	d901      	bls.n	8002ea4 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e007      	b.n	8002eb4 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f003 0320 	and.w	r3, r3, #32
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0ee      	beq.n	8002e90 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002eca:	79fb      	ldrb	r3, [r7, #7]
 8002ecc:	091b      	lsrs	r3, r3, #4
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	f003 030f 	and.w	r3, r3, #15
 8002ee2:	b2da      	uxtb	r2, r3
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	4413      	add	r3, r2
 8002eea:	b2db      	uxtb	r3, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
	...

08002ef8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
 8002f04:	4613      	mov	r3, r2
 8002f06:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002f16:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d82d      	bhi.n	8002f7a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	00db      	lsls	r3, r3, #3
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <RTC_WeekDayNum+0xe4>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	085a      	lsrs	r2, r3, #1
 8002f32:	78bb      	ldrb	r3, [r7, #2]
 8002f34:	441a      	add	r2, r3
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	441a      	add	r2, r3
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	089b      	lsrs	r3, r3, #2
 8002f40:	441a      	add	r2, r3
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3b01      	subs	r3, #1
 8002f46:	4926      	ldr	r1, [pc, #152]	; (8002fe0 <RTC_WeekDayNum+0xe8>)
 8002f48:	fba1 1303 	umull	r1, r3, r1, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	1ad2      	subs	r2, r2, r3
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	4922      	ldr	r1, [pc, #136]	; (8002fe0 <RTC_WeekDayNum+0xe8>)
 8002f56:	fba1 1303 	umull	r1, r3, r1, r3
 8002f5a:	09db      	lsrs	r3, r3, #7
 8002f5c:	4413      	add	r3, r2
 8002f5e:	1d1a      	adds	r2, r3, #4
 8002f60:	4b20      	ldr	r3, [pc, #128]	; (8002fe4 <RTC_WeekDayNum+0xec>)
 8002f62:	fba3 1302 	umull	r1, r3, r3, r2
 8002f66:	1ad1      	subs	r1, r2, r3
 8002f68:	0849      	lsrs	r1, r1, #1
 8002f6a:	440b      	add	r3, r1
 8002f6c:	0899      	lsrs	r1, r3, #2
 8002f6e:	460b      	mov	r3, r1
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	1a5b      	subs	r3, r3, r1
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	e029      	b.n	8002fce <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <RTC_WeekDayNum+0xe4>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	085a      	lsrs	r2, r3, #1
 8002f8e:	78bb      	ldrb	r3, [r7, #2]
 8002f90:	441a      	add	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	441a      	add	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	089b      	lsrs	r3, r3, #2
 8002f9a:	441a      	add	r2, r3
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4910      	ldr	r1, [pc, #64]	; (8002fe0 <RTC_WeekDayNum+0xe8>)
 8002fa0:	fba1 1303 	umull	r1, r3, r1, r3
 8002fa4:	095b      	lsrs	r3, r3, #5
 8002fa6:	1ad2      	subs	r2, r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <RTC_WeekDayNum+0xe8>)
 8002fac:	fba1 1303 	umull	r1, r3, r1, r3
 8002fb0:	09db      	lsrs	r3, r3, #7
 8002fb2:	4413      	add	r3, r2
 8002fb4:	1c9a      	adds	r2, r3, #2
 8002fb6:	4b0b      	ldr	r3, [pc, #44]	; (8002fe4 <RTC_WeekDayNum+0xec>)
 8002fb8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fbc:	1ad1      	subs	r1, r2, r3
 8002fbe:	0849      	lsrs	r1, r1, #1
 8002fc0:	440b      	add	r3, r1
 8002fc2:	0899      	lsrs	r1, r3, #2
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	00db      	lsls	r3, r3, #3
 8002fc8:	1a5b      	subs	r3, r3, r1
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	b2db      	uxtb	r3, r3
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr
 8002fdc:	38e38e39 	.word	0x38e38e39
 8002fe0:	51eb851f 	.word	0x51eb851f
 8002fe4:	24924925 	.word	0x24924925

08002fe8 <HAL_RTCEx_RTCIRQHandler>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d027      	beq.n	800304e <HAL_RTCEx_RTCIRQHandler+0x66>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RTCEx_RTCIRQHandler+0x66>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0304 	and.w	r3, r3, #4
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00b      	beq.n	8003032 <HAL_RTCEx_RTCIRQHandler+0x4a>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f824 	bl	8003068 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f06f 0204 	mvn.w	r2, #4
 8003028:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2204      	movs	r2, #4
 800302e:	745a      	strb	r2, [r3, #17]
 8003030:	e005      	b.n	800303e <HAL_RTCEx_RTCIRQHandler+0x56>
      }
      else
      {
        /* Second callback */
        HAL_RTCEx_RTCEventCallback(hrtc);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f80f 	bl	8003056 <HAL_RTCEx_RTCEventCallback>

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	745a      	strb	r2, [r3, #17]
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0201 	bic.w	r2, r2, #1
 800304c:	605a      	str	r2, [r3, #4]
    }
  }
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_RTCEx_RTCEventCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr

08003068 <HAL_RTCEx_RTCEventErrorCallback>:
  * @param  hrtc: pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_RTCEventErrorCallback(RTC_HandleTypeDef *hrtc)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_RTCEventErrorCallback could be implemented in the user file
   */
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	bc80      	pop	{r7}
 8003078:	4770      	bx	lr

0800307a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e041      	b.n	8003110 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d106      	bne.n	80030a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7fd fcbb 	bl	8000a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	3304      	adds	r3, #4
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f000 fa5b 	bl	8003574 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2201      	movs	r2, #1
 80030fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2201      	movs	r2, #1
 8003102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d001      	beq.n	8003130 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e03a      	b.n	80031a6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68da      	ldr	r2, [r3, #12]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0201 	orr.w	r2, r2, #1
 8003146:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a18      	ldr	r2, [pc, #96]	; (80031b0 <HAL_TIM_Base_Start_IT+0x98>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00e      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x58>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315a:	d009      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x58>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a14      	ldr	r2, [pc, #80]	; (80031b4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d004      	beq.n	8003170 <HAL_TIM_Base_Start_IT+0x58>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a13      	ldr	r2, [pc, #76]	; (80031b8 <HAL_TIM_Base_Start_IT+0xa0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d111      	bne.n	8003194 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 0307 	and.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b06      	cmp	r3, #6
 8003180:	d010      	beq.n	80031a4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f042 0201 	orr.w	r2, r2, #1
 8003190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	e007      	b.n	80031a4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bc80      	pop	{r7}
 80031ae:	4770      	bx	lr
 80031b0:	40012c00 	.word	0x40012c00
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800

080031bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0202 	mvn.w	r2, #2
 80031f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f998 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f98b 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f99a 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0204 	mvn.w	r2, #4
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f972 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f965 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f974 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d020      	beq.n	80032b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01b      	beq.n	80032b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0208 	mvn.w	r2, #8
 8003288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2204      	movs	r2, #4
 800328e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f94c 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 80032a4:	e005      	b.n	80032b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f93f 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f94e 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2200      	movs	r2, #0
 80032b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0310 	and.w	r3, r3, #16
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d020      	beq.n	8003304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d01b      	beq.n	8003304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f06f 0210 	mvn.w	r2, #16
 80032d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2208      	movs	r2, #8
 80032da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f926 	bl	800353c <HAL_TIM_IC_CaptureCallback>
 80032f0:	e005      	b.n	80032fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f919 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f000 f928 	bl	800354e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0201 	mvn.w	r2, #1
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7fd fa74 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 fa7f 	bl	800384a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8f8 	bl	8003560 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00c      	beq.n	8003394 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d007      	beq.n	8003394 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0220 	mvn.w	r2, #32
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa52 	bl	8003838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003394:	bf00      	nop
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033a6:	2300      	movs	r3, #0
 80033a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d101      	bne.n	80033b8 <HAL_TIM_ConfigClockSource+0x1c>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e0b4      	b.n	8003522 <HAL_TIM_ConfigClockSource+0x186>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f0:	d03e      	beq.n	8003470 <HAL_TIM_ConfigClockSource+0xd4>
 80033f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033f6:	f200 8087 	bhi.w	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 80033fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033fe:	f000 8086 	beq.w	800350e <HAL_TIM_ConfigClockSource+0x172>
 8003402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003406:	d87f      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003408:	2b70      	cmp	r3, #112	; 0x70
 800340a:	d01a      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0xa6>
 800340c:	2b70      	cmp	r3, #112	; 0x70
 800340e:	d87b      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003410:	2b60      	cmp	r3, #96	; 0x60
 8003412:	d050      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0x11a>
 8003414:	2b60      	cmp	r3, #96	; 0x60
 8003416:	d877      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003418:	2b50      	cmp	r3, #80	; 0x50
 800341a:	d03c      	beq.n	8003496 <HAL_TIM_ConfigClockSource+0xfa>
 800341c:	2b50      	cmp	r3, #80	; 0x50
 800341e:	d873      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003420:	2b40      	cmp	r3, #64	; 0x40
 8003422:	d058      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x13a>
 8003424:	2b40      	cmp	r3, #64	; 0x40
 8003426:	d86f      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b30      	cmp	r3, #48	; 0x30
 800342a:	d064      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x15a>
 800342c:	2b30      	cmp	r3, #48	; 0x30
 800342e:	d86b      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b20      	cmp	r3, #32
 8003432:	d060      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003434:	2b20      	cmp	r3, #32
 8003436:	d867      	bhi.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b00      	cmp	r3, #0
 800343a:	d05c      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x15a>
 800343c:	2b10      	cmp	r3, #16
 800343e:	d05a      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	e062      	b.n	8003508 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6899      	ldr	r1, [r3, #8]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685a      	ldr	r2, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	f000 f974 	bl	800373e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003464:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	609a      	str	r2, [r3, #8]
      break;
 800346e:	e04f      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	6899      	ldr	r1, [r3, #8]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	f000 f95d 	bl	800373e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003492:	609a      	str	r2, [r3, #8]
      break;
 8003494:	e03c      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6818      	ldr	r0, [r3, #0]
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	6859      	ldr	r1, [r3, #4]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	461a      	mov	r2, r3
 80034a4:	f000 f8d4 	bl	8003650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2150      	movs	r1, #80	; 0x50
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 f92b 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80034b4:	e02c      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	461a      	mov	r2, r3
 80034c4:	f000 f8f2 	bl	80036ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2160      	movs	r1, #96	; 0x60
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 f91b 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80034d4:	e01c      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 f8b4 	bl	8003650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2140      	movs	r1, #64	; 0x40
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f90b 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80034f4:	e00c      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4619      	mov	r1, r3
 8003500:	4610      	mov	r0, r2
 8003502:	f000 f902 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 8003506:	e003      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      break;
 800350c:	e000      	b.n	8003510 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800350e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003520:	7bfb      	ldrb	r3, [r7, #15]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr

0800354e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800354e:	b480      	push	{r7}
 8003550:	b083      	sub	sp, #12
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003556:	bf00      	nop
 8003558:	370c      	adds	r7, #12
 800355a:	46bd      	mov	sp, r7
 800355c:	bc80      	pop	{r7}
 800355e:	4770      	bx	lr

08003560 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	bc80      	pop	{r7}
 8003570:	4770      	bx	lr
	...

08003574 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a2f      	ldr	r2, [pc, #188]	; (8003644 <TIM_Base_SetConfig+0xd0>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d00b      	beq.n	80035a4 <TIM_Base_SetConfig+0x30>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003592:	d007      	beq.n	80035a4 <TIM_Base_SetConfig+0x30>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a2c      	ldr	r2, [pc, #176]	; (8003648 <TIM_Base_SetConfig+0xd4>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d003      	beq.n	80035a4 <TIM_Base_SetConfig+0x30>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a2b      	ldr	r2, [pc, #172]	; (800364c <TIM_Base_SetConfig+0xd8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d108      	bne.n	80035b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a22      	ldr	r2, [pc, #136]	; (8003644 <TIM_Base_SetConfig+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d00b      	beq.n	80035d6 <TIM_Base_SetConfig+0x62>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c4:	d007      	beq.n	80035d6 <TIM_Base_SetConfig+0x62>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <TIM_Base_SetConfig+0xd4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d003      	beq.n	80035d6 <TIM_Base_SetConfig+0x62>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1e      	ldr	r2, [pc, #120]	; (800364c <TIM_Base_SetConfig+0xd8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d108      	bne.n	80035e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <TIM_Base_SetConfig+0xd0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d103      	bne.n	800361c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	691a      	ldr	r2, [r3, #16]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b00      	cmp	r3, #0
 800362c:	d005      	beq.n	800363a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	f023 0201 	bic.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	611a      	str	r2, [r3, #16]
  }
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr
 8003644:	40012c00 	.word	0x40012c00
 8003648:	40000400 	.word	0x40000400
 800364c:	40000800 	.word	0x40000800

08003650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	031b      	lsls	r3, r3, #12
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	f043 0307 	orr.w	r3, r3, #7
 800372c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800373e:	b480      	push	{r7}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003758:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	431a      	orrs	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4313      	orrs	r3, r2
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e046      	b.n	8003822 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a16      	ldr	r2, [pc, #88]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d00e      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d009      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d004      	beq.n	80037f6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d10c      	bne.n	8003810 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	4313      	orrs	r3, r2
 8003806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	bc80      	pop	{r7}
 800382a:	4770      	bx	lr
 800382c:	40012c00 	.word	0x40012c00
 8003830:	40000400 	.word	0x40000400
 8003834:	40000800 	.word	0x40000800

08003838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr

0800384a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	bc80      	pop	{r7}
 800385a:	4770      	bx	lr

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fd f8f0 	bl	8000a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	; 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fcd5 	bl	8004250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	4613      	mov	r3, r2
 8003908:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b20      	cmp	r3, #32
 8003914:	d112      	bne.n	800393c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_UART_Receive_IT+0x26>
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e00b      	b.n	800393e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	461a      	mov	r2, r3
 8003930:	68b9      	ldr	r1, [r7, #8]
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 fab7 	bl	8003ea6 <UART_Start_Receive_IT>
 8003938:	4603      	mov	r3, r0
 800393a:	e000      	b.n	800393e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800393c:	2302      	movs	r3, #2
  }
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b0ba      	sub	sp, #232	; 0xe8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	695b      	ldr	r3, [r3, #20]
 800396a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003974:	2300      	movs	r3, #0
 8003976:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800397a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10f      	bne.n	80039ae <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800398e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d009      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
 800399a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fb93 	bl	80040d2 <UART_Receive_IT>
      return;
 80039ac:	e25b      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	f000 80de 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d106      	bne.n	80039d2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039c8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80d1 	beq.w	8003b74 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00b      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
 80039de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039fa:	f003 0304 	and.w	r3, r3, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d00b      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
 8003a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a12:	f043 0202 	orr.w	r2, r3, #2
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00b      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
 8003a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a36:	f043 0204 	orr.w	r2, r3, #4
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d011      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
 8003a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d105      	bne.n	8003a62 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d005      	beq.n	8003a6e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a66:	f043 0208 	orr.w	r2, r3, #8
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 81f2 	beq.w	8003e5c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7c:	f003 0320 	and.w	r3, r3, #32
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
 8003a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d002      	beq.n	8003a96 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 fb1e 	bl	80040d2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	695b      	ldr	r3, [r3, #20]
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d103      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x17a>
 8003aba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d04f      	beq.n	8003b62 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fa28 	bl	8003f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d041      	beq.n	8003b5a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3314      	adds	r3, #20
 8003adc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	3314      	adds	r3, #20
 8003afe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003b02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003b0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003b1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1d9      	bne.n	8003ad6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d013      	beq.n	8003b52 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	4a7e      	ldr	r2, [pc, #504]	; (8003d28 <HAL_UART_IRQHandler+0x3e0>)
 8003b30:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b36:	4618      	mov	r0, r3
 8003b38:	f7fd fa7a 	bl	8001030 <HAL_DMA_Abort_IT>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d016      	beq.n	8003b70 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e00e      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f993 	bl	8003e7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e00a      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f98f 	bl	8003e7e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b60:	e006      	b.n	8003b70 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f98b 	bl	8003e7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003b6e:	e175      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b70:	bf00      	nop
    return;
 8003b72:	e173      	b.n	8003e5c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 814f 	bne.w	8003e1c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b82:	f003 0310 	and.w	r3, r3, #16
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8148 	beq.w	8003e1c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8141 	beq.w	8003e1c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	60bb      	str	r3, [r7, #8]
 8003bae:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f000 80b6 	beq.w	8003d2c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bcc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 8145 	beq.w	8003e60 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003bda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bde:	429a      	cmp	r2, r3
 8003be0:	f080 813e 	bcs.w	8003e60 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003bea:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f000 8088 	beq.w	8003d08 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003c0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003c12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c16:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	330c      	adds	r3, #12
 8003c20:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003c24:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003c30:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c34:	e841 2300 	strex	r3, r2, [r1]
 8003c38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1d9      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4e:	e853 3f00 	ldrex	r3, [r3]
 8003c52:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003c54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c56:	f023 0301 	bic.w	r3, r3, #1
 8003c5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3314      	adds	r3, #20
 8003c64:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003c6c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003c70:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003c74:	e841 2300 	strex	r3, r2, [r1]
 8003c78:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1e1      	bne.n	8003c44 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003c8a:	e853 3f00 	ldrex	r3, [r3]
 8003c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003c90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003ca4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003ca6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003caa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cac:	e841 2300 	strex	r3, r2, [r1]
 8003cb0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003cb2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1e3      	bne.n	8003c80 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003cd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd8:	f023 0310 	bic.w	r3, r3, #16
 8003cdc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003cea:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cf2:	e841 2300 	strex	r3, r2, [r1]
 8003cf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1e3      	bne.n	8003cc6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fd f959 	bl	8000fba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8b6 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d24:	e09c      	b.n	8003e60 <HAL_UART_IRQHandler+0x518>
 8003d26:	bf00      	nop
 8003d28:	08003fdd 	.word	0x08003fdd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 808e 	beq.w	8003e64 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 8089 	beq.w	8003e64 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	330c      	adds	r3, #12
 8003d72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003d76:	647a      	str	r2, [r7, #68]	; 0x44
 8003d78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d7e:	e841 2300 	strex	r3, r2, [r1]
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1e3      	bne.n	8003d52 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d94:	e853 3f00 	ldrex	r3, [r3]
 8003d98:	623b      	str	r3, [r7, #32]
   return(result);
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	f023 0301 	bic.w	r3, r3, #1
 8003da0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	3314      	adds	r3, #20
 8003daa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003dae:	633a      	str	r2, [r7, #48]	; 0x30
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e3      	bne.n	8003d8a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60fb      	str	r3, [r7, #12]
   return(result);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	330c      	adds	r3, #12
 8003df0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003df4:	61fa      	str	r2, [r7, #28]
 8003df6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df8:	69b9      	ldr	r1, [r7, #24]
 8003dfa:	69fa      	ldr	r2, [r7, #28]
 8003dfc:	e841 2300 	strex	r3, r2, [r1]
 8003e00:	617b      	str	r3, [r7, #20]
   return(result);
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1e3      	bne.n	8003dd0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e12:	4619      	mov	r1, r3
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f83b 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e1a:	e023      	b.n	8003e64 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d009      	beq.n	8003e3c <HAL_UART_IRQHandler+0x4f4>
 8003e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8e5 	bl	8004004 <UART_Transmit_IT>
    return;
 8003e3a:	e014      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <HAL_UART_IRQHandler+0x51e>
 8003e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d008      	beq.n	8003e66 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f924 	bl	80040a2 <UART_EndTransmit_IT>
    return;
 8003e5a:	e004      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e5c:	bf00      	nop
 8003e5e:	e002      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e60:	bf00      	nop
 8003e62:	e000      	b.n	8003e66 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e64:	bf00      	nop
  }
}
 8003e66:	37e8      	adds	r7, #232	; 0xe8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bc80      	pop	{r7}
 8003e7c:	4770      	bx	lr

08003e7e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bc80      	pop	{r7}
 8003e8e:	4770      	bx	lr

08003e90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bc80      	pop	{r7}
 8003ea4:	4770      	bx	lr

08003ea6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	b085      	sub	sp, #20
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	88fa      	ldrh	r2, [r7, #6]
 8003ebe:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2222      	movs	r2, #34	; 0x22
 8003ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68da      	ldr	r2, [r3, #12]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f042 0220 	orr.w	r2, r2, #32
 8003f0a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bc80      	pop	{r7}
 8003f16:	4770      	bx	lr

08003f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b095      	sub	sp, #84	; 0x54
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2a:	e853 3f00 	ldrex	r3, [r3]
 8003f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f40:	643a      	str	r2, [r7, #64]	; 0x40
 8003f42:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f48:	e841 2300 	strex	r3, r2, [r1]
 8003f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1e5      	bne.n	8003f20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3314      	adds	r3, #20
 8003f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	e853 3f00 	ldrex	r3, [r3]
 8003f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	f023 0301 	bic.w	r3, r3, #1
 8003f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	3314      	adds	r3, #20
 8003f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f7c:	e841 2300 	strex	r3, r2, [r1]
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1e5      	bne.n	8003f54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d119      	bne.n	8003fc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	e853 3f00 	ldrex	r3, [r3]
 8003f9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f023 0310 	bic.w	r3, r3, #16
 8003fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	330c      	adds	r3, #12
 8003fae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fb0:	61ba      	str	r2, [r7, #24]
 8003fb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb4:	6979      	ldr	r1, [r7, #20]
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	e841 2300 	strex	r3, r2, [r1]
 8003fbc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d1e5      	bne.n	8003f90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003fd2:	bf00      	nop
 8003fd4:	3754      	adds	r7, #84	; 0x54
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f7ff ff41 	bl	8003e7e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ffc:	bf00      	nop
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004012:	b2db      	uxtb	r3, r3
 8004014:	2b21      	cmp	r3, #33	; 0x21
 8004016:	d13e      	bne.n	8004096 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004020:	d114      	bne.n	800404c <UART_Transmit_IT+0x48>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d110      	bne.n	800404c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800403e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	621a      	str	r2, [r3, #32]
 800404a:	e008      	b.n	800405e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	1c59      	adds	r1, r3, #1
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	6211      	str	r1, [r2, #32]
 8004056:	781a      	ldrb	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29b      	uxth	r3, r3
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4619      	mov	r1, r3
 800406c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10f      	bne.n	8004092 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004080:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004090:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	bc80      	pop	{r7}
 80040a0:	4770      	bx	lr

080040a2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b082      	sub	sp, #8
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68da      	ldr	r2, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040b8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7ff fed2 	bl	8003e6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b08c      	sub	sp, #48	; 0x30
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b22      	cmp	r3, #34	; 0x22
 80040e4:	f040 80ae 	bne.w	8004244 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f0:	d117      	bne.n	8004122 <UART_Receive_IT+0x50>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004102:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	b29b      	uxth	r3, r3
 800410c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004110:	b29a      	uxth	r2, r3
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	1c9a      	adds	r2, r3, #2
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	629a      	str	r2, [r3, #40]	; 0x28
 8004120:	e026      	b.n	8004170 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004128:	2300      	movs	r3, #0
 800412a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004134:	d007      	beq.n	8004146 <UART_Receive_IT+0x74>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <UART_Receive_IT+0x82>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d106      	bne.n	8004154 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	b2da      	uxtb	r2, r3
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	701a      	strb	r2, [r3, #0]
 8004152:	e008      	b.n	8004166 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004160:	b2da      	uxtb	r2, r3
 8004162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004164:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29b      	uxth	r3, r3
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	4619      	mov	r1, r3
 800417e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004180:	2b00      	cmp	r3, #0
 8004182:	d15d      	bne.n	8004240 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0220 	bic.w	r2, r2, #32
 8004192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68da      	ldr	r2, [r3, #12]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 0201 	bic.w	r2, r2, #1
 80041b2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d135      	bne.n	8004236 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	613b      	str	r3, [r7, #16]
   return(result);
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f023 0310 	bic.w	r3, r3, #16
 80041e6:	627b      	str	r3, [r7, #36]	; 0x24
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f0:	623a      	str	r2, [r7, #32]
 80041f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	69f9      	ldr	r1, [r7, #28]
 80041f6:	6a3a      	ldr	r2, [r7, #32]
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d10a      	bne.n	8004228 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	60fb      	str	r3, [r7, #12]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	60fb      	str	r3, [r7, #12]
 8004226:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800422c:	4619      	mov	r1, r3
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7ff fe2e 	bl	8003e90 <HAL_UARTEx_RxEventCallback>
 8004234:	e002      	b.n	800423c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fc fcb0 	bl	8000b9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e002      	b.n	8004246 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3730      	adds	r7, #48	; 0x30
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
	...

08004250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68da      	ldr	r2, [r3, #12]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	4313      	orrs	r3, r2
 800427e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800428a:	f023 030c 	bic.w	r3, r3, #12
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	430b      	orrs	r3, r1
 8004296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699a      	ldr	r2, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a2c      	ldr	r2, [pc, #176]	; (8004364 <UART_SetConfig+0x114>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d103      	bne.n	80042c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80042b8:	f7fe f974 	bl	80025a4 <HAL_RCC_GetPCLK2Freq>
 80042bc:	60f8      	str	r0, [r7, #12]
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7fe f95c 	bl	800257c <HAL_RCC_GetPCLK1Freq>
 80042c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009a      	lsls	r2, r3, #2
 80042d0:	441a      	add	r2, r3
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	4a22      	ldr	r2, [pc, #136]	; (8004368 <UART_SetConfig+0x118>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	0119      	lsls	r1, r3, #4
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	009a      	lsls	r2, r3, #2
 80042f0:	441a      	add	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042fc:	4b1a      	ldr	r3, [pc, #104]	; (8004368 <UART_SetConfig+0x118>)
 80042fe:	fba3 0302 	umull	r0, r3, r3, r2
 8004302:	095b      	lsrs	r3, r3, #5
 8004304:	2064      	movs	r0, #100	; 0x64
 8004306:	fb00 f303 	mul.w	r3, r0, r3
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	011b      	lsls	r3, r3, #4
 800430e:	3332      	adds	r3, #50	; 0x32
 8004310:	4a15      	ldr	r2, [pc, #84]	; (8004368 <UART_SetConfig+0x118>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	095b      	lsrs	r3, r3, #5
 8004318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800431c:	4419      	add	r1, r3
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4613      	mov	r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	4413      	add	r3, r2
 8004326:	009a      	lsls	r2, r3, #2
 8004328:	441a      	add	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	fbb2 f2f3 	udiv	r2, r2, r3
 8004334:	4b0c      	ldr	r3, [pc, #48]	; (8004368 <UART_SetConfig+0x118>)
 8004336:	fba3 0302 	umull	r0, r3, r3, r2
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2064      	movs	r0, #100	; 0x64
 800433e:	fb00 f303 	mul.w	r3, r0, r3
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	3332      	adds	r3, #50	; 0x32
 8004348:	4a07      	ldr	r2, [pc, #28]	; (8004368 <UART_SetConfig+0x118>)
 800434a:	fba2 2303 	umull	r2, r3, r2, r3
 800434e:	095b      	lsrs	r3, r3, #5
 8004350:	f003 020f 	and.w	r2, r3, #15
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	440a      	add	r2, r1
 800435a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40013800 	.word	0x40013800
 8004368:	51eb851f 	.word	0x51eb851f

0800436c <__libc_init_array>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	2600      	movs	r6, #0
 8004370:	4d0c      	ldr	r5, [pc, #48]	; (80043a4 <__libc_init_array+0x38>)
 8004372:	4c0d      	ldr	r4, [pc, #52]	; (80043a8 <__libc_init_array+0x3c>)
 8004374:	1b64      	subs	r4, r4, r5
 8004376:	10a4      	asrs	r4, r4, #2
 8004378:	42a6      	cmp	r6, r4
 800437a:	d109      	bne.n	8004390 <__libc_init_array+0x24>
 800437c:	f000 f822 	bl	80043c4 <_init>
 8004380:	2600      	movs	r6, #0
 8004382:	4d0a      	ldr	r5, [pc, #40]	; (80043ac <__libc_init_array+0x40>)
 8004384:	4c0a      	ldr	r4, [pc, #40]	; (80043b0 <__libc_init_array+0x44>)
 8004386:	1b64      	subs	r4, r4, r5
 8004388:	10a4      	asrs	r4, r4, #2
 800438a:	42a6      	cmp	r6, r4
 800438c:	d105      	bne.n	800439a <__libc_init_array+0x2e>
 800438e:	bd70      	pop	{r4, r5, r6, pc}
 8004390:	f855 3b04 	ldr.w	r3, [r5], #4
 8004394:	4798      	blx	r3
 8004396:	3601      	adds	r6, #1
 8004398:	e7ee      	b.n	8004378 <__libc_init_array+0xc>
 800439a:	f855 3b04 	ldr.w	r3, [r5], #4
 800439e:	4798      	blx	r3
 80043a0:	3601      	adds	r6, #1
 80043a2:	e7f2      	b.n	800438a <__libc_init_array+0x1e>
 80043a4:	08004434 	.word	0x08004434
 80043a8:	08004434 	.word	0x08004434
 80043ac:	08004434 	.word	0x08004434
 80043b0:	08004438 	.word	0x08004438

080043b4 <memset>:
 80043b4:	4603      	mov	r3, r0
 80043b6:	4402      	add	r2, r0
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d100      	bne.n	80043be <memset+0xa>
 80043bc:	4770      	bx	lr
 80043be:	f803 1b01 	strb.w	r1, [r3], #1
 80043c2:	e7f9      	b.n	80043b8 <memset+0x4>

080043c4 <_init>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr

080043d0 <_fini>:
 80043d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043d2:	bf00      	nop
 80043d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043d6:	bc08      	pop	{r3}
 80043d8:	469e      	mov	lr, r3
 80043da:	4770      	bx	lr
